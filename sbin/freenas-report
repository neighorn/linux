#! /usr/bin/perl
#
# Copyright (c) 2005,2009,2011 Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# Read and filter FreeNAS reports.
#
use strict;
use warnings;
use lib '/usr/local/lib/perl5/site_perl';
use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($Bin $Script);
use Sys::Hostname;
use POSIX qw(strftime);

# Initialize variables.
our $Prog=$Script;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;				# No errors so far.
our $Syslog='USER';			# Name of Syslog facility.  '' for none.
our $BaseDir=$Bin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile="$BaseDir";		# Deterimine the name of our config file.
$ConfigFile =~ s"/.[^/]*$"/etc/${Prog}.cfg";# 	Ditto.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
#
our $opt_f;				# -f (file) option.
our $opt_h;				# -h (help) option.
our $opt_e;				# -e (error mail) option.
our $opt_m;				# -m (mail) option.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_t;				# -t (test) option.
our $opt_v;				# -v (verbose) option.
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='f=s e=l h m=l O=s p=l P=l t v';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.

# Get the e-mail, so we can retrieve the From and Subject line
print "Reading from STDIN...\n";
my @lines = <STDIN>;
my $From='';
my $Subject='';
foreach (@lines) {
	last if (/^\s*$/);		# Blank line meands end of headers.
	$From = $_ if (/^From /i and ! $From);
	$Subject = $_ if (/^Subject: /i and ! $Subject);
	last if ($From and $Subject);	# Found all we wanted.
}
$From =~ s/^From //i;		# Strip prefix.
$From ='root@' . hostname() unless ($From !~ /^\s*$/);
$Subject =~ s/^Subject: //;	# Strip prefix.
$Subject =~ s/^(\S+)\.\S+\.(nwiglobal\.net|nwiservices\.com) /\U$1 /;
$Subject =~ s/ output\s*$//;	# Strip unnecessary text.
$Subject = "%* %m/%d %C %N %E %* %* %*" unless ($Subject);
	
# Set up our logging and output filtering.
LogOutput({
	ALWAYS_MAIL_LIST =>	$opt_m,
	ALWAYS_PAGE_LIST =>	$opt_p,
	ERROR_MAIL_LIST =>	$opt_e,
	ERROR_PAGE_LIST =>	$opt_P,
	SYSLOG_FACILITY =>	$Syslog,
	MAIL_SUBJECT	=>	"%* %m/%d $Subject %E %* %* %*",
	MAIL_FROM	=>	$From,
	CLEAN_UP	=>	\&Cleanup,
});

# Verify the command line.
die("Excess parameters specified on the command line.  See \"$Prog -h\" for usage.")
	unless (@Parms == 0);

# Open the copy file if requested.
my $COPYFILE;
$opt_f =~ s/%U/$ENV{LOGNAME}/g;
$opt_f = strftime($opt_f,localtime());
if ($opt_f) {
	warn "Unable to open $opt_f: $!" 
	unless open($COPYFILE,'>',$opt_f);
}

my $EndOfHeaders = 0;
foreach (@lines) {
	print $COPYFILE $_ if ($COPYFILE);
	$EndOfHeaders = 1 if (/^\s*$/);
	print $_ if ($EndOfHeaders);
}
warn "No end-of-headers line found\n" unless $EndOfHeaders;
if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}

sub Cleanup {
	# Force exit code 0, so postfix/alias invocation doesn't think there are problems.
	$LogOutput::ExitCode = 0;
	return 0;
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="more" unless ($Pagenater);
	system("pod2text $Bin/$Script | $Pagenater");
	exit(1);
}

=pod
=head1 $Prog - >>description<<

=head3 Usage:  
	$Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] files

	$Prog -h

=head3 Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel

=head3 Parameters:
	files	:	one or more files to process.

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE  /^\s*$/
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    "^\s*Job ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
#
# FreeNAS filters
#
SHOW	"^\s*From "
IGNORE	"^\s*Return-Path: "
IGNORE	"^\s*X-Original-To: "
IGNORE	"^\s*Delivered-To: "
IGNORE	"^\s*Received: from "
IGNORE	"^\s*by mercury (Postfix) with ESMTP id "
IGNORE	"^\s*for <freenas-report\@mercury>; "
IGNORE	"^\s*Content-Type: "
IGNORE	"^\s*MIME-Version: "
IGNORE	"^\s*Content-Transfer-Encoding: "
SHOW	"^\s*Subject: "
IGNORE	"^\s*From: "
IGNORE	"^\s*To: "
IGNORE	"^\s*Date: "
SHOW	"^\s*Checking for uids of 0:$"
IGNORE	"^\s*root 0$"
SHOW	"^\s*Checking for passwordless accounts:\s*$"
SHOW	"^\s*Checking login.conf permissions:\s*$"
SHOW	"^\s*Checking for ports with mismatched checksums:\s*$"
IGNORE	"^\s*\S+ login failures:\s*$"
IGNORE	"^\s*\S+ refused connections:\s*$"
SHOW	"^\s*Reading from STDIN\.\.\.$"
IGNORE	"^\s*Removing stale files from /var/preserve:$"
IGNORE	"^\s*Cleaning out old system announcements:$"
IGNORE	"^\s*Backup passwd and group files:$"
IGNORE	"^\s*Verifying group file syntax:$"
IGNORE	"^\s*/etc/group is fine$"
IGNORE	"^\s*Backing up package db directory:$"
IGNORE	"^\s*Disk status:$"
IGNORE	"^\s*Filesystem             Size    Used   Avail Capacity  Mounted on$"
IGNORE	"^\s*devfs\s+[0-9.]+.\s+[0-9.]+.\s+[0-9.]+.\s+\d+%\s+/dev$"
IGNORE	"^\s*\S+\s+[0-9.]+.\s+[0-9.]+.\s+[0-9.]+.\s+(\d+|[0-8]\d+|9[0-4])%\s+\S+$"
IGNORE	"^\s*NAME\s*SIZE\s+ALLOC\s+FREE\s+CAP\s+DEDUP\s+HEALTH\s+ALTROOT"
IGNORE	"^\s*\S+\s+[\d.]+[TG]\s+[\d.]+[TG]\s+[\d.]+[TG]\s*([0-8]\d|9[0-4])%\s+[\d.]+x\s+ONLINE\s"
IGNORE	"^\s*Last dump\(s\) done \(Dump '>' file systems\):$"
IGNORE	"^\s*Checking status of zfs pools:$"
SHOW	"^\s*all pools are healthy$"
SHOW	"^\s*Checking status of ATA raid partitions:$"
IGNORE	"^\s*Checking status of gmirror\(\d+\) devices:$"
IGNORE	"^\s*Checking status of graid3\(\d+\) devices:$"
IGNORE	"^\s*Checking status of gstripe\(\d+\) devices:$"
IGNORE	"^\s*Network interface status:$"
SHOW	"^\s*Name\s+Mtu\s+Network\s+Address\s+Ipkts\s+Ierrs\s+Idrop\s+Opkts\s+"
IGNORE	"^\s*errs\s+Coll$"
#             Name             Mtu    Network Address   Ipkts  Ierrs   Idrop   Opkts  Oerrs   Odrop
IGNORE	"^\s*(lo0|em\d+\*?|usbus)\s+ \S+\s+ \S+\s+  (\S+\s+)? \d+\s+ [0-]\s+ [0-]\s+ \d+\s+ [0-]\s+ [0-]\s*$"x
IGNORE	"^\s*(lo0|em\d+\*?)\s+ \S+\s+ \S+\s+  (\S+\s+)? \d+\s+ [0-]\s+ [0-]\s+ \d+\s*="x
IGNORE	"^\s*[0-]\s+[0-]$"
IGNORE	"^\s*(lo0|em\d+)\s+\S+\s+\S+\s+\S+\s+\d+\s+[0-]\s+[0-]\s+\d+\s+([0-]\s+[0-])?$"
SHOW	"^\s*\S+ changes in mounted filesystems:$"
IGNORE	"^\s*/dev/\S+\s+/\S+/\s+ufs\s+r\S+\s+[0-2]\s+[0-2]$"
IGNORE	"^\s*devfsS+\s+/dev/\s+devfs\s+r\S+\s+[0-2]\s+[0-2]$"
IGNORE	"^\s*\S+\s+/\S+/\s+zfs\s+r\S+\s+[0-2]\s+[0-2]$"
IGNORE	"^\s*Security check:$"
IGNORE	"^\s*\(output mailed separately\)$"
IGNORE	"^\s*Checking status of 3ware RAID controllers:$"
IGNORE	"^\s*Alarms \(most recent first\):$"
SHOW	"^\s*No new alarms.$"
IGNORE	"^\s*-- End of \S+ output --$"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
