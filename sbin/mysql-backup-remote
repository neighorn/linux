#! /usr/bin/perl
#
# Copyright (c) 2005,2009,2011 Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# Run remote MySQL backups on the MT servers
#
use strict;
use warnings;
use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($RealBin $RealScript);

# Initialize variables.
our $Prog=$RealScript;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;				# No errors so far.
our $Syslog='';				# Name of Syslog facility.  '' for none.
our $BaseDir=$RealBin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile="$BaseDir";		# Deterimine the name of our config file.
$ConfigFile =~ s</.[^/]*$></etc/${Prog}.cfg>;# 	Ditto.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
#
our $opt_h;				# -h (help) option.
our $opt_e;				# -e (error mail) option.
our $opt_m;				# -m (mail) option.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_r = '';			# -r mysql-backup retention-period passthrough
our $opt_s = '';			# -s mysql-backup retention-period passthrough
our $opt_t;				# -t (test) option.
our $opt_v;				# -v (verbose) option.
#
my @Servers;

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='e=l h m=l O=s p=l P=l r=s s=s t v';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.
	
# Set up our logging and output filtering.
LogOutput('',$Syslog,$LogFile,$opt_m,$opt_e,$opt_p,$opt_P);

@Servers = @Parms if (@Parms);
@Servers = split(/\s+/,$Config{SERVERS}) if (! @Servers and $Config{SERVERS});
die "No remote servers specified on the command line or in the config file\n"
	unless (@Servers);
my $BaseOptions = '';
$BaseOptions .= " -t" if ($opt_t);
$BaseOptions .= " -r $opt_r" if ($opt_r);
$BaseOptions .= " -s $opt_s" if ($opt_s);
foreach my $Server (@Servers) {
	my $Options = $BaseOptions;
	$Options .= " " . $Config{uc($Server)} if (exists($Config{uc($Server)}));
	local $opt_t=$main::opt_t;
	$opt_t='';
	printf "%s %-10.10s %s\n", '-'x30, $Server, '-'x30;
	RunDangerousCmd("ssh $Server /usr/local/sbin/mysql-backup $Options -F /usr/local/etc/filter-accept-all.filter");
	warn "ssh to $Server failed with status $?: $@" if ($?);
}
print '-'x72 . "\n";

#
if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="more" unless ($Pagenater);
	system("pod2text $RealBin/$RealScript | $Pagenater");
	exit(1);
}

=pod

=head1 $Prog - backup up remote MySQL databases

=head3 Usage:  
	$Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] [-r days] [-s size] [server1...]

	$Prog -h

=head3 Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-r days	:	mysql-backup passthrough option
	-s size	:	mysql-backup passthrough option
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel


=head3 Parameters:
	server1...:	one or more servers to back up.  If no servers are 
			listed on the command line, $Prog will look for 
			a "SERVERS" tag in the configuration file.

=head3 Notes:

=over 4

=item 1)

The config file may include a "SERVERS" entry, followed a list of servers.  If 
no servers are listed on the command line, this list of servers are backed up.

Example:

    SERVERS: server1 server2 server3

=item 2)

The config file may include an entry matching a server name.  Any items 
listed on this line will be passed as options when backing up the specified server.

Example:

    server2:  -r 7 -s 1500000

=back

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
LOGONLY "^\s*\S+ started on \S+ on \d+/\d+/\d+"
LOGONLY "^\s*\S+ started on \S+ on( \S+,)? \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^\s*Command: /
SHOW	"^\s*-{30} \S+\s+-{30}$"
SHOW	"^\s*-+$"
IGNORE	"^\s*Command: /usr/local/sbin/mysql-backup"
IGNORE	"^\s*$"
SHOW	"^\s*[,\d]+ bytes written to "
IGNORE	"^\s*Job ended on( \S+,)? ../../.... at ..:..:.. - run time: "
SHOW	"^\s*Job ended normally with status 0 and signal 0$"
# The following are normal messages we don't need to see.
#
IGNORE  /^\s*$/
#
# These are normal messages that we want to see.
#
IGNORE	"^\s*Job ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"i
IGNORE	"^\s*Deleting /"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
