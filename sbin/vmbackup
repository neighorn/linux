#!/usr/bin/perl

use strict;
use warnings;
use LogOutput;
use Getopt::Long 2.38 qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use File::Find;
use File::FnMatch qw(:fnmatch);
use File::Path;
use File::Temp qw(tempdir);
use Fcntl qw(:flock :mode :DEFAULT);
use POSIX qw(strftime);
use IO::Socket;
use Sys::Virt;
use Data::Dumper::Simple;
use JSON;			# To save/restore the backup index file.
$Data::Dumper::Pad = "Verbose:\t\t";

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my $ConfigFile="$BaseDir/${Prog}.cfg";	# Name of config file.
my $Syslog = 'user';			# Log to the syslog.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.
our @RecoveryRestart;			# List of machines that failed to
					# shutdown.
our %MachineNames;			# Valid machines and their status.
our %Machines;				# Sys::Virt objects for each machine.
our %BackedUp;				# Has each machine been backed up?

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'cd|b=s'		=>	\&opt_Value,
		'cycles|C=i'		=>	\&opt_Value,
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'after-state=s'		=>	\&opt_Value,
		'option-set|O=s'	=>	\&opt_O,
		'output|o=s'		=>	\&opt_Value,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'timeout|T=s'		=>	\&opt_Value,
		'subject=s'		=>	\&opt_Value,
		'gzip|z!'		=>	\&opt_Value,
		'test|t!'		=>	\&opt_Value,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
		'exclude-file=s'	=>	\&opt_Array,
		'exclude-vm=s'		=>	\&opt_Hash,
		'include-file=s'	=>	\&opt_Array,
);
#

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=uc($name);	# Name is not case sensitive.
		$settings=~s/\s+$//;	# Trim trailing spaces.
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
if ($Errors) {
	print STDERR "Invalid command line options. Aborting\n";
	exit 15;
}

# If there aren't any parameters here, back up everything.
push @ARGVSave, '_ALL_' if (@ARGV == 0);

print Dumper(\%Config) if ($Options{verbose} >=3);

@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject=
		  "%* %m/%d %C %N "
		. ($Options{test}?' - test -':'')
		. join(', ',@Parms)
		. " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{"always-mail"}},
	ERROR_MAIL_LIST		=> \@{$Options{"error-mail"}},
	ALWAYS_PAGE_LIST	=> \@{$Options{"always-page"}},
	ERROR_PAGE_LIST		=> \@{$Options{"error-page"}},
	MAIL_SUBJECT		=> $Subject,
	VERBOSE			=> $LogOutputVerbose,
});

# Make a list of all the virtual machines.
my $vmm = Sys::Virt->new(uri => 'qemu:///system');
my @MachineHandles = $vmm->list_all_domains();
foreach (@MachineHandles) {
	my $Name = $_->get_name;
	if ($Name eq '_ALL_') {
		warn "Machine named '_ALL_' conflicts with $Prog keyword.  Ignoring this machine.";
	}
	else {
		$Machines{$Name} = $_;		# Map names to objects.
		$MachineNames{$Name}=0;		# Keep list of valid names.
		$BackedUp{$Name}=0;		# Keep backup state, to avoid redundant runs.
	}
}

# Make another pass through the parm list.  This time, actually
# run backups when we come across parms via <>.  Doing it this way lets
# the user turn options on and off for each kind of backup (e.g.
# change the exclude list per backup).
%Options = (
		'after-state' => 'same',
		cd => '/var/lib/libvirt/images',
		test => $Options{test},
		verbose => $Options{verbose},
		timeout => 5,
);			# Reset Options to defaults for reprocessing.
$Errors ++ unless (GetOptions(%OptionSpecifications,'<>'=>\&ProcessBackup));

# If we tried to shut a machine down and it didn't go, make sure it's
# still up.  We don't want to leave it down if it's supposed to be up,
# and just processed the shutdown late.
foreach (@RecoveryRestart) {
	if (!IsRunning($_)) {
		print "$_ is now down - restarting\n";
		if ($Options{test}) {
			print "    Test: starting $_\n";
		}
		else {
			$Machines{$_}->create();
		}
	}
}

#
# Wrap up.
#
if ($Errors) {
	warn "$Prog failed.\n";
} else {
	print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# ProcessBackup - Backup a VM
#
sub ProcessBackup {

	my $MachineName = shift;
	if ($MachineName eq '_ALL_') {				# Check for keyword
		foreach (sort(keys(%MachineNames))) {
			ProcessBackup($_);			# Process all.
		}
		return;
	}
	return if ($Options{"exclude-vm"}{$MachineName});	# Excluded
	if (! exists($MachineNames{$MachineName})) {		# Unknown
		warn "$MachineName is an invalid machine name -- skipped\n";
		$Errors++;
		return;
	}
	return if ($BackedUp{$MachineName});			# Already backed up.

	my $TestPrefix = ($Options{test}?'Test: ':'');

	print strftime("${TestPrefix}Backing up $MachineName at %Y-%m-%d %T\n",localtime());
	my $BackupErrors = 0;

	# Validate options.  These can change from backup to backup.
	if ($Options{output} and $Options{output} !~ m<^[a-zA-Z0-9_:.,%= *?/{}[\]-]+$>) {
		print STDERR "\tInvalid value \"$Options{output}\" for --output. Skipping backup\n";
		return 1;
	}
	if ($Options{cycles} and $Options{cycles} !~ /^[1-9]\d*$/) {
		print STDERR "\tInvalid value for --cycles. Skipping backup.\n";
		return 1;
	}
	if ($Options{timeout} !~ /^[1-9]\d*$/) {
		print STDERR "\tInvalid value for --timeout. Skipping backup.\n";
		return 1;
	}
	$Options{'after-state'} = lc($Options{'after-state'});

	# Capture the XML for later, and to determine if the machine exists.
	my @XML;
	eval "\@XML = `virsh dumpxml $MachineName`;";
	if ($@) {
		print STDERR "    Unable to dump XML for $MachineName: $@\n";
		$Errors++;
		return 8;
	}

	# Load and machine-specific configuration data.
	local %Options = %::Options;
	my $MachineConfig = $Config{uc("name=$MachineName")};
	if ($MachineConfig) {
		$Errors ++ unless (
			GetOptionsFromString($MachineConfig,%OptionSpecifications)
		);
	}
	print Dumper(\%Options) if ($Options{verbose} >=3);

	# Figure out our output file name.
	$Options{output} = "$Options{cd}/%C-%Y%m%d"
		unless $Options{output};
	my $Output = $Options{output};
	$Output =~ s/%C/$MachineName/g;
	my $BackupPattern = $Output;
	$Output = strftime($Output,localtime())
		if ($Output =~ /%[^p]/);
	$Output =~ s"/+$"";				# Remove trailing slashes.
	$Output .= ($Options{gzip}?'.tgz':'.tar');	# Add .tar/.tgz suffix.
	$Output =~ m"^(.*)/([^/]*)$";			# Split path from file name.
	my ($OutputDir,$OutputFile) = ($1, $2);
	if ($OutputDir =~ /[?*{}[\]]/) {
		# Contains wild cards.
		my $OutputDirTest = glob $OutputDir;
		$OutputDir = $OutputDirTest if ($OutputDirTest and -d $OutputDirTest);
		$Output = "$OutputDir/$OutputFile";
	}
	if ( ! -d $OutputDir and ! $Options{test}) {
		# OutputDir doesn't exist.
		if (! mkpath($OutputDir,,0600)) {
			print STDERR "Unable to create $OutputDir: $@\n";
			$Errors++;
			return 9;
		}
	}

	# Delete a prior version of our output file if present.  This would happen 
	# in case of a rerun on the same day.
	if (	    -f ($Output) 
		and (RunDangerousCmd(qq<rm -rf "$Output">) != 0)
	) {
		warn qq<Unable to delete prior "$Output": $@\n>;
		$BackupErrors++;
	}

	# Clean up old tmp files.  Clean up old backups if cycles=x specified.
	$BackupPattern =~ s"^.*/"";		# Remove leading path.
	$BackupPattern =~ s/%[ymdHMSgGI]/../g;	# Two digit patterns.
	$BackupPattern =~ s/%[Y]/..../g;	# Four digit patterns.
	$BackupPattern = "^$BackupPattern\.(tar|tgz)(\.tmp|\.bad)?\$";
	if (open(my $FHLS,"ls -t $OutputDir 2>/dev/null |")) {
        	my $Count=0;
        	while (<$FHLS>) {
			chomp;
			next unless (m<$BackupPattern>);
			if (/(.tmp|.bad)$/) {
				# Temporary or failed backup.  Just delete it.
				RunDangerousCmd(qq<rm "$OutputDir/$_">);
			}
			elsif ($Options{cycles} and m<$BackupPattern>) {
				# Valid backup and we're deleting old cycles.
                		$Count++;
                		RunDangerousCmd(qq<rm "$OutputDir/$_">) if ($Count >= $Options{cycles});
			}
        	}
        	close $FHLS;
        }
	else {
		warn "Unable to open ls command: $! -- old or temporary backups may not be deleted.\n";
	}

	# Load the backup index.  For future cycle management.
	my %FullBackupIndex;
	my $INDEXFH;
	my $IndexFile = "$OutputDir/$Prog.index";
	if (open($INDEXFH,'<',$IndexFile)) {
		my $Index = <$INDEXFH>;
		close $INDEXFH;
		%FullBackupIndex = %{decode_json($Index)};
	}
	elsif (-f $IndexFile) {
		warn "Unable to read $IndexFile: $!\n";
	};	# Else file doesn't exist, and we don't need to do anything.
	my %BackupIndex = %{$FullBackupIndex{$MachineName}} if (exists($FullBackupIndex{$MachineName}));
	
	# Remember if it's running.
	my $WasRunning=IsRunning($MachineName);

	# Disk image files may be scattered in multiple places around the system.
	# Try to back them up without their paths by using symbolic links.
	my $TmpDir = tempdir(CLEANUP => 1);

	# Write the XML to the temporary directory.
	my $XMLFile = "$TmpDir/0-$MachineName.xml"; # 0- sorts small file before big ones.
	my $XMLFH;
	if (open($XMLFH,'>',$XMLFile)) {
		print $XMLFH @XML;
		close $XMLFH;
	}
	else {
		warn "Unable to write to $XMLFH: $@\n";
		close $XMLFH;
		$BackupErrors++;
	}

	# Populate the temporary directory with symbolic links to the source files.
	my $FileCount = 0;
	LINE: foreach my $Line (@XML) {
		chomp $Line;
		next unless ($Line =~ /source file\s*=\s*'(.*?)'/i);
		my $SourcePath = $1;
		# Found a file.  Is it excluded?
		foreach my $Exclude (@{$Options{"exclude-file"}}) {
			next LINE if (fnmatch("$Exclude",$SourcePath));
		}
		# If we have an include list, exclude everything else.
		my $Match = 0;
		foreach my $Include (@{$Options{'include-file'}}) {
			if (fnmatch("$Include",$SourcePath)) {
				$Match++;
				last;
				}
		}
		next if (@{$Options{'include-file'}} and ! $Match);	# No match.
		$FileCount++;		# We have a file to back up.
		$SourcePath =~ m"^(.*)/(.*?)$";
		my($SourceDir,$SourceFile) = ($1,$2);

		# Place a symbolic link to it in our tmp directory.
		RunDangerousCmd(qq<ln -s "$SourcePath" "$TmpDir/$SourceFile">);
	}  
	if ($FileCount == 0) {
		warn "No $MachineName disks remain after include/exclude processing - backup skipped\n";
		$BackupErrors++;
		return $BackupErrors;
	}

	# If it's running, shut it down.
	if ( $WasRunning ) {
		# It's running.
		print "    ${TestPrefix}Shutting down $MachineName\n" if ($Options{verbose});
		my $Count = 2*$Options{timeout};	# Convert minutes -> 30 second cycles
		if ($Options{test}) {
			print "    Test: stopping $MachineName\n";
		}
		else {
			while (! $Options{test} and IsRunning($MachineName) and $Count > 0) {
				if ($Count % 2 == 0) {
					# Send shutdown once per minute.
					print "debug: Initiating shutdown\n";
					eval {$Machines{$MachineName}->shutdown();};
					print "debug: Finished shutdown request\n";
					if ($@) {
						warn "$MachineName shutdown generated $@\n";
						RunDangerousCmd("virsh list --all | grep '$MachineName'");
					}
				}
				$Count--;
				sleep 30;
			}
		}
	}
	else {
		print "    $MachineName is already down\n";
	}
	if ($WasRunning and (!IsRunning($MachineName))) {
		print "    $MachineName is down\n";		# Document that it is down.
	}
	elsif (IsRunning($MachineName) and (!$Options{test})) {
		print STDERR "    $MachineName failed to shutdown -- backup skipped\n";
		# Check on this one later, to make sure it's still up and
		# not just really slow shutting down.
		push @RecoveryRestart, $MachineName,
			if ($Options{'after-state'} =~ /^(same|up)$/);
		return 18;
	}

	# Run the backup.
	print "    ${TestPrefix}Starting backup\n" if ($Options{verbose});
	my $OutputTmp = "$Output.tmp";		# Create work file name.
	my $GzipOpt = ($Options{gzip}?'-z':'');
	my $Status = RunDangerousCmd(qq<tar -chf "$OutputTmp" -C "$TmpDir" $GzipOpt .>);
	if ( $Status != 0 ) {
		print STDERR "    Tar failed with status $Status\n";
		$Errors++;
		RunDangerousCmd(qq<rm "$OutputTmp">);
	}
	elsif ( RunDangerousCmd(qq<mv "$OutputTmp" "$Output">) == 0) {
		print strftime(
			 "    ${TestPrefix}Backup of $MachineName completed normally at %Y-%m-%d %H:%M:%S\n"
			, localtime()
		);
		$BackedUp{$MachineName} = 1;	# Don't do this one twice.
	}
	else {
		print STDERR "    Unable to rename $OutputTmp to $Output.\n";
		$BackupErrors++;
	}

	# Write the index back out.
	$BackupIndex{$Output} = (stat($Output))[9];
	%{$FullBackupIndex{$MachineName}}=%BackupIndex;
        if (! $Options{test}) {
		if (open($INDEXFH,'>',$IndexFile)) {
                	print $INDEXFH encode_json(\%FullBackupIndex) . "\n";
                	close $INDEXFH;
        	}
        	else {
              		 warn "Unable to write $IndexFile: $!\n";
        	}
	}

	# Set the machine in the desired after-state.
	$Options{'after-state'} = 'same'
		unless ($Options{'after-state'} =~ /^(up|down|same)$/);
	if ( $Options{'after-state'} eq 'up' 
		or ($Options{'after-state'} eq 'same' and $WasRunning)
	) {
		print strftime(
			  "    ${TestPrefix}Restarting $MachineName at %Y-%m-%d %T\n"
				,localtime())
			if ($Options{verbose});
		foreach ((1,2,3)) {
			if ($Options{test}) {
				print "    Test: starting $MachineName\n";
				last;
			}
			else {
				$Machines{$MachineName}->create();
				sleep 10;
			}
			last if (IsRunning($MachineName));
		}
		if (IsRunning($MachineName) or $Options{test}) {
			print strftime(
				"    ${TestPrefix}$MachineName started at %Y-%m-%d %T\n"
				,localtime())
				if ($Options{verbose});
		}
		else {
			print STDERR "    $MachineName failed to restart\n";
		}
	}
		return $BackupErrors;
}


#
# IsRunning - is a VM running?
#
sub IsRunning {
	my $Name = shift;
	my $Object = $Machines{$Name};
	my $Status = ($Object->get_info->{state} == Sys::Virt::Domain::STATE_SHUTOFF?0:1);
	return $Status;
}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($Options{test}) {
		print "    Test: $Cmd\n";
		return 0;
	} else {
		print "    Executing: $Cmd\n" if ($Options{verbose} > 1);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


#
# opt_Array - generic multi-value option processing
#
sub opt_Array {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the array.
		push @{$Options{$Name}},$Value;
	}
	else {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
	}
}


#
# opt_Hash - generic multi-value option processing
#
sub opt_Hash {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the hash.
		$Options{$Name}{$Value}=1;
	}
	else {
		# Received "--opt=".  Empty this array.
		%{$Options{$Name}}=();
	}
}


#
# opt_O - Load an option set.
#
sub opt_O {
	my(undef,$Value) = @_;
	$Value = uc($Value);
	if (exists($Config{$Value})) {
		$Errors ++ unless GetOptionsFromString(
			$Config{$Value},
			%OptionSpecifications,
			'<>' => sub{push @ARGV, shift;}		# Need to save any stray paramters.
		);
	}
	else {
		warn qq<Warning: "$Value" not found in configuration file\n>;
	}
}


#
# opt_h: Usage
#
sub opt_h {

	open (PAGENATER,"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - desc

Usage:  $Prog [options] [virtname...] [options] [virtname...] ...
	$Prog -h

Options:

	--cd=path:			Change directories: virtual machine folders
					will be stored in this path.  Defaults to
					/var/lib/libvirt/images.
	--cycles=n|-C n:		Cycles: keep n backups.
	--output="name":		Output: Where to write the output tar file.
					This may include % variables, which are 
					substituted as follows:
						%C - name of the virtual machine
						All others - as per strftime.
					Wildcards (?,*,[],{}) may be used, such as:
					   -o /media/{main,vault}?
					which matches /media/main? or /media/vault?.
					Note that ".tar" or ".tgz" is always appended to
					the output file name.
	--exclude-file=name:		Exclude: exclude image files named
					"name" from backups.  "name" is a fully
					qualified file name, possibly including
					conventional shell wildcards (escaped).
					Example:
						--exclude-file=/var/lib/libvirt/images/test.img
						--exclude-file=\*-swap.img
						--exclude-file='*-swap.img'
					May be repeated.  An error is generated if 
					no files are selected for backup.
	--include-file=name:		Include: same as exclude-file, except that only
					files that match one of the included names
					are backed up.  May be repeated.
	--exclude-vm=name:		Do not back up this virtual machine.
	--(no)gzip|-z:			Gzip the tar file.  Default is --nogzip.
	--always-mail=mailid|-m mailid:	Mail: Send an execution report to this
					e-mail address.

	--error-mail=mailid|-M mailid: 	Mail on error: Send an execution report
					to this e-mail address only if errors
					are detected.

	--after-state=(up|down|same):	Once the backup is complete, bring
					the machine up, leave it down, or
					return it to the same state it was
					in before the backup started (default).
	--always-page=mailid|-p mailid:	Page: Send a very brief message
					(suitable for a pager or text message)
					to this e-mail address when this job
					completes.

	--error-page=mailid|-P mailid:	Page on error: Send a very brief message
					to this e-mail address if errors are
					detected in this job.

	--timeout=min|-T min:		Timeout: How long in minutes should
					$Prog wait for this machine to
					shutdown.  Default is 5 minutes.

	--help|-h|-?:			Help: display this panel

	--(no)test|-t:			Test: echo commands instead of running
					them.

	--verbose|-v:			Verbose: echo commands before running
					them.  May be repeated to increase
					verbosity.  --test overrides --verbose.

					See "-s" above for unit specifications.

Parameters:
	virtname			One or more virtual machines names
					to backup.  The "_ALL_" keyword indicates
					that all virtual machines should be 
					backed up, and is the default.  Each
					virtual machine is only backed up
					once, even if listed multiple times
					or implied via _ALL_.

Example:

	$Prog --output=/backup/%C-%Y-%m-%d win7 ubuntu devsystem
	$Prog --output=/backup/%C-%Y-%m-%d win7 ubuntu _ALL_

In the second example, win7 and ubuntu are backed up first, followed by all
the remaining virtual machines.

Notes:
    1) CONFIGURATION FILE
       $Prog reads /usr/local/etc/$Prog.cfg if present for additional options.  
       Additional options may be specified in this file in three ways:
       a) A line beginning with "ALLJOBS: " (case-insensitive) is prepended
          to the comamnd line for all jobs.  For example:
		Alljobs: -m sysadmin\@example.com --gzip
       b) A line beginning with NAME=vmname: (case insensitive) will apply
          the following options to backups of the machine named "vmname".
          For example:
             Alljobs: --cycles=6
             name=devsys: --cycles=4
          would cause all backups to keep 6 cycles, except that backups of
          "devsys" would only keep 4 cycles.
       c) Additional option sets can be included by adding a line of the format
             OPTIONSET: options
          to the file, and then specifying to load that option set using -O on the
          command line.  For example:
             Alljobs: -m sysadmin\@example.com --cycles=6
             Offsites: --cycles=3
          In this example, most backups would keep 6 cycles, except those that
          include "-O offsites" on the command line.  Option set names are case
          insensitive.
     2) Options may be interspersed with virtual machine names.  Some options
	are only relevant to the entire job (e.g. mail notifications), and
	apply to the entire job regardless of where they appear in the command
	line.  Other options are processed in the order that they appear, and
	apply to all subsequent virtual machine names until changed.  These
	options are:
                after-state
                cd, -C
		exclude-file
		include-file
                gzip, -z
                test, -t
                timeout, -T
                verbose, -v
	Example:
		$Prog --timeout=1 vm1 --timeout=5 vm2 vm3 -m john\@example.com
	In the above example, vm1 will have a timeout value of 1 minute,
	vm2 and vm3 will have a timeout value of 5 minutes.  "john\@example.com"
	will receive an execution report of the entire backup job, because
	-m applies to an entire job regardless of position.

	When specified, the 
	

Bugs:

    1) The "--cycles" option creates a file name pattern to find prior backups.  
       This pattern has three limitations:

       a) When using % variables used by strftime to insert date/time information
          $Prog only knows how to make patterns for Y,y,m,d,H,M,S,G,g,I.  Backup files
          using other % specifications will not be deleted when they should.
       b) It's possible that non-backup files might match this pattern and be
          deleted.  For example, if your output specification is "--output=%H-%M"
          (hour, dash, minute), the pattern will be ??-??.tar.  If you have
          a file called "x9-y2.tar" in the output directory, it will match the
          pattern and be deleted when it is the oldest backup and too many cycles
          are present.  This can be avoided by using a dedicated output directory
          to hold backups.

    2) The full path names of the files are removed in the tar file.  This can lead
       to a conflict if a virtual machine uses two different image file in different
       directories, but with the same file name (e.g. /var/lib/libvirt/data.img
       and /usr/local/vm/data.img).

    3) name=host option specifications in the config file override conflicting command
       line options.

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
	10      :       Some delete's failed.
ENDUSAGE
close PAGENATER;
exit 1;
}
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
IGNORE	"^\s*$"
SHOW	"^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW    /^\s*\S+ ended normally with status 0 and signal 0 - run time:/
SHOW    /^\s*Test:/
SHOW    /^\s*Executing:/
SHOW    /^\s*Verbose:/
SHOW	/^\s*debug:/
SHOW	/^\s*$/
SHOW	"^\s*Backing up \S+ at \d\d\d\d-\d\d-\d\d \d+:\d\d:\d\d$"
SHOW	"^\s*Starting backup"
SHOW	"^\s*Shutting down \S+"
IGNORE	"^\s*Domain \S+ is being shutdown"
IGNORE	"^\s*Domain \S+ started$"
IGNORE	"^\s*\S+ is down$"
SHOW	"^\s*\S+ is already down$"
SHOW	"^\s*Restarting \S+ at \d\d\d\d-\d\d-\d\d \d+:\d\d:\d\d"
SHOW	"^\s*\S+ started at \d\d\d\d-\d\d-\d\d \d+:\d\d:\d\d"
SHOW	"^\s*Backup of \S+ ended normally at \d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$"
SHOW	"^\s*\S+ ended normally.$"
IGNORE	"^\s*mkdir /\S+$"
IGNORE	"^\s*tar: \.: file changed as we read it$"
IGNORE	"^\s*WARNING: gnome-keyring:: couldn't connect to:"
SHOW	"^\s*error: Requested operation is not valid: USB device \S* is in use"
SHOW	"^\s*error: failed to start domain \S+$"
SHOW	"^\s*Backup of \S+ completed normally at ....-..-.. ..:..:..$"
IGNORE	"^\s*error: Failed to shutdown domain \S+$"
IGNORE	"^\s*error: Unable to read from monitor: Connection reset by peer$"
# 
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
