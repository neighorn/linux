#!/usr/bin/perl

# Read and filter e-mail reports.  This is used to post-process e-mails from
# other utilities that don't provide filtering natively.

use strict;
use warnings;
use JobTools::LogOutput;
use JobTools::Utils qw(:Opt :Lock LoadConfigFiles);
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);
use MIME::Base64;
use Encode qw(decode);
use Encode::MIME::Header;

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg","$BaseDir/${Prog}.d/${Prog}.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.
our @FilterFiles;			# Map of patterns to filter files.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications;
%OptionSpecifications = (
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&OptArray,
		'error-mail|M=s'	=>	\&OptArray,
		'option-set|O=s'	=>	sub {OptOptionSet(name => $_[1], optspec => \%OptionSpecifications);},
		'always-page|p=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptArray,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
		'inputfile|input-file|i=s'	=>	sub {push @Parms,shift;},
		'copyfile=s'		=>	\&OptValue,
		'tty!'			=>	\&OptValue,
);
#

# Load the config file.
foreach (@ConfigFiles) {
	LoadConfigFiles($_);
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.

# Get the e-mail, so we can retrieve the From and Subject line
my @lines;
if (@Parms) {
	my $FH;
	open($FH,'<',$Parms[0]) || die "Unable to open " . $Parms[0] . ": $!\n";
	@lines = <$FH>;
	close $FH;
}
else {
	print "Reading from STDIN...\n" if (-t STDOUT);
	@lines = <STDIN>;
}

my $SendingHost='';
my $From='';
my $InputSubject='';
my $JobName;
foreach (@lines) {
	chomp;
	last if (/^\s*$/);		# Blank line means end of headers.
	$_ = decode('MIME-Header',$_);	# Handle MIME encoding.
	$SendingHost = $1 if (/^Received: from (\S+)/i);
	#$From = $_ if (/^From /i and ! $From);
	$InputSubject = $_ if (/^Subject: /i and ! $InputSubject);
	last if ($From and $InputSubject);	# Found all we wanted.
}
$InputSubject =~ s/^Subject:\s*//i;
$From =~ s/^From\s+//i;		# Strip prefix.
$From =~ s/\s.*$//;		# Strip any trailing data.
$From = getlogin() unless ($From !~ /^\s*$/);
($JobName = $InputSubject) =~ s/^\s*(\S+)\b.*$/$1/;
$JobName =~ s/[^a-zA-Z0-9:_-]//g;
$SendingHost = "(unknown host)" unless ($SendingHost);
$SendingHost = lc($SendingHost);
$SendingHost =~ s/\..*$//;	#Strip domain name.

# See if we can find a customized filter file.
my $filterfile;
print "Verbose: Looking for FilterFile specification in config files.\n" if ($Options{verbose} >= 2);
foreach (@FilterFiles) {
	my($regex,$file);
	($regex,$file) = @{$_};
	my $string="HOST:$SendingHost SUBJECT:$InputSubject";
	print qq(Verbose:\tComparing "$string"  to  "$regex"\n) if ($Options{verbose} >= 2);
	if ($string =~ $regex) {
		print "Verbose:\t\tFound match on $file\n" if ($Options{verbose} >= 2);
		push @{$Options{'filter-file'}},$file;
	}
}

# See if we can find a customized filter file.
print "Verbose: Check for default filter file names.\n" if ($Options{verbose} >= 2);
foreach my $dir ("/usr/local/etc/${Prog}.d","/usr/local/etc") {
	next unless (-d $dir);
	foreach my $name ("$JobName","$SendingHost.$JobName") {
		my $file = "$dir/$name.filter";
		print "Verbose:\tChecking for $file\n" if ($Options{verbose} >= 2);
		if (-r $file) {
			print "Verbose:\t\tFound match on $file\n" if ($Options{verbose} >= 2);
			push @{$Options{'filter-file'}},$file;
		}
	}
}

push @{$Options{'filter-file'}}, "/usr/local/etc/$Prog.d/$Prog.filter"
	if (-e "/usr/local/etc/$Prog.d/$Prog.filter");
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $OutputSubject = ($Options{subject}
	?$Options{subject}
	:"%* %m/%d $SendingHost $JobName %E %*%*%*"
);

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);

$Options{tty} = (-t STDOUT) unless (defined($Options{tty}));	# No tty if we're non-interactive and no --tty.
if (!$Options{tty}) {
	# We're not interactive.  Turn off STDOUT and STDERR, as it confuses the mail server
	# when called via /etc/aliases.
	close STDOUT;
	close STDERR;
	open(STDOUT,'>','/dev/null');
	open(STDERR,'>','/dev/null');
}

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $OutputSubject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
	CLEAN_UP		=> \&CleanUp,
});


# Open the copy file if requested.
my $COPYFILE;
if ($Options{'copy-file'}) {
	$Options{'copy-file'} =~ s/%U/$ENV{LOGNAME}/g;
	$Options{'copy-file'} = strftime($Options{'copy-file'},localtime());
	warn "Unable to open $Options{'copy-file'}: $!" 
		unless open($COPYFILE,'>',$Options{'copy-file'});
}

my $EndOfHeaders = 0;
my $UULine='';
foreach my $Line (@lines) {
	chomp $Line;
	if ($Line =~ /^[A-Za-z0-9=]+$/) {
		# UU-encoded line.  Collect this for later
		# decoding.
		$UULine .= $Line;
		next;
	}
	else {
		# Standard line.  First, decode any uuencoded text.
		if ($UULine) {
			PrintLine($EndOfHeaders,$COPYFILE,decode_base64($UULine));
			$UULine='';
		}
		# Now, print our current line.
		PrintLine($EndOfHeaders,$COPYFILE,$Line);
		$EndOfHeaders = 1 if ($Line =~ /^\s*$/);
	}
}
warn "No end-of-headers line found\n" unless $EndOfHeaders;
# Print any remaining, unprinted uu-encoded data.
PrintLine($EndOfHeaders,$COPYFILE,decode_base64($UULine))
	if ($UULine);

# Wrap up.

my $ExitCode;
if (! $Options{tty}) {
	$ExitCode = 0;	# Non-zero causes bounce back when used from /etc/aliases.
}
elsif ($Errors) {
	$ExitCode = 10;
}
else {
	$ExitCode= 0;
}

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit($ExitCode);


#
# Clean-up - make sure we have a zero return code so we don't mess with Postfix.
#
sub CleanUp {
	my $trash = $JobTools::LogOutput::ExitCode;	# Suppress perl "Only used once" message.
	$JobTools::LogOutput::ExitCode = 0;
}


#
# PrintLine: print out text.
#
sub PrintLine {
	my($EndOfHeaders,$COPYFILE,$Line) = @_;
	print $COPYFILE "$Line\n" if ($COPYFILE);
	print $Line . "\n"
		if ($EndOfHeaders or $Line =~ /^\s*Subject:/i);
}


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 filter-email - post-process e-mail reports

filter-email provides post-processing for e-mailed reports that don't provide native
filtering.

=head3 Usage:  

        filter-email [options] [input-file]

        filter-email -h

=head3 Flags:

        --error-mail|-M mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Append this filter file to 
				list of filter files.  See Filter Files
				below.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFiles[0]
                                into the command line at this point.
        --test|-t:              Test: echo commands instead of running them.
	--(no-)tty:		TTY: run with(out) STDOUT and STDERR.  This
				defaults to --tty when run in an interactive
				session, or --no-tty otherwise, such as
				when called from /etc/aliases.  This option
				is used primarily for testing.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel

=head3 Parameters:

        input-file:		Optional input file.  Typically filter-email
				reads its input from STDIN, but a specific
				file can be specified on the command line 
				to aid in testing.

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that filter-email may reference.  The syntax of the file is:

	name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *

Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *

Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *

Include: any value here is treated as another configuration file, which
is loaded immediately.

=item *

FilterFile: These records can be used to map incoming e-mails to associated
filter files.  (See FilterFiles below for details on the contents and purpose 
of filter files.)  Each FilterFile record uses the following format:

    FilterFile: filename regex

When an incoming e-mail is given to filter-email, it parses out the sending
host and the subject.  It uses these to construct a descriptor string of
the format:

    HOST:<hostname> SUBJECT:<subject>

For example:

    HOST:server305 SUBJECT:Backup Report

It then compares that descriptor string to the regex in each FilterFile 
record.  If it matches the regex, the associated filter file is loaded.
If more than one FilterFile record matches, subsequent filter
files are treated as continuations of the first one.  File names may use
an absolute path, or else are relative to /usr/local/etc/filter-email.d/.

=back

=head3 Filter files

Filter files are used for two purposes.  Most importantly, they tell 
filter-email whether the job reported in the incoming e-mail was
successful or not.  They do this by checking all the lines of text
in the e-mail against list of valid messages in the filter files.  If
any lines don't match, they are considered to be error messages.  Error
messages are flagged, and the job overall is reported to have errors.

A secondary purpose of filter-email is to summarize lengthy reports.
It does this by excluding some of the incoming lines from the outgoing
report, as specified in the filter file(s).

Most scripts that use this model have a standard internal list of filters.
filter-email however, may process multiple radically different e-mails,
and so requires more flexibility in determining which filter file(s)
to use.  The following two sections describe how filter-email determines
which filter files to use, and how filter files are constructed.

=head4 Which filter file(s) to use

Filter files may be selected in a variety of ways:

=over

=item *

The -F or --filter option may be used to specify a filter
file to use on all e-mails.  This can be specified on the command line
or via a configuration file.  This option is rarely used in this script,
as it is rare to have a single filter that applies to multiple e-mail
reports.

=item *

filter-email always loads the following filters, if present:

=over

=item *

/usr/local/filter-email.d/filter-email.filter

=item *

/usr/local/filter-email.d/<jobname>.filter

=item *

/usr/local/filter-email.d/<sending-host>.<jobname>.filter

=back

=item *

The configuration files may include "FilterFile" records.  If the regex
patterns on any of these records match the incoming e-mail, the associated filter file is
loaded.  See the FilterFile item in Configuration Files above for more
information on the format and processing of these records.

=back

=head4 What filter files contain

Each filter file contains a series of records
of the format:

    operation  regex

The operation is one of the following:

=over

=item *

SHOW	- messages matching this regex are normal messages that should
be displayed in the output report

=item *

IGNORE	- messages matching this regex are normal messages that should
not be displayed in the output report

=item *

LOGONLY - messages matching this regex are normal messages that should
be shown in the output report, but not on STDOUT.  For filter-email,
this is essentially the same as "SHOW", since in normal
use filter-file doesn't send anything to STDOUT.

=item *

Blank lines or lines beginning with # are ignored.

=back

Examples:

    SHOW	"^\s*Backup started at ..:..:..$"
    SHOW	/^\s*Backup successfully completed!$/
    IGNORE	"^\s*Backup is \d+% complete.$"

Note that filter files do not include messages indicating an error.
There is no limit to the possible error messages, so any message
that doesn't match a regex in one of the filter files is considered
to be an error message.

In the above example, we would see the "started" and "completed"
messages, but not all the "1% complete", "2% complete", ...
messages.  Also, we'd see any other messages such as
"Backup failed", and they'd be flagged as errors.

By using a proper selection of SHOW and IGNORE records, it is possible
to reduce a possibly lengthy report into a summary of important messages
plus any errors, and the errors are flagged.  E-mails with errors are
also flagged in the subject line of the output report when the default
subject line is used.

=head3 Notes

=over

=item *

Typically, filter-email is invoked out of /etc/aliases as shown in 
the following example:

    backup-report:	|/usr/local/sbin/filter-email

=item *

By default, filter-email only writes its output to the syslog, and,
if it's running in --tty mode, to STDOUT.  Typical usage involves 
including a -m or --always-mail option on the command line or 
via a configuration file, so that output reports are e-mailed to the
proper individual.

=back

=head3 Return codes:

        0       :       Normal termination - or always in --no-tty mode.
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
