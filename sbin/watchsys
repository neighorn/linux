#! /usr/bin/perl
use Getopt::Std;
use IO::Socket;
use Net::Ping;
use FindBin qw($RealBin $RealScript);
use POSIX qw(strftime);

my $LastPoll;

if ( (getlogin || getpwuid($<)) !~ 'root') {
	exec "sudo $RealBin/$RealScript " . join(' ',@ARGV);
	die "Unable to execute sudo: $!\n";
}

while (! $ARGV[0]) {
	print "Host name? ";
	$ARGV[0]=<STDIN>;
	chomp $ARGV[0];
	exit unless ($ARGV[0]);
}

getopts("p:qU:D:S:s:i:hv");

$opt_i=5 unless ($opt_i);		# Set default interval.
if ($opt_i !~ /\d+/) {
	print STDERR "Invalid time interval: $opt_i\n";
	exit 5;
}
$opt_p="139,22,23,80" unless ($opt_p);	# Set default port list.
(@Ports)=split(/\s*,\s*/,$opt_p);	# Convert into a list.
$PriorState="";				# Init prior state to force output.
$Count=0;				# Initialize number of dots so far.

if ($opt_h) {
	print "watchsys [-q] [-p port,port...] [-i sec] [-U cmd] [-D cmd] [-S cmd] [-s cmd] host\n";
	print "\n\t-q\t\t\tQuiet\n";
	print "\t-p port,port...\t\tPorts to monitor.  Default is 22,23,80\n";
	print "\t-i sec\t\t\tInterval in seconds.  Default is 5.\n";
	print "\t-U/-D/-S/-s cmd\t\tIssue cmd when system comes Up, Down, Services up, Services down\n";
	exit(4);
}
	
# Note: we use syswrite instead of printf after this, to avoid buffering
# issues in some platforms.

# Begin monitoring the host.
$State='';		# State unknown.
$Ping=Net::Ping->new("icmp");
for (;;) {
	$LastPoll=time();
	# See if it's up.
	if ($Ping->ping($ARGV[0])) {
		# Ping came back OK.  The interface is up, at least.
		$State="int";
		print "Verbose: ping successful\n" if ($opt_v);
	}
	else {
		print "Verbose: ping failed\n" if ($opt_v);
	}
	# See if any services are up.  Decoupled from ping.  Some don't ping.
	foreach $port (@Ports) {
		if ($socket=IO::Socket::INET->new(
			PeerHost=>$ARGV[0],
			PeerPort=>$port,
			Timeout=>5,
		)) {
	    		# Connected OK.
            		$State="up";
            		close($socket);
			print "Verbose: port $port is up\n" if ($opt_v);
	    		last;		# Don't need to do any further checking.
		}
		else {
			print "Verbose: port $port is down\n" if ($opt_v);
		}
	}
	$State = 'down' unless ($State);

	# Now that we know it's state, see if it has changed.
	if ($State ne $PriorState) {
		# State changed.  We need to report this.
		$CompoundState="$PriorState.$State";
		if ($State eq "down") {
			$Desc=" is down";
			system($opt_d) if ($opt_d);
		}
		elsif ($State eq "up") {
			$Desc=" is up";
			system($opt_U) if ($opt_U);
		}
		elsif ($CompoundState eq "up.int") {
			$Desc="'s services are down ";
			system($opt_s) if ($opt_s);
		}
		elsif ($CompoundState eq "down.int") {
			$Desc=" interfaces came up";
			system($opt_I) if ($opt_I);
		}
		elsif ($State eq "int") {
			$Desc=" services are down";
			system($opt_s) if ($opt_s);
		}
		if (! $opt_q) {
			syswrite STDOUT,strftime("\n%T ",localtime()) . "$ARGV[0]$Desc";
			syswrite STDOUT,"\n" if ($opt_v);
		}
		$PriorState=$State;
		sleep($opt_i);
		$Count=0;
	} else {
		# No change.  Print a ., or | instead every 5th time.
		if (! $opt_v) {
			$Count++;
			if (($Count % 5)) {
				syswrite(STDOUT,'.') unless ($opt_q);
			} else {
				syswrite(STDOUT,'|') unless ($opt_q);
			}
		}
		my $SleepInterval=$opt_i - (time() - $LastPoll);
		sleep($SleepInterval) unless ($SleepInterval <= 0);;
	}
}
