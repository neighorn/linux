#!/usr/bin/perl
#
# Run MySQL back-ups
#
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use Fcntl qw(:flock :mode :DEFAULT);
use File::Basename;
use FindBin qw($Bin $Script);
use LogOutput;
use JobTools::Utils qw(OptArray OptFlag OptValue LoadConfigFiles RunRemote RunDangerousCmd Commify CompressByteSize ExpandByteSize);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg");	# Name of config file(s).
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.
our $HostName=`hostname -s`;		# Get our host name.
chomp $HostName;
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_help,
		'host|H=s'	=>	\&opt_Value,
		'always-mail|m=s'	=>	\&OptArray,
		'error-mail|M=s'	=>	\&OptArray,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptValue,
		'log-file|l=s'		=>	\&OptValue,
		'test|t'		=>	\&OptValue,
		'cycles|r=s'		=>	\&Optcycles,
		'check'			=>	\&Optcycles,
		'min-size|s=s'		=>	\&opt_min_size,
		'max-size|S=s'		=>	\&opt_max_size,
		'output-directory|o=s'	=>	\&OptValue,
		'remote|R=s'		=>	sub { OptArray(@_,'allow-delete'=>1,'expand-config'=>1);},
		'username|user|U=s'	=>	\&OptValue,
		'gzip|z'		=>	\&OptValue,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
		'pmax=n'		=	\&OptValue,
);
#

# Load the config file.
LoadConfigFiles(files => \@ConfigFiles);

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
foreach (('ALLJOBS',"HOST=$HostName")) {
	my $ConfigName = uc($_);
	unshift @ARGV, quotewords(" ",0,$Config{$ConfigName})
		if (exists($Config{$ConfigName}) and defined($Config{$ConfigName}));
}

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);
$Options{'output-directory'}="/usr/local/backup/mysql" unless ($Options{'output-directory'});
$Options{cycles}=7 unless ($Options{cycles});
$Options{username}=$ENV{LOGNAME} || $ENV{USER} || getpwuid($<)
	unless ($Options{username}); # Default to our own user name.
$Options{host} = '' unless (exists($Options{host}) and $Options{host});

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $Subject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
});

if (exists($Options{'remote'})) {
	$Errors = RunRemote(argv => [$Prog,@ARGV]);
}
else {
	$Errors = RunLocally($Config{uc("host=$HostName")});
}

if ($Errors) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {
	# ---------------------------------------------------------
	#
	# Load any host-specific options
	#
	my $HostOptions = shift;
	if ($HostOptions) {
		my @Array = quotewords(" ",0,$HostOptions);
		die "Invalid options specified\n" unless (GetOptionsFromArray(\@Array,\%Options,%OptionSpecifications));
	}

	# ---------------------------------------------------------
	#
	# Check for conflicting jobs/Acquire the job lock
	#
	my $JobLockFile = "/var/run/$Prog.lock";
	my $JOBLOCKFH;
	if (!$Options{test} and !open($JOBLOCKFH,'>>',$JobLockFile)) {
	        print "Unable to create/open $JobLockFile: $!\n";
	        return 1;
	}
	if (!$Options{test} and !flock($JOBLOCKFH, LOCK_EX | LOCK_NB)) {
	        my @stat = stat($JobLockFile);
	        my $mdate = strftime("%Y-%m-%d",localtime($stat[8]));
	        $mdate = 'today' if ($mdate eq strftime("%Y-%m-%d",localtime(time())));
	        print "Skipped this job due to a conflicting job in progress per "
	                . qq<"$JobLockFile" dated $mdate at >
	                . strftime(
	                        "%H:%M:%S",
	                        localtime((stat($JobLockFile))[8]))
	                . "\n"
	                ;
	        return 1;
	}

	# ---------------------------------------------------------
	#
	# Run the back-ups
	#
	my $Errors = 0;
	@Parms = ('--all-databases') unless (@Parms+0);	# Assume all databases unless they gave us a list.
	foreach my $Database (@Parms) {
		$Errors += BackupDatabase($Database);
	}

	# ---------------------------------------------------------
	#
	# Run the check, if requested.
	#
        $Errors += RunDangerousCmd(
                  '/usr/bin/mysqlcheck '
                . '--all-databases '
                . ($Options{username}?"-u $Options{username} ":'')
                . ($Options{host}?"--host $Options{host} ":'')
        );


	# ---------------------------------------------------------
	#
	# Release the job lock.
	#
	if ($JOBLOCKFH) {
	        close $JOBLOCKFH;
	        unlink $JobLockFile;
	}
	return ($Errors>0?1:0);

}



#
# BackupDatabase
#
sub BackupDatabase {
	my $Database = shift;
	my $OutputPrefix = ($Options{host}?$Options{host} . '-':'');
	$OutputPrefix .= ($Database eq '--all-databases'?'':"$Database-");

	# Build the backup file name.
	my $DeletePattern;
	my $OutPath = $Options{'output-directory'};
	$OutPath .= "/$OutputPrefix%Y-%m-%d.sql" if (-d $OutPath);	# Add file name if this is a directory.
	$DeletePattern = basename($OutPath);		# Get the file name portion.
	$DeletePattern =~ s/%./\\S+/g;			# Convert substitution values to \S+.
	$DeletePattern = "^${DeletePattern}(.gz)?\$";	# Add anchors and optional .gz.
	$OutPath=strftime($OutPath,localtime());	# Interp time vars (ours and theirs).
	my $OutDir=dirname($OutPath);
	
	# Delete any incomplete backups.
	RunDangerousCmd("rm -f $OutDir/*.tmp 2> /dev/null");

	# Delete any old cycles.
	if (open(my $FHLS,"ls -t $OutDir 2> /dev/null |")) {
		my $Count=0;
		while (<$FHLS>) {
			chomp;
			next unless (-f "$OutDir/$_");		# Skip non-directories.
			next unless (/$DeletePattern/o);	# Skip different format file names.
			next unless (/^[a-zA-Z0-9._-]+$/);	# Skip funny file names to avoid surprise interpretations.
			$Count++;
			RunDangerousCmd(qq<rm -f "$OutDir/$_">) if ($Count >= $Options{cycles});
		}
		close $FHLS;
	} else {
		warn "Unable to open ls command: $!\n";
	}
	
	# Figure out our mysqldump version, for version-sensitive options.
	my $textversion = `mysqldump -V`;
	$textversion =~ s/^.* Distrib\s+([\d.]+).*/$1/;
	my $MSDVersion = '';
	foreach (split(/\./,$textversion)) {
		$MSDVersion .= sprintf('.%03d',$_);
	}
	$MSDVersion =~ s/^\.//;
	my $eventsopt = ($MSDVersion gt '005.001.018'?'--events':'');		# Introduced in 5.1.18.
	
	# Now back up all our databases.  Leave out --add-drop-database so that if we excerpt part of the code
	# to restore a table, we don't accidentally include code that drops some database.  Dropping databases
	# manually isn't very difficult or time-consuming.
	# Use a .tmp file and rename when we're done, so some separate process knows this file isn't complete.
	RunDangerousCmd(
		  "mysqldump -u $Options{username} --opt --add-drop-table --routines --events "
		. "--single-transaction --allow-keywords --quote-names $eventsopt "
		. ($Options{host}?"--host=$Options{host} ":'') 
		. qq<-r "$OutPath.tmp" >
		. $Database
	);
	if (-f "$OutPath.tmp" or $Options{test}) {
		RunDangerousCmd(qq<mv "$OutPath.tmp" "$OutPath">);	# Rename tmp file now that it's done.
		my $size =  ($Options{test}?999999:(stat($OutPath))[7]);
		printf "%15s bytes (%6s) written to %s\n",
			Commify($size), CompressSize($size), $OutPath;
		warn "Warning: backup is less than the minimum expected size ("
			. Commify($Options{'min-size'}) ." bytes)\n"
		    if ($Options{'min-size'} and $size < $Options{'min-size'} and ! $Options{test});
		warn "Warning: backup is more than the maximum expected size ("
			. Commify($Options{'max-size'}) . " bytes)\n"
		    if ($Options{'max-size'} and $size > $Options{'max-size'} and ! $Options{test});
		if ($Options{gzip}) {
		    RunDangerousCmd("rm $OutPath.gz") if (-e "$OutPath.gz");
		    RunDangerousCmd("gzip $OutPath")
		}
	}
	else {
		warn "Unable to locate output file $OutPath";
		return 1;
	}
	return 0;
}


#
# opt_O - Load an option set.
#
sub opt_O {
	my(undef,$Value) = @_;
	$Value = uc($Value);
	$Value =~ m/(:?)(\S+)/;	# See if it starts with a colon, meaning optional.
	my $Optional = $1;
	$Value = $2;
	if (exists($Config{$Value})) {
		$Errors ++ unless GetOptionsFromString(
			$Config{$Value},
			%OptionSpecifications,
			'<>' => sub{push @ARGV, shift;}         # Need to save any stray paramters.
		);
	}
	else {
		warn qq<Warning: "$Value" not found in configuration file\n> unless $Optional;
	}
}



#
# opt_help: Usage
#
sub opt_help {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}

=pod

=head1 $Prog - Back up mysql databases

=head3 Usage:  

	$Prog [options] [database...]
	$Prog [-h]

=head3 Flags:

        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
	--log-file|-l logfile:	LogFile: write log to "logfile, in addition to
				the syslog.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFile
                                into the command line at this point.
				A leading colon on "config" suppresses a 
				warning message if "config" is not found
				in the configuration file.  Several reserved
				names are defined, and will be used if defined:
				ALLJOBS: Prepended to all command lines - used
				  to set standard options (e.g. always-mail)
                                DEFAULTJOB: Used if no command line options or
                                  parameters are specified
                                HOST=hostname: Prepended to all command lines
                                  after ALLJOBS if the short host name of the
                                  host running the command matches "hostname".
                                  This allows a common config file to be used
                                  across multiple hosts with different option
                                  requirements
                                REMOTE=hostname: Prepended to all command lines
                                  if executed on hostname, but run via -R from
                                  another host.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel

	--output-directory|-o output:	Output: Save the output in this file/directory.
				If "output" is a directory, the default filename is
				yyyy-mm-dd.sql.  "Output" is processed by strftime,
				so % variables (a la `date`) are interpreted.
				Default value is /usr/local/backup/mysql/%Y-%m-%d.sql
				if no databases are specified, or
				/usr/local/backup/mysql/databasename-%Y-%m-%d.sql
				if individual databases are specified.
				* See Warning below. *
	--cycles|-r days:	Retention: delete old backups after "days" days.
				Default=7.
	--check			Check: Also run a database check
	--min-size|-s size:	Size: issue an error if the output is less than "size"
				bytes (before compression).
	--max-size|-S size:	Size: issue an error if the output is more than "size"
				bytes (before compression).
	--hostname|-H hostname:	Host name: host name of the host containing the database
				server.  Defaults to the local host.
	--username|-U username:	User: Log into the database as "username".  Defaults
				to current name.
	--gzip|z		Zip: gzip the output files when going to disk.
	--remote|R name		Remote: Don't run locally, but run on remote system
				"name" instead.  May be repeated, or name may be a
				comma-separated list to run on multple systems. 
				Include "localhost" or similar to run it both 
				locally and remotely.
	--pmax=n		Parallel max: set the maximum number of parallel
				jobs to run when using --remote with multiple
				remote hosts.


=head3 Parameters:

	databasename...:	Back up just the specified database(s) into individual
			files.  The default is to back up all databases into a single
			file.

=head3 Examples (where databaseX is the name of the specific database):
	mysql-backup -o /opt/mysql/backups
		- back up all databases to /opt/mysql/backups/databaseX-yyyy-mm-dd.sql
	mysql-backup -o /opt/mysql/backups database1 database2
		- back up two databases to /opt/mysql/backups/databaseX-yyyy-mm-dd.sql
	mysql-backup database1 database2 database3
		- back up three databases to /usr/local/backup/mysql/databaseX-yyyy-mm-dd.sql


=head3 Warning:

Execution of this script causes old files (per -r) in the output directory
		to be deleted.

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut


#
# Options{cycles}: handle retention period.
#
sub opt_cycles {
	my(undef,$Value) = @_;
	if ($Value =~ /^[1-9]\d*$/) {
		$Options{cycles} = $Value;
	}
	else {
		warn "Invalid cycle count (--cycles/-r) value: $Value\n";
		$Errors++;
	}
}


#
# opt_min_size - minimum size threshold
#
sub opt_min_size {
        my(undef,$Value) = @_;
	$Options{'min-size'} = ExpandSize($Value);
        if (!defined($Options{'min-size'})) {
                warn qq<Invalid minimum size (--min-size/-s) value: "$Value"\n>;
		$Errors++;
		$Options{'min-size'} = 0;
        }
}



#
# opt_max_size - max size threshold
#
sub opt_max_size {
        my(undef,$Value) = @_;
	$Options{'max-size'} = ExpandSize($Value);
        if (!defined($Options{'max-size'})) {
                warn qq<Invalid maximum size (-S) value: "$Value"\n>;
		$Errors++;
		$Options{'max-size'} = 0;
        }
}


__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:	Ignore - Don't display this message, it's not interesting.
#		LogOnly - Write this message to the syslog and log file, but
#			don't display it on STDOUT.
#		Show - Display this message, but it's not an error condition.
#		# - This is a comment, ignore it.
#
#  Pattern:	an ordinary perl pattern.  All patterns for a given score
#		are joined by logical OR conditions.
#
#  Notes:
#	1) The "Type" parameter may be specified in upper, lower, or mixed case.
#	2) All messages go to the syslog, regardless of this filter.
#
#
IGNORE	"^\s*(\S+:\s*)?\s*$"
IGNORE	"^\s*(\S+:\s*)?Deleting "
IGNORE	"^\s*(\S+:\s*)?Remote job exited with return code 0 and signal 0$"
IGNORE	"^\s*(\S+:\s+)?.*\s+OK$" 
IGNORE	"^\s*(\S+:\s+)?Error\s*: You can't use locks with log tables.$" 
IGNORE	"^\s*(\S+:\s+)?mysql.(slow|general)_log\s*$" 
IGNORE	"^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s*\S+ ended normally with status 0 and signal 0$"
IGNORE	"^\s*\S+:\s*\S+ ended on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s*Command: "
LOGONLY	"^\s*\S+ ended normally with status 0 and signal 0$"
LOGONLY	"^\s*\S+ ended on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY	"^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
SHOW	"^\s*(\S+:\s*)?[1-9][\d,]* bytes (\(.*\) )?written to \S+$"
SHOW	"^\s*(\S+:\s*)?debug:"i
SHOW	"^\s*(\S+:\s*)?Executing:"i
SHOW	"^\s*(\S+:\s*)?test:"i
SHOW	"^\s*(\S+:\s*)?Verbose:"i
SHOW	"^\s*Command: "
