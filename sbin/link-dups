#! /bin/bash
#
# quick code to replace duplicate files in dirvish trees with hardlinks.
#
# Assumes the same relative name.
#
# Usage: link-dups dir1 [dir2...] dirN
#	Links all duplicates in dir1 through dirN-1 to dirN

#
# LinkDups link one directory tree to another.
#
function LinkDups {
	CandidateTree=$1
	Target=$2

	if [[ ! -d $CandidateTree ]]
	then
		echo "Unable to find $CandidateTree or $CandidateTree is not a directory"
		return
	fi

	date "+%D %T Linking $CandidateTree to $Target"

	find $CandidateTree -type f -print |
		sort |
		while read candidate
		do
			((CheckCount=$CheckCount+1))
			trailing_name=${candidate#$CandidateTree}
			filename="$Target$trailing_name"
			if [[ -f "$filename" ]]
			then
				# Same file name in both trees.  Are they already linked?
				if [[ `stat -c %d-%i "$filename"` -eq `stat -c %d-%i "$candidate"` ]]
				then
					# Already linked.
					((AlreadyLinked=$AlreadyLinked+1))
				else
					# Not already linked.  Are they the same?
					filestat=`stat -c %d-%u-%g-%a-%s-%m "$filename"`
					candstat=`stat -c %d-%u-%g-%a-%s-%m "$candidate"`
					if [[ "$filestat" = "$candstat" ]]
					then
						# uid, gid, perms, size, mountpoint match.  Check content.
						cmp -s "$filename" "$candidate"
						if [[ $? -eq 0 ]]
						then
							size=`stat -c %a "$candidate"`
							if [[ $size -ge 512*1024 ]]
							then
								(( SavedM=$SavedM + ($size/1024/1024) +0.5 ))
							else
								(( Saved = $Saved + $size ))
							fi
							if [[ $Saved -ge 1024*1024 ]]
							then
								(( SavedM=$SavedM + 1 ))
								(( Saved = $Saved - (1024*1024) ))
							fi
							[[ $Verbose -eq 1 ]] && echo "Linking \"$candidate\" to \"$filename\""
							ln -f "$candidate" "$filename"
							((MatchCount=MatchCount+1))
						fi
					fi
				fi
			fi
			if [[ ( $CheckCount = *00 ) && ( $Verbose || ( $TTYStat -eq 0 ) ) ]]
			then
				printf "\r  $CheckCount files checked; $MatchCount new matches; $AlreadyLinked already linked, ${SavedM}MB saved\r" > /dev/tty
			fi
			echo "  $CandidateTree->$Target complete: $CheckCount files checked; $MatchCount new matches; $AlreadyLinked already linked, ${SavedM}MB saved"
		done |
		tail -1
}


#
# Mainline code
#

if [[ $1 = "-v" ]]
then
	export Verbose=1
	shift
else
	export Verbose=0
fi

if [[ $# -lt 2 ]]
then
	echo "usage: $0 dir1 ... dirN"
	exit 8
fi


Target=${!#}		# Get the last argument.
if [[ ! -d $Target ]]
then
	echo "Unable to find $Target or $Target is not a directory"
	exit 9
fi

tty -s
TTYStat=$?

# Initialize counters.
((CheckCount=0))
((MatchCount=0))
((AlreadyLinked=0))
((Saved=0))
((SavedM=0))

export CheckCount MatchCount AlreadyLinked Saved SavedM

# Loop through all the arguments except the last.
for CandidateTree in ${@:1:$#-1}
do
	LinkDups "$CandidateTree" "$Target"
done
exit 0

