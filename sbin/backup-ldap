#!/usr/bin/perl
#
# =====Description====
#
use LogOutput;
use ProcessOptions;
use Text::ParseWords;

# Initialize variables.
our $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
our @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;			# No errors so far.
my $Syslog='user';			# Name of Syslog facility.  '' for none.
my $LogFile="";			# Name of the log file.
my $ConfigFile="/usr/local/etc/${Prog}.cfg";     # Name of config file.
our @opt_x;
our $opt_o;			# Name of our output file.
our $opt_C=5;			# Number of cycles to keep.

$HostName =~ s/\..*$//;		# Strip domain.
$BaseDir="/usr/local/backup/ldap";	# Set our base directory.
#

chdir "/usr/local/sbin" || die "Unable to change directories to /usr/local/sbin: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
$OptSpec='C=s o=s h t m=l e=l O=s p=l P=l x=l t v';

# ---------------------------------------------------------
#
# Load the config file.
#
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($ErrorFlag) {exit $ErrorFlag;}      # Exit if errors were detected.
	
# Set up our logging and output filtering.
LogOutput({
	SYSLOG_FACILITY => $Syslog,
	MAIL_FILE => $LogFile,
	ALWAYS_MAIL_LIST => $opt_m,
	ERROR_MAIL_LIST => $opt_e,
	ALWAYS_PAGE_LIST => $opt_p,
	ERROR_PAGE_LIST => $opt_P,
});

# Verify the command line.
die("Excess parameters on the command line.  See \"$Prog -h\" for usage.")
	if ($Parms);
die("Invalid number \"$opt_C\" for -C.  See \"$Prog -h\" for usage.")
	unless ($opt_C =~ /^\s*\d+\s*$/);

# ---------------------------------------------------------
#
# Identify the output file.
#
my $OutputFile;
if ($opt_o) {
	$OutputFile = $opt_o;
}
else {
	$OutputFile=`date +$BaseDir/%m-%d.ldif`;
}
chomp $OutputFile;

RunDangerousCmd("mkdir -p --mode=750 $BaseDir") unless (-e $BaseDir);
RunDangerousCmd("chgrp sys $BaseDir") &&
	die "Unable to set group for $BaseDir: $!\n";
if (! $opt_t) {
	chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";
}


# ---------------------------------------------------------
#
# Keep the most recent $opt_C back-ups.
#
if (open($FHLS,"ls -dt $BaseDir/[01][0-9]-[0-3][0-9].ldif |")) {
        my $Count=0;
	while (<$FHLS>) {
		$Count++;
                RunDangerousCmd("rm -rf $_") if ($Count > $opt_C);
	}
	close $FHLS;
} else {
	warn "Unable to open ls command: $!\n";
}

# ---------------------------------------------------------
#
# Run back-up.
#
my $Status = RunDangerousCmd("slapcat -l $OutputFile");
if ($Status) {
	warn "slapcat failed with status $Status\n";
	$Errors++;
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

# ---------------------------------------------------------
#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


# ---------------------------------------------------------
#
# opt_h: Usage
#
sub opt_h {

	open (PAGENATER,"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - Back-up key file-systems

Usage:  $Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] [-D output-dir] [-x mountpoint] [-C cycle-count]
	$Prog -h

Flags:
	-C cycle-count:	Cycles: Keep "cycle-count" cycles.  Default is 5.
	-D output-dir:	Write to "output-dir".  Default is:
			/usr/local/backup/`hostname`/mm-dd
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-h      :       Help: display this panel
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-x mountpoint: 	eXclude: exclude this mount point.  May be repeated.

Parameters:
	(none)

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
ENDUSAGE
close PAGENATER;
exit 1;
}
__END__
#
# ---------------------------------------------------------
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE	/^tar: .* socket ignored$/
IGNORE	"^tar: Removing leading `/' from member names$"
IGNORE	"^tar: /var/lib/mysql/maia/maia_mail.MYD: file changed as we read it$"
IGNORE	"^tar: Error exit delayed from previous errors$"
IGNORE	"^\s*512 bytes \(512 B\) copied, \d+.\d+ seconds, \d+\.\d+ [kmgKMG]B$"
IGNORE	"^\s*512 bytes \(512 B\) copied, \d+.\d+(e-\d+)? s, \d+\.\d+ [kmgKMG]B/s"
IGNORE	"^\s*recovery-info started on \S+ on"
IGNORE  /^\s*$/
IGNORE	"ls: cannot access /usr/local/backup/ldap/[01][0-9]-[0-3][0-9].ldif: No such file or directory$"
IGNORE	"bdb_monitor_db_open: monitoring disabled; configure monitor database to enable"
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \d+/\d+/\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    /^\s*Job ended normally with status 0 and signal 0$/
SHOW    /^\s*Test:/
SHOW    /^\s*Executing:/
SHOW	/^\s*debug:/
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
