#!/usr/bin/perl
#
# Back up the databases
#
use LogOutput;
use ProcessOptions;
use Text::ParseWords;

# Set up the environment.
$ENV{'PATH'}='/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/sbin';

# Initialize variables.
$Prog=$0;			# Get our name, for messages.
$Prog=~s/^.*\///;		# Trim off the path, if present.
@Args=@ARGV;			# Preserve orig command for ref.
$ErrorFlag=0;			# No errors so far.
$Syslog='user';			# Name of Syslog facility.  '' for no logging.
$LogFile='';			# Log file name, or null for none.
$BaseDir=glob("~mysql/bin");	# Set our base directory.
$ConfigFile="$BaseDir/${Prog}.cfg";	# Name of config file.
$BackupDir="/usr/local/backup/database";
$SQLUser="mysql";		# Database login to use. PW in ~/.my.cnf

# Set our base directory.
chdir($BaseDir) || die "Unable to cd to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#	1) We define a new type l (lowercase L), which is a list (i.e. if
#	   specified multiple times, values are concatenated & blank separated.o
#	   Normal =s and =i would replace values instead of concatenate.
#	2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
$OptSpec='d h t v z m=l e=l p=l P=l O=s';

# Load the config file.
if (-e $ConfigFile) {
        open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
        # Build a hash of settings found in the config file.
        while (<CONFIG>) {
                next if (/^\s*#/);      # Comment.
                next if (/^\s*$/);      # Blank line.
                ($name,$settings)=/^\s*(\S+)\s*:\s*(.+)/;
                $name=~tr/[a-z]/[A-Z]/;
                $Config{$name}=$settings;
        }
	close CONFIG;
}

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
(@ARGV)=split(/\s+/,$Parms);

if ($ErrorFlag) {exit $ErrorFlag;}	# Exit if errors were detected.
	
# Set up our logging and output filtering.
system("echo Config{ALLJOBS}=" . $Config{ALLJOBS} . ", opt_m=$opt_m | ir -lt $Prog.debug");
$LogOutput::Mail{From}='mysql@stlukeproductions.com';
LogOutput('',$Syslog,$LogFile,$opt_m,$opt_e,$opt_p,$opt_P);

# Next, delete any back-ups over 7 days old.  Presumably the nightly backups
# or at least the weekly back-ups have captured them.
RunDangerousCmd("find $BackupDir -type f -mtime +7 -exec echo Deleting {} \\; -exec rm {} \\;");

# Now back up all our databases.
$BackupFile=$BackupDir . "/" . `date +%Y-%m-%d.sql`;
chomp $BackupFile;
RunDangerousCmd("mysqldump -u $SQLUser --opt --all-databases --allow-keywords --quote-names -r $BackupFile");
RunDangerousCmd("compress $BackupFile") if ($opt_z);

exit(0);


#
# RunDangerousCmd - run a command, unless we're testing.
#	Note: Returns status code, in which 0 (false) commonly means OK.
#
sub RunDangerousCmd {

	my($Command)=@_;		# Get our calling arguments.
	my($FH);			# Autovivified file handle.

	if ($opt_t) {
		print "test: $Command\n";
		return 0;
	} else {
		print "Executing: $Command\n" if ($opt_v);
		if (open($FH, "$Command 2>&1 |")) {
			while (<$FH>) {print;};
			close $FH;
		} else {
			($CmdName = $Command) =~ s/^\s*(\S+)/$1/;
			warn "$CmdName failed to start with status $?: $!\n";
		}
		return $?;
	}
}



#
# Untaint  -- use very carefully!
#

sub untaint {
        local(@parms) = @_;
        foreach (@parms) {
                s/^(.*)$/$1/;
                $_=$1;
        }
        if (@parms == 1) {
                # Return scalar
                return $parms[$[];
        } else {
                # Return list
                return (@parms);
        }
}



#
# opt_h: Usage
#
sub opt_h {

	open (PAGENATER,$ENV{'PAGER'}?"| $ENV{'PAGER'}":"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - Data Base Back-Up routine

Usage:	$Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-v] [-t]
	$Prog [-h]

Flags:
	-e mailid:	Error: Send an execution report to this e-mail address
			if errors are detected.
	-h	:	Help: display this panel
	-m mailid:	Mailid: Send an execution report to this e-mail address.
	-O config:	Insert the "config" configuration options from
			$ConfigFile into
			the command line at this point.
	-p mailid:	Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:	Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-t:		Test: don't really run commands, just display them.
	-v: 		Verbose: display each command before executing it.
	-z		Zip: gzip the output files when going to disk.

Examples:

Return codes:
	0	:	Normal termination
	1	:	Help panel displayed.
	2	:	Invalid or unrecognized command line options.
	3	:	Invalid or unrecognized command line option value.
	4	:	Incorrect command line parameters.
	5	:	Unexpected message found in output.
ENDUSAGE
close PAGENATER;
exit 1;
}

#
# opt_x: handle exclude list.
#
sub opt_x {
	my($Directory)=@_;
	$Exclude{$Directory}=1;
}

#
# Clean-up routine.
#
sub Cleanup {
}
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:	Ignore - Don't display this message, it's not interesting.
#		LogOnly - Write this message to the syslog and log file, but
#			don't display it on STDOUT.
#		Show - Display this message, but it's not an error condition.
#		# - This is a comment, ignore it.
#
#  Pattern:	an ordinary perl pattern.  All patterns for a given score
#		are joined by logical OR conditions.
#
#  Notes:
#	1) The "Type" parameter may be specified in upper, lower, or mixed case.
#	2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE	/^\s*$/
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY	"^\S+ started on \S+ on \d+/\d+/\d+"
LOGONLY	/^Command: /
#
# These are normal messages that we want to see.
#
SHOW	/^Job ended normally with status 0 and signal 0$/
SHOW	/^debug:/
SHOW	/^test:/
SHOW	/^Executing:/
SHOW	"^\s*Deleting /usr/local/backup/database/"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
