#! /usr/bin/perl

use strict;
no strict 'refs';
use warnings;
use Getopt::Long qw(:config bundling no_auto_abbrev gnu_compat no_ignore_case);
use Sys::Syslog;
use IO::Select;
use IO::Socket;
use File::Temp qw(tempfile);
use POSIX qw(strftime :sys_wait_h);
use Fcntl;
use FindBin qw($Bin $Script);
use Text::ParseWords;
use Time::Local;

my $HIGHLIGHT = "\e[33;40;1m";	# Yellow FG, Black BG, Bright.
my $RESET = "\e[0m";

# Set a path, particularly for OnOK/OnFail actions.
$ENV{PATH}="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$ENV{PATH}";

our %Options = (		# Command line options.
	help => 0,
	verbose => 0,
	test => 0,
	quiet => 0,
	renotify => 120,
	subject => '',
	single => 0,
	waittime => 20,
	maxwaittime => 60,
	ignoretimes => 0,
);
our $Prog = $Script;		# Get our program name.
$Prog=~s/\.pl$|\.bat$//;       	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off path, if present.
my @ItemList;			# List of item objects to check.
my @NowFail;			# Newly failing items.
my @NowOK;			# Newly OK items.
my @StillFail;			# On-going fail items.
my %FailItems;			# List of items previously failing.
my @Pending;			# List of items pending failure.
my @OtherItems;			# Stuff in the status file from other check lists.
my @ConfigFiles = (		# List of configuration files.
	'/usr/local/etc/checkall.cfg',
	"$ENV{HOME}/.checkallrc",
);

$| = 1;				# Unbuffer output.
our $StartTime = time();

my $StatusFile="$ENV{HOME}/.$Prog.dat";
my $ServiceList="/usr/local/etc/$Prog.list";

our $HostName = `hostname`;
chomp $HostName;

# Load the config file.
my %Config;
foreach my $FileName (@ConfigFiles) {
#	my @Data = ReadFile($FileName);
	foreach (ReadFile($FileName)) {
		next unless ($_);	# Sparse array has blank entries.
                my ($name,$settings)=/^\s*(\S+):\s*(.+)/;
		$settings = '' unless ($settings);	# Suppress undef errors.
                $name=~tr/[a-z]/[A-Z]/;
                if ($Config{$name}) {
			$Config{$name}=$Config{$name} . ' ' . $settings;
		}
		else {
			$Config{$name}=$settings;
		}
        }
}

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

GetOptions (
	'v|verbose+'	=> \$Options{verbose},
	'c|config=s'	=> \$Options{config},
	'a|all'		=> sub {$Options{failed} = 0;},	# Synonym for --nofail
	'fail|failed!'	=> \$Options{failed},
	'h|help'	=> \$Options{help},
	'L|libdir=s'	=> sub{ unshift @INC, glob($_[1]); },
	't|test'	=> \$Options{test},
	'q|quiet'	=> \$Options{quiet},
	'P|page=s'	=> \@{$Options{page}},
	'R|renotify=i'	=> \$Options{renotify},
	's|subject=s'	=> \$Options{subject},
	'S|single!'	=> \$Options{single},
	'w|waittime=i'	=> \$Options{waittime},
	'maxwaittime=i'	=> \$Options{maxwaittime},
	'ignoretimes|ignore-times!'	=> \$Options{ignoretimes},
	'force|f'	=> \$Options{force},
);

eval "use CheckAll::CheckItem;"; # Do this late, to benefit from -L.

# Check options.
if ($Options{help}) {
	system("pod2text $Bin/$Script");
	exit 1;
}

# Allow scheduled checks to be disable during maintenance and such, unless -f/--force.
if ($Config{DISABLEUNTIL} and not $Options{force}) {
        if ($Config{DISABLEUNTIL} =~ m"^(\d\d\d\d)[/-](\d\d?)[/-](\d\d?)(?:\s+(\d\d?):(\d\d?)(?::(\d\d+))?)?") {
                my($AYear,$AMonth,$ADay,$AHour,$AMinute,$ASecond) = ($1,$2,$3,$4,$5,$6);
                $AHour = 8 unless (defined($AHour));
                $AMinute = 0 unless (defined($AMinute));
                $ASecond = 0 unless (defined($ASecond));
                my $ADate = timelocal($ASecond,$AMinute,$AHour,$ADay,$AMonth-1,$AYear);
                if (time() < $ADate) {
                        printf "Checks disabled until %d/%.2d/%.2d %d:%.2d:%.2d per config file. Use --force or -f to force execution.\n",
                                $AYear,$AMonth,$ADay,$AHour,$AMinute,$ASecond;
                        exit 0;
                }
        }
        else {
              print "Invalid DisableUntil date specified in config file: $Config{DISABLEUNTIL} -- ignored.\n";
        }
}


openlog("$Prog");


my $FailMessages;
if ($Options{quiet}) {
	# Prepare the Fail-Message header text.
	my($Minutes,$Hours)=(localtime())[1,2];
	$Minutes="0$Minutes" if ($Minutes <= 9);
	$FailMessages="The following services have failed at 
$Hours:$Minutes...";
}

my $errors=0;
my %PIDs;		# Map PID to @ItemList.
my %NameMap;		# Maps status names to @ItemList.
my $IOList;		# IO::Select item, to be used if needed.

# Prepare the list of files to process.
foreach (@ARGV) {
	# Add a path and file name prefix to unqualified names.
	s"^"/usr/local/etc/$Prog." unless (m"/");
}
push @ARGV,$Options{config} if ($Options{config});	# Use Options{config} for files in other locations.
push @ARGV,$ServiceList unless (@ARGV+0 > 0);	# Use default if nothing else.
foreach (@ARGV) {
	LoadServiceList($_,\@ItemList,\%NameMap);	# Load this file.
}

if (@ItemList+0 == 0) {
	# Nothing to monitor.
	warn 'No services found in ' . join(', ',@ARGV) . ' to monitor.';
	push @NowFail,"No services found to monitor";
}

# Load any prior statuses.
LoadPriorStatuses($StatusFile, \%NameMap, \@OtherItems);

# Go check all these services.
my $Services = @ItemList + 0;
my $DescLen = 0;		# Will keep length of longest desc here.
foreach my $Item (@ItemList) {
	print "Checking $Item->{FILE}:$Item->{LINE}: $Item->{Desc}\n"
		if ($Options{verbose});
	my $CheckResult = Check $Item;
	my ($Type,$Value);
	if (ref($CheckResult) eq 'ARRAY') {
		$Type=$CheckResult->[0];
	}
	else {
		($Type,$Value) = ($CheckResult =~ m/^(\S+)=(\S+)$/);
	}
	
	if ($Type eq 'Status') {		# 5.8 doesn't have switch.
		# This one returned a status immediately.
		$Item->Status($Value);
		$Services--;			# Not waiting on this one.
	}
	elsif ($Type eq 'FHList') {
		# This one is running in the background, and the answer will come via pipe.
		my($pid,$FH) = @{$CheckResult}[1..2];
		if (!$IOList) {
			# First one.  Create the IO::Select item.
			$IOList = IO::Select->new() || die "Unable to create IO::Select item";
		}
		$PIDs{$pid} = $Item;
		$IOList->add($FH) || warn "Handle add failed: $!";
	}
	else	{
		# Somebody sent back a response we don't understand.
		die qq[Unexpected response "$CheckResult" from $Item->{'Desc'}];
	}

	# Track the length of our longest description for formatting purposes, but ignore headings.
	if (ref $Item ne 'heading') {
		my $Len = length($Item->{Desc});
		$DescLen = $Len if ($DescLen < $Len);
	}
	
}

# All background processes submitted.  Wait for the results to come in.
my($pid,$status,$detail);
`tty -s`;	# Find out if we have a tty.
my $no_tty = $?;
if ($Services) {
	my $Status = eval {
		local $SIG{ALRM} = sub{ die "alarm\n" };
		alarm $Options{maxwaittime};
		
		# Wait for any PIDs that return status detail via pipes.
		my @Ready;
		while ($IOList and @Ready = $IOList->can_read($Options{waittime})) {
			foreach my $FH (@Ready) {
				($pid,$status,$detail) = split('/',<$FH>,3);
				$IOList->remove($FH);
				close $FH;
				print "Verbose: $pid responded with status $status and detail $detail\n"
					if ($Options{verbose});
				$PIDs{$pid}->Status($status);
				$PIDs{$pid}->StatusDetail($detail);
				$PIDs{$pid}->PIDComplete(1);
			}
		}
		alarm 0;
		# Wipe out waiting message.
		#print ' 'x40 . "\r" unless ($no_tty or $Options{quiet});
		return 0;
	};
	if ($@) {
		my $Signal = $@;
		chomp $Signal;
		print "Verbose: signal $Signal received\n" if ($Options{verbose});
		die "Received unexpected signal $Signal while waiting for processes to complete"
			unless $Signal eq 'alarm';
		# Timed out.
		foreach my $pid (keys(%PIDs)) {
			if (! $PIDs{$pid}->PIDComplete) {
				$PIDs{$pid}->Status(8);		# Failing.

				$PIDs{$pid}->StatusDetail('timed out');
				kill 'KILL', $pid;
			}
		}
	}
}

# All results are in.  Run back through our report and list the results.
my $Errors = 0;
my $WorstError = 0;		# Set to 4 for delayed notification, 8 for full failure.
my $Renotify = 0;		# Set to 1 if no changes but some service is due for renotification.
$DescLen += 2;			# Add two blanks for padding.
my $Now = time();		# Avoid repeated calls.
foreach my $Item (@ItemList) {
	# Call report to issue visible status, and count failures.
	my $Desc = $Item->Desc;
	my $LongDesc;
	if ($Item->{StatusDetail}) {
		$LongDesc = "$Desc (" . $Item->{StatusDetail} . ")";
	}
	else {
		$LongDesc = $Desc;
	}
	my $Status = $Item->Report($DescLen,$Options{failed},$StartTime);
	my $DoDownActions = 0;
	if ($Status == 0 or $Status == 4) {
		#
		# CHECK_STILL_OK -- Item is still up.
		# CHECK_NOT_TESTED -- Not tested due to TOD restrictions.
		#
	}	
	elsif ($Status == 1) {
		#
		# CHECK_STILL_DOWN -- Item is still down.
		#
		$Errors++;
		if ($Now >= $Item->NextNotification) {
			$Renotify++;
			$WorstError = 8;
			$Item->NextNotification(
				$Now +
				60*(defined($Item->Renotifyinterval)?$Item->Renotifyinterval:$Options{renotify})
			);
			if ($Item->FirstNotification == 0) {
				# This was a Delayfirstnotification target, that has remained down through the delay period.
				# Essentially, it's a firstfail as far as notifications are concerned.
				$DoDownActions = 1;
				$Item->FirstNotification($Now);
			}
			elsif ($Options{renotify}) {
				# We sent out notifications before, but it's time for another one.
				push @StillFail, $LongDesc;
			}
		}
		else {
			# Still down, but not due for notification.
			push @StillFail, $LongDesc;
		}
		if ($Item->FirstNotification == 0) {
			# We have a service down with a delay notification that hasn't notified yet.
			$WorstError = 4 if ($WorstError < 4);
		}
		else {
			# A service is down.
			$WorstError = 8;
		}
	}
	elsif ($Status == 2) {
		#
		# CHECK_NOW_OK -- Item is back up.
		#
		next if ($Item->FirstNotification == 0);	# Recovered within Delayfirstnotification period.
		push @NowOK, $Desc;
		if (my $Action = $Item->Onok) {
			if ($Options{test}) {
				print "\t\tTesting: OnOK for $Desc suppressed.\n";
			}
			else {
				print "Triggering OnOK for $Desc\n" if ($Options{verbose});
				$Action =~ s/%D/$Desc/g;
				system("($Action)&");
				my $Status = $?;
				syslog(($Status?'WARNING':'INFO'),'%s',"Executed OnOK actions for $Desc.  Status $Status.")
					if ($^O !~ /MSWin/);
			}
		}
	}
	elsif ($Status == 3) {
		#
		# CHECK_NOW_DOWN -- Item has gone down.
		#
		$Errors++;
		
		# Delay errors on first notification if Delayfirstnotification time specified.
		#
		#syslog('WARNING','%s', "$Desc is NOW FAILING")
		#	if ($^O !~ /MSWin/);
		$DoDownActions = 1;
		$Item->FirstNotification($Now);
		$WorstError = 8;
	}
	elsif ($Status == 5) {
		#
		# CHECK_PENDING
		#
		# Delaying notifications.
		push @Pending, $Desc;
		$WorstError = 4 if ($WorstError == 0);
		next;
	}
	else {
		die "$Item->{FILE}:$Item->{LINE} Unexpected status $Status returned.";
	}

	# Common code for "Now Down and no delay notification" or "Still down and delay time expired"
	if ($DoDownActions) {
		push @NowFail, $LongDesc;
		if (my $Action = $Item->Onfail) {
			if ($Options{test}) {
				print "\t\tTesting: OnFail action for $Desc suppressed.\n";
			}
			else {
				print "Triggering OnFail for $Desc\n" if ($Options{verbose});
				$Action =~ s/%D/$Desc/g;
				system("($Action)&");
				my $Status = $?;
				syslog(($Status?'WARNING':'INFO'),'%s',"Executed OnFail actions for $Desc.  Status $Status.")
					if ($^O !~ /MSWin/);
			}
		}
		$Item->NextNotification(
			$Now +
				60*(defined($Item->Renotifyinterval)?$Item->Renotifyinterval:$Options{renotify})
		);
	}
}

if (@NowFail+@NowOK+$Renotify > 0 and @{$Options{page}} > 0 and ! $Options{test}) {
	# Set up the e-mail subject.
	my $TotalDown = @NowFail + @StillFail;
	my $PendingCount = (0 + @Pending);
	my $Status;
	if ($TotalDown) {
		$Status =
			  "$TotalDown service" . ($TotalDown > 1?'s':'') . " down" 
			. ($PendingCount > 0?", $PendingCount pending":'')
			;
	}
	elsif (@NowOK) {
		$Status = 
			  'All services restored'
			. ($PendingCount > 0?' or pending':'')
			;
	}
	else {
		$Status = 'All services up';		# Never was down (shouldn't happen).
	}
	$Options{subject} = '%C alert: %S' unless ($Options{subject});
	$Options{subject} =~ s/%C/$HostName/g;
	$Options{subject} =~ s/%N/$TotalDown/g;
	$Options{subject} =~ s/%S/$Status/g;

	# Build the e-mail text.	
	my($MAIL,$MailFile) = tempfile();
	my $ToList=join(', ',@{$Options{page}});
	print $MAIL <<ENDHeaders;
X-Jobsummary: Name=checkall Status=8 RunTime=0:0:0:20
To: $ToList
Subject: $Options{subject}

ENDHeaders
	
	if (@NowFail) {
		print $MAIL "Now failing: " . join(', ',@NowFail) . "\n";
	}
	if (@StillFail) {
		print $MAIL "Still failing: " . join(', ',@StillFail) . "\n";
	}
	if (@Pending) {
		print $MAIL "Pending failures: " . join(', ',@Pending) . "\n";
	}
	if (@NowOK) {
		print $MAIL "Now OK: " . join(', ',@NowOK) . "\n";
	}

	# Send the e-mail.
	printf $MAIL strftime("\nFrom $HostName at %T on %D\n",localtime());
	close $MAIL;
	if (my $Status = system("sed 's/  */ /g' $MailFile | sendmail " . join(' ',@{$Options{page}}))) {
		syslog('ERROR','%s','Unable to send notifications. RC=$Status, Error=$!')
			if ($^O !~ /MSWin/);
	}
	else {
		syslog('INFO','%s','Notifications sent.') if ($^O !~ /MSWin/);
	}
	unlink $MailFile;
}

# Write the status file, so we know "still failing" from "now failing".
WriteStatusFile($StartTime,$StatusFile,\@ItemList,\@OtherItems) unless ($Options{test});

if ($Errors > 0) {
	printf "%s==> %d " . ($Errors == 1?'service is':'services are') . " failing.%s\n",
		$HIGHLIGHT, $Errors, $RESET
		unless ($Options{quiet});
	exit $WorstError;
}
else {
	my $text = "All services are OK" . (@Pending > 0?" or pending":'') . ".\n";
	print $text unless ($Options{quiet});
	syslog('INFO',$text)
		if ($^O !~ /MSWin/);
	exit 0;
}




#
# LoadServiceList - load a list of services.
#
sub LoadServiceList {
	my($FileName,$ArrayRef,$MapRef,@Vars) = @_;
	# Prepare @Vars.
	my %Vars;
	foreach (@Vars) {
		my($Var,$Value) = split('=',$_,2);
		$Value =~ s/^(['"])(.*)\1$/$2/; # Strip quotes.
		$Vars{$Var}=$Value;
	}
	my @Data = ReadFile($FileName);
	print "Processing $FileName ($#Data items found)...\n"
		if ($Options{verbose});
	foreach my $Index (0..$#Data) {
		ProcessServiceLine($FileName, $Index, $ArrayRef, $MapRef, $Data[$Index], %Vars);	
	}
}



#
# ProcessServiceLine : process one logical line from a service file.
#
sub ProcessServiceLine {
	my($FileName, $StartLine, $ArrayRef, $MapRef, $Line, %Vars) = @_;
	return if (!defined($Line) or $Line =~ /^\s*$/);		# Skip empty lines.
	print "	Processing line $StartLine: $Line\n" if ($Options{verbose} >= 3);

	my($Keyword,$Rest) = split('\s+',$Line,2);
	$Keyword = lc($Keyword);				# Ignore case.
	
	# Substitute variables
	foreach my $Name (keys(%Vars)) {
		$Rest=~s/$Name/$Vars{$Name}/g;
	}

	# Is there an "ifhost" prefix to this test?
        #  ifhost and ifcmd need quote processing on the second argument only.
	if ($Keyword eq 'ifhost') {
		# Ifhost /pattern/ selection statement.
		my $HostPattern;
		# Split the pattern off of the rest of the line.
		($HostPattern,$Rest) = split('\s+',$Rest,2);
		# Return nothing if we don't match.
		eval "('$HostName' =~ $HostPattern);";
		my $Match = $?;
		# Report any pattern errors.
		if ($@) {
			warn qq"$FileName:$StartLine: Unable to evaluate $HostPattern: $@\n";
			return 0;
		}
		if ($Match) {
			# Now process the rest of the line normally.
			return ProcessServiceLine($FileName, $StartLine, $ArrayRef, $MapRef, $Rest);
		}
		else {
			return 0;  # Not for this host.
		}
	}

	# Is there an "ifcmd" prefix to this test.
	if ($Keyword eq 'ifcmd') {
		# Ifcmd "cmd" selection statement.
		my($Command, $Negate);
		# Split the pattern off of the rest of the line.
		($Command,$Rest) = split(/\s+/,$Rest,2);
		$Command =~ s/^(["'])(.*)\1$/$2/;	# Strip quotes.
		if ($Command =~ /^!(.*)$/) {
			$Negate = 1;
			$Command =~ $1;
		}
		else {
			$Negate = 0;
		}
		# Run command.
		my $Status = (system($Command) ne 0);
		if ($Status eq $Negate) {
			return ProcessServiceLine($FileName, $StartLine, $ArrayRef, $MapRef, $Rest);
		}
		else {
			return 0;  # Not for this host.
		}
	}
		
	if ($Keyword eq 'include') {
		# Include file.
		my @Vars = parse_line('\s+',0,$Rest);
		my $FileName = shift(@Vars);
		$FileName =~ s/^(["'])(.*)\1$/$2/;	# Strip quotes.
		LoadServiceList($FileName,$ArrayRef,$MapRef,@Vars);
		return 0;
	}

	# Must be a check type.  Load it if it isn't already loaded.
	if (!exists($INC{"CheckAll/$Keyword.pm"})) {
		eval qq[require "CheckAll/$Keyword.pm"];
		if ($@) {
			warn qq[$FileName:$StartLine: Unable to include a "$Keyword" module: $@\n\@INC = ] 
				. join("\n\t",@INC) . "\n";
			return 1;
		}
	}

	# Create this object and put it in @ItemList.
	my $Item;
	eval {
		$Item = $Keyword->new (
			"$FileName",	# For object error msgs.
			"$StartLine",	# For object error msgs.
			$Rest);		# Other parameters.
	};
	if ($@) {
		warn qq[$FileName:$StartLine: Unable to create a "$Keyword" item: $@\n];
		return 2;	
	}
	else {
		# Interpret variables in Desc.
		if ($Item->{Desc} =~ /%C/) {
			if ($Item->{Host} and $Item->{Host} ne 'localhost') {
				$Item->{Desc} =~ s/%C/$Item->{Host}/g;
			}
			else {
				$Item->{Desc} =~ s/%C/$HostName/g;
			}
		}
		# Set the unique name if it isn't already set.
		$Item->Name(ref($Item) . "=" . ($Item->Host?$Item->Host:'localhost') . "=" . ($Item->Target?$Item->Target:'no-target')) unless (defined($Item->Name) and $Item->Name);

		# Map the name to this item.
		$MapRef->{$Item->Name} = $Item;
		push @$ArrayRef,$Item;
		return 0;
	}
}



sub LoadPriorStatuses {

	my($StatusFile,$MapRef,$OtherRef) = @_;

	# Load table of items that have already been reported failing.
	my $STATUS;
	if (-f $StatusFile) {
		if (sysopen($STATUS,$StatusFile,O_RDONLY)) {
			# Load up any items that were previously failing.
			while (<$STATUS>) {
				next unless
					(/^Name=(.*), FailAt=(\d+)=\S+ \S+, FirstNotify=(\d+)=\S+ \S+, NextNotify=(\d+)=\S+ \S+, LastCheck=(\d+)=\S+ \S+,?/);
				my($Name,$FirstFail,$FirstNotify,$NextNotify,$LastCheck)=($1,$2,$3,$4,$5);
				if(exists($MapRef->{$Name})) {
					$MapRef->{$Name}->{FirstFail} = $FirstFail;
					$MapRef->{$Name}->{FirstNotification} = $FirstNotify;
					$MapRef->{$Name}->{NextNotification} = $NextNotify;
					$MapRef->{$Name}->{PriorStatus} = 8;	# Must be down or it wouldn't be listed here.
				}
				elsif ((time()-$LastCheck)/86400 <= 60) {
					# Not one of ours.  Must come from another config file.  Just 
					# store it to write back later.
					push @$OtherRef,$_;
				}
				else {
					# Nobody has checked this one for 60 days.  Forget it.
				}
			}
			close $STATUS;
		}
		else {
			warn "Unable to open $StatusFile: $!\n";
		}
	}
}




sub WriteStatusFile {

	my($StartTime,$StatusFile,$ArrayRef,$OtherRef) = @_;
	my $STATUS;
	if (open ($STATUS,"> $StatusFile")) {
		foreach my $Item (@$ArrayRef) {
			next if ($Item->Status == 0 or $Item->Status == 4);	# Skip OK services.
			next if (ref $Item eq 'history');	# We don't track history lines.
			$Item->{FirstNotification} = 0 unless ($Item->FirstNotification);
			printf $STATUS "Name=%s, FailAt=%d=%s, FirstNotify=%d=%s, NextNotify=%d=%s, LastCheck=%d=%s, File=%s:%d\n",
				$Item->Name,
				$Item->FirstFail,
				strftime("%D %T",localtime($Item->FirstFail)),
				$Item->FirstNotification,
				strftime("%D %T",localtime($Item->FirstNotification)),
				$Item->NextNotification,
				strftime("%D %T",localtime($Item->NextNotification)),
				$StartTime,
				strftime("%D %T",localtime($StartTime)),
				$Item->{FILE},
				$Item->{LINE}
			;
		}
		# Write out stuff we found in the status file that weren't ours.
		foreach (@$OtherRef) {
			print $STATUS $_;
		}
		close $STATUS;
	}
	else {
		warn("Unable to update $StatusFile: $!\n");
	}
}


sub ReadFile {

	my $FileName = shift;
	my @Data;
	my $FH;
	
	return @Data unless (-f $FileName);	# File doesn't exist.  Return empty array.

	# Go process the file.
	if (sysopen($FH,$FileName,O_RDONLY)) {
		# Read the file, joining multi-line entries into one.
		my $LineInProgress = '';
		my $CompleteLine = '';
		my $StartLine;
		my $LineNum = 0;
		while (<$FH>) {
			$LineNum++;
			next if (/^\s*#/);			# Skip comments.
			next if (/^\s*$/);			# Skip blank lines.
			chomp;
			s/\s+$//;				# Strip trailing blanks.

			# Is this a continuation line (starts with white space)?
			if (/^\s+/) {
				# Yes.  Append it to any prior data.
				s/^\s+//;
				$LineInProgress .= " $_";	# Append to prior data.
			}
			else {
				# This is the beginning of a new line.  Store the old line if we have one.
				$Data[$StartLine] = $LineInProgress if ($LineInProgress);
				$LineInProgress = $_;
				$StartLine = $LineNum;
			}
		}
		# Process the last line if we have one.
		$Data[$StartLine] = $LineInProgress if ($LineInProgress);
		close $FH;
	}
	else {
		warn "Unable to open $FileName: $!";
	}
	
	return @Data;
}
=pod

=head1 checkall -- check on services

=head2 Overview

checkall checks critical services to make sure they're running.  It can optionally 
take action when a service fails or recovers, and/or send out notifications.

=head2 Command format:

   checkall [options] [listname ...]
   
=head2 Statuses:

Services can be determined to be in one of the following statuses:

=over 3

=item *

Up - this service is up

=item *

Now down - this service has just been detected as down

=item *

Still down - this service has been previously detected as down and is still down

=item *

Now up - this service has just been detected as having come back up

=item *

Pending - this service appears to be down, however we've been told to delay
down notifications for a period of time and that period hasn't expired yet.

=item *

Not tested - this service is only tested during specific times (e.g workdays)
and it is currently outside of those time constraints.  May be overridden
with "--ignoretimes".

=back

=head2 Return codes:

=over 3

=item 0 -

All services are up.

=item 4 -

Some services are down, but none have reached their "DelayNotification" delay yet,
so no alerts have gone out.

=item 8 -

One or more services are down.  Alerts have gone out if requested.

=back

=head2 Command options:

=over 3

=item -c file

Service file -- normally the service to monitor are determined by reading files
from /usr/local/etc/checkall.list (default) or /usr/local/etc/checkall.I<listname>
if one or more list names are provided on the command line.  The -c option provides an
alternate way of identifying a service file, when the desired file isn't named according
to the "listname" standard (i.e. isn't located in /usr/local/etc).

=item --fail, --failed

Fail -- only list failing items.

=item --force, -f

Force -- ignore "DISABLEDUNTIL" specification in config file.


=item --all, --nofail, --nofailed

All -- override prior --fail/--failed.  This is used primarily on the command
line to override a --fail or --failed in the .cfg file.

=item -h, --help

Help -- print this documentation

=item -L path, --libdir=path

Lib -- add this path when looking for Perl modules to include.

=item -P address, --page=address

Page -- send a message to this e-mail address whenever services transition from OK
to failing or vice versa, or if enough time has elapsed to warrant renotification.
This option may be repeated to send e-mails to multiple addresses.

=item -q, --quiet

Quiet -- suppress status messages.

=item -R minutes, --renotify=minutes

Renotify -- send out another page if a service has been failing for this many minutes
since the last page.  Default is 120 (2 hours).

=item -s subject, --subject=subject

Subject -- use this subject line when sending out pages.  The following substitutions 
are made:
	"%C" is replaced with the host Computer name.
	"%N" is replaced with the Number of services down.
	"%S" is replaced with an English status phrase (e.g. "All services restored").

=item -S, --single

Single -- run tests one at a time rather than in parallel.  This is primarily
used as a diagnostic aid.

=item -t, --test

Test -- run normal checks, but suppress any OnOK or OnFail actions, and don't
send out any e-mail alerts.

=item -v, --verbose

Verbose -- turn on diagnostics.


=item --maxwaittime=seconds

Max Wait Time -- overall time all background processes have to complete
before they're killed.  Killed checks will have show detailed status of 'timed out'.

=item -w seconds, --waittime=seconds

Wait Time -- Wait up to "seconds" seconds for individual checks to complete.  Some checks
(primarily network checks) support time-out values.  Other checks ignore this value.

The effective value for any given check is the larger of this value or a waittime value specified in the check definition.  The default value is 20 seconds.

=item --ignoretimes

This causes checkall to ignore any time constraints when checking services.

=back

=head2 Configuration File

Options may also be specified in an optional configuration file named /usr/local/etc/checkall.cfg.
The generic format is:

key: value...

"key" must start in column one.

Lines beginning with white space are continuation lines.

"key" is case insensitive.  Values may or may not be case insensitive depending on their application.

Blank lines and lines beginning with # are ignored.

For example:

  # Following are prepended to all command line parameters
  Alljobs: -L /usr/mcsi-linux/lib/perl5/site-perl
           --waittime=30
           --failed


Recognized configuration keys are:

=over 3

=item Alljobs

The Alljobs values are prepended to the command line.  This eliminates the need to 
type locally standard options each time.

=item DisableUntil

This key provides a date and optionally a time in yyyy-mm-dd hh:mm:ss format.  If this key
exists, checkall skips all checks and exits with a normal return code until the specified
date and time (or midnight if no time is specified).  A message is displayed on STDOUT
stating that checkall has been disabled.  DisableUntil may be overridden using
the -f or --force command line option.

This item is primarily used to suppress checks during a known outage or downtime.

=back

=head2 Service List Files

checkall determines what services to monitor by using service list files.  The default
service list is "/usr/local/etc/checkall.list".  Alternate or additional lists can be
saved as "/usr/local/etc/checkall.I<name>", where "name" matches the name specified on the
command line (e.g. /usr/local/etc/checkall.urgent would be referenced by "checkall urgent").
Service lists that don't follow this naming convention can be specified using the -c option.

Service list files are formatted according to the following rules:

=over 3

=item *

Blank lines and lines starting with # are ignored

=item *

Lines beginning with white space are treated as continuation lines.

=item *

A service list file may include another service list file using the "include" directive as follows:

   include path-to-file [var=value ...]

if var=value pairs are specified, the included file will have all occurrances of "var" replaced
with "value", allowing a single file to be included multiple times with different values.  For
example:

  checkall.list contains:
	include /usr/local/etc/checkall.checkserver %HOST=ben %FUNCTION="web server"
	include /usr/local/etc/checkall.checkserver %HOST=sandy %FUNCTION="mail server"

  checkall.checkserver contains:
        heading %HOST: %FUNCTION
	tcpport  Target=%HOST:22 Desc="%HOST %FUNCTION ssh port"

=item *

All other lines designate services to check.  The general format of a service line is:

   checktype parameters

"checktype" refers to a Perl check module called "CheckAll::I<checktype>".  This module will be 
loaded if necessary, and passed the parameters provided.  Most modules require at least a
Target= parameter and a Desc= parameter.  See the documentation in CheckAll::CheckItem for common
parameters, and other modules in the CheckAll:: tree for kinds of checks and specific parameters.

The most common checks are "tcpport", which checks for connectivity to a TCP socket, and "process", which
checks the process table for a running process.  "heading" is also used to insert headings.

=back

=cut

