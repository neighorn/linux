#!/usr/bin/perl
#
# run-linux: run a command on multiple Linux systems.
#
use strict;
use warnings;
use LogOutput;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling require_order);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);
use JobTools::Utils qw(:Opt LoadConfigFiles RunRemote RunDangerousCmd);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
my %OptionSpecifications;
%OptionSpecifications=(
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&OptArray,
		'error-mail|M=s'	=>	\&OptArray,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'config-file=s'		=>	sub {LoadConfigFile($_[1]);},
		'filter-file|F=s'	=>	\&OptValue,
		'remote|R=s'		=>	\&OptArray,
		'remote-max=n'		=>	\&OptValue,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
LoadConfigFiles(@ConfigFiles);

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
#@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.
	
my $RunDate=`date +%m/%d`;
chomp $RunDate;
$Options{verbose} = 0 unless (exists($Options{verbose}));

push @{$Options{'remote'}}, 'SERVERS' unless (exists($Options{'remote'}));
my @HostList;
foreach (@{$Options{'remote'}}) {
	if (exists($Config{uc($_)})) {
		# This is a name from the config file.  Push it's list.
		push @HostList, split(/\s+/,$Config{uc($_)});
	}
	else {
		push @HostList, $_;
	}
}
	
die "No command specified on command line\n" unless (@ARGV > 0);
die "No servers specified in config file\n" unless (@HostList);
$Options{'remote-max'} = 1 unless $Options{'remote-max'};

my %RemoteArgs = (
	argv		=> \@ARGV,
	childpost	=> sub{return $_{exitcode};},
);
$RemoteArgs{childpre} =		# Add header if we're running them serially.
	sub{my %Parms=@_;printf("%s %-*s %s\n",'-'x20,$Parms{maxhostlength},$Parms{host},'-'x20);}
		if ($Options{'remote-max'} ==1);
$Errors = RunRemote(%RemoteArgs);

if ($Errors) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 $Prog - run a command on multiple Linux systems using ssh.

=head3 Usage:  
        $Prog [-R host[,host...]] [flags] command

        $Prog -h

=head3 Flags:
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFiles[0]
                                into the command line at this point.
	--remote|-R host	Remote: Send this command to "host".  If 
				host matches a label in a configuration file,
				the list associated with that label will be
				used.  Otherwise, "host" will be assumed to
				be a real host name and used.  The default
				host is "Servers", which should appear in 
				a configuration file.  Host names preceeded
				by ! are excluded.  This is primarily used
				to include a list of hosts by list name,
				but then subtract individual hosts.
	--remote-max:		Max parallel tasks: maximum number of parallel
				tasks to run at once.  Default is 1.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel
	--pause:		Pause: pause after each host and wait for
				the user to press ENTER.
	--delay=sec		Delay: Pause sec seconds after each run.
	--tty:			TTY: Allocate a pseudo-TTY by using the
				-t option on the ssh command.

=head3 Parameters:
        (none)

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that $Prog may reference.  The syntax of the file is:

	name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#               Everything else is flagged as an error.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given type
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
LOGONLY	"^\s*\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY	"^\s*Command: "
IGNORE	"^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE	"^\s*Job ended normally with status 0 and signal 0 - run time:"
IGNORE	"^\s*\S+:\s+Remote job ended at \d\d:\d\d:\d\d, return code =   0, signal =   0, run time ="
SHOW	"^\s*Test:"
SHOW	"^\s*Executing:"
SHOW	"^\s*Verbose:"
SHOW	"^\s*debug:"
SHOW	"^\s*-+ \S+ complete.  Press ENTER to continue:"
SHOW	"^\s*$"
