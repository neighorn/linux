#!/usr/bin/perl
#
# Run apt-get upgrade and optionally reboot.
#
use strict;
use warnings;
use JobTools::LogOutput;
use Getopt::Long qw(GetOptionsFromArray GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use Fcntl qw(:flock :mode :DEFAULT);
use File::Basename;
use JobTools::Utils qw(:Opt LoadConfigFiles RunRemote RunDangerousCmd);

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
my $JobLockFile;		# Name of our lock file.
my $JOBLOCKFH;			# Lock file handle.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
my %OptionSpecifications;
%OptionSpecifications=(
		'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
		'always-mail|m=s'	=>	\&OptArray,
		'always-page|p=s'	=>	\&OptArray,
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'error-mail|M=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptArray,
		'help|h|?!'		=>	\&opt_h,
		'option-set|O=s'	=>	sub {OptOptionSet(name => $_[1],optspec => \%OptionSpecifications);},
		'remote|R=s'		=>	sub { OptArray(@_,'allow-delete'=>1,'expand-config'=>1);},
		'reboot'		=>	\&OptValue,
		'subject=s'		=>	\&OptValue,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
);
#
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.
# ---------------------------------------------------------
#
# Load the config file.
#
LoadConfigFiles(files => \@ConfigFiles);

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file host defaults and general defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(			# Initialize Options.
	verbose => 0,
	);
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	MAIL_SUBJECT => $Options{subject},
	SYSLOG_FACILITY => 'user',
	VERBOSE => ($Options{verbose} >= 5? $Options{verbose}-4:0),
	FILTER_FILE => $Options{'filter-file'},
});

# Verify the command line.
die('Excess parameters on the command line: "' . join(' ',@Parms) . "\" See \"$Prog -h\" for usage.")
	if (@Parms);

if (exists($Options{remote}) and @{$Options{remote}} > 0) {
	push @ARGV,split(/\s+/,'-F SHOWALL --always-mail= --subject= --remote= -O :remote=%HOST%');
	$Errors = RunRemote(argv => [$Prog,@ARGV]);
}
else {
	$Errors = RunLocally($Config{uc("host=$HostName")});
}

# ---------------------------------------------------------
#
# Release the job lock.
#
if ($JOBLOCKFH) {
        close $JOBLOCKFH;
        unlink $JobLockFile;
}


if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {
	# ---------------------------------------------------------
	#
	# Load any host-specific options
	#
	my $HostOptions = shift;
	if ($HostOptions) {
		my @Array = quotewords(" ",0,$HostOptions);
		die "Invalid options specified\n" unless (GetOptionsFromArray(\@Array,\%Options,%OptionSpecifications));
	}

	#
	# Check for conflicting jobs.
	#
	$JobLockFile = "/var/run/$Prog.lock";
	if (!$Options{test} and !open($JOBLOCKFH,'>>',$JobLockFile)) {
	        print "Unable to create/open $JobLockFile: $!\n";
	        exit 11;
	}
	if (!$Options{test} and !flock($JOBLOCKFH, LOCK_EX | LOCK_NB)) {
	        my @stat = stat($JobLockFile);
	        my $mdate = strftime("%Y-%m-%d",localtime($stat[8]));
	        $mdate = 'today' if ($mdate eq strftime("%Y-%m-%d",localtime(time())));
	        print "Skipped this job due to a conflicting job in progress per "
	                . qq<"$JobLockFile" dated $mdate at >
	                . strftime(
	                        "%H:%M:%S",
	                        localtime((stat($JobLockFile))[8]))
	                . "\n"
	                ;
	        exit 11;
	}

	RunDangerousCmd("apt-get autoremove -y");
	RunDangerousCmd("apt-get update");
	RunDangerousCmd("DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -qq");
	if ($Options{reboot}) {
		my $pid = fork();
		die "Cannot fork shutdown process: $!\n" unless defined($pid);
		if ($pid == 0) {
			# Child process.
			my $Cmd = 'shutdown -r +1';
			if ($Options{test}) {
				print "Test: $Cmd\n";
				exit(0);
			}
			else {
				close STDOUT;
				close STDERR;
				exec("$Cmd")
			}
		}
		else {
			print strftime("Shutdown scheduled for %H:%M:%S\n",localtime(time()+60));
		}
	}
	return 0;
}


# ---------------------------------------------------------
#
# opt_h: Usage
#
sub opt_h {

	use FindBin qw($Bin $Script);

	system(qq<pod2text $Bin/$Script | more>);
exit 1;
}

=pod

=head1 %Prog -   automatically install updates in Ubuntu

=head3 Usage:  
        %Prog [flag1 ...]

        %Prog -h

=head3 Options:
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-mail|-M mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFile
                                into the command line at this point.
				A leading colon on "config" suppresses a 
				warning message if "config" is not found
				in the configuration file.  Several reserved
				names are defined, and will be used if defined:
				ALLJOBS: Prepended to all command lines - used
				  to set standard options (e.g. always-mail)
                                DEFAULTJOB: Used if no command line options or
                                  parameters are specified
                                HOST=hostname: Prepended to all command lines
                                  after ALLJOBS if the short host name of the
                                  host running the command matches "hostname".
                                  This allows a common config file to be used
                                  across multiple hosts with different option
                                  requirements
                                REMOTE=hostname: Prepended to all command lines
                                  if executed on hostname, but run via -R from
                                  another host.
	--remote|-R host	Remote: Run this on one or more remote
				hosts.  "host" may be a host name, an
				IP address, a configuration file entry
				name, or a comma or space separated list of
				any mix of these.  This option may also be
				repeated to append to the list.  Host names
				preceeded by ! are removed from the list.
				This is primarily to allow a configuration
				file list to be included, but some of the
				hosts in the list to subsequently be excluded.
        --reboot		Reboot: reboot after installing updates.  This
                                also schedules an "apt-get autoremove" after
				the reboot.
        --subject:		Subject: Set the e-mail subject line.  Default
				is "%* %m/%d %C %N %E %*%*%*" (month/day,
				computer name, program name, error status,
				conditionally prefixed and suffixed with
				asterisks if errors were detected).
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
				May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel

=head3 Parameters:
        (none)

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that $Prog may reference.  The syntax of the file is:

        name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Host=name: any values here are processed only when the machine 
hostname matches "name".  Examples:

	host=server1: -x /usr/local/data

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.


=head3 Notes:

=cut

__END__
# ---------------------------------------------------------
# Output filters.  See LogOutput.pm for details of output filtering.
#
IGNORE	"^\s*$"
IGNORE	"^\s*(\S+:\s*)?.._..\.\S+\.\.\. done\s*$"
IGNORE	"^\s*(\S+:\s*)?.._..\.UTF-8... up-to-date\s*$"
IGNORE	"^\s*(\S+:\s*)?\(Reading database \.\.\. "
IGNORE	"^\s*(\S+:\s*)?\*\s*(Starting|Stopping|Restarting) "
IGNORE	"^\s*(\S+:\s*)?\*\s*No vpn is running.$"
IGNORE	"^\s*(\S+:\s*)?\*\s*Not reloading AppArmor in container$"
IGNORE	"^\s*(\S+:\s*)?\*\s*Not starting AppArmor in container$"
IGNORE	"^\s*(\S+:\s*)?\*\s*stop/waiting$"
IGNORE	"^\s*(\S+:\s*)?\.\.\.done.$"
IGNORE	"^\s*(\S+:\s*)?\d+ upgraded, \d+ newly installed, \d+ to remove and \d+ not upgraded.$"
IGNORE	"^\s*(\S+:\s*)?\s*$"
IGNORE	"^\s*(\S+:\s*)?\S+ start/running, process \d+$"
IGNORE	"^\s*(\S+:\s*)?\S+ stop/waiting$"
IGNORE	"^\s*(\S+:\s*)?\S+.(socket|service)$"
IGNORE	"^\s*(\S+:\s*)?\S+:\s*\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*(\S+:\s*)?\S+:\s*\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
IGNORE	"^\s*(\S+:\s*)?\S+:\s*\S+:\s+\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*(\S+:\s*)?\S+:\s*Remote job ended at ..:..:.., return code =   0, signal =   0, run time ="
IGNORE	"^\s*(\S+:\s*)?\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*(\S+:\s*)?\S+:\s+Command: "
IGNORE	"^\s*(\S+:\s*)?\S+:\s+Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE	"^\s*(\S+:\s*)?\S+\.(socket|service)\s*$"
IGNORE	"^\s*(\S+:\s*)?addgroup: The group \`\S+' already exists"
IGNORE	"^\s*(\S+:\s*)?Adding 'diversion of \S+ to \S+ by \S+'$"
IGNORE	"^\s*(\S+:\s*)?adduser: The user \`\S+' already exists"
IGNORE	"^\s*(\S+:\s*)?adduser: The user `ubuntu' does not exist.$"
IGNORE	"^\s*(\S+:\s*)?adduser: The user `ubuntu' does not exist.$"
IGNORE	"^\s*(\S+:\s*)?After this operation, [\d,.]+ [KMGT]?B disk space will be freed.$"i
IGNORE	"^\s*(\S+:\s*)?After this operation, [\d,.]+ [KMGT]?B of additional disk space will be used.$"i
IGNORE	"^\s*(\S+:\s*)?apache2_invoke .*already enabled$"
IGNORE	"^\s*(\S+:\s*)?apport start/running$"
IGNORE	"^\s*(\S+:\s*)?apport stop/waiting$"
IGNORE	"^\s*(\S+:\s*)?AppStream cache update completed successfully.$"
IGNORE	"^\s*(\S+:\s*)?boots. If you want to update it now, run 'setupcon' from a virtual console.$"
IGNORE	"^\s*(\S+:\s*)?Building dependency tree...$"
IGNORE	"^\s*(\S+:\s*)?Calculating upgrade\.\.\.$"
IGNORE	"^\s*(\S+:\s*)?Checking databases.$"
IGNORE	"^\s*(\S+:\s*)?Checking if update is needed.$"
IGNORE	"^\s*(\S+:\s*)?Checking NSS setup...$"
IGNORE	"^\s*(\S+:\s*)?Checking server version.$"
IGNORE	"^\s*(\S+:\s*)?Checking system database.$"
IGNORE	"^\s*(\S+:\s*)?Current default time zone: "
IGNORE	"^\s*(\S+:\s*)?De-configuring "
IGNORE	"^\s*(\S+:\s*)?done\s*$"
IGNORE	"^\s*(\S+:\s*)?efibootmgr: EFI variables are not supported on this system.$"
IGNORE	"^\s*(\S+:\s*)?Examining "
IGNORE	"^\s*(\S+:\s*)?Executing "
IGNORE	"^\s*(\S+:\s*)?Extracting "
IGNORE	"^\s*(\S+:\s*)?Failed to set capabilities on file `/usr/bin/systemd-detect-virt' \(Invalid argument\)$"
IGNORE	"^\s*(\S+:\s*)?Fetched [\d.,]+ [kMGT]B in \S+ \([\d,.]+ kB/s\)$"
IGNORE	"^\s*(\S+:\s*)?Found \S+ image:"
IGNORE	"^\s*(\S+:\s*)?Generating grub configuration file ..."
IGNORE	"^\s*(\S+:\s*)?Generating locales \(this might take a while\)...\s*$"
IGNORE	"^\s*(\S+:\s*)?Generating locales...\s*$"
IGNORE	"^\s*(\S+:\s*)?Generation complete.\s*$"
IGNORE	"^\s*(\S+:\s*)?Get:\d+ http://"
IGNORE	"^\s*(\S+:\s*)?grub-probe: error: disk \`lvmid/\S+' not found."
IGNORE	"^\s*(\S+:\s*)?Hit(:\d+)? http://"
IGNORE	"^\s*(\S+:\s*)?Ign http://"
IGNORE	"^\s*(\S+:\s*)?Ign:\d+ http://.*\s+sarge InRelease$"
IGNORE	"^\s*(\S+:\s*)?Ign:\d+ http://.*\s+sarge InRelease$"
IGNORE	"^\s*(\S+:\s*)?initctl: Unable to connect to Upstart: Failed to connect to socket /com/ubuntu/upstart: Connection refused\s*$"
IGNORE	"^\s*(\S+:\s*)?Initializing new plugins...done$"
IGNORE	"^\s*(\S+:\s*)?insserv: Default-Start undefined, assuming empty start runlevel\(s\) for script `\S+'\s*$"
IGNORE	"^\s*(\S+:\s*)?insserv: Default-Stop  undefined, assuming empty stop  runlevel\(s\) for script `\S+'\s*$"
IGNORE	"^\s*(\S+:\s*)?insserv: warning: script '\S+' missing LSB tags and overrides$"
IGNORE	"^\s*(\S+:\s*)?insserv: warning: script 'screen-cleanup' missing LSB tags and overrides\s*$"
IGNORE	"^\s*(\S+:\s*)?install-info:"
IGNORE	"^\s*(\S+:\s*)?Installation finished. No error reported.\s*$"
IGNORE	"^\s*(\S+:\s*)?Installing for i386-pc platform.\s*$"
IGNORE	"^\s*(\S+:\s*)?Installing new version of config file /etc/init.d/apparmor ...$"
IGNORE	"^\s*(\S+:\s*)?job \d+ at ... ... .. ..:..:.. ....$"
IGNORE	"^\s*(\S+:\s*)?Leaving 'diversion of"
IGNORE	"^\s*(\S+:\s*)?linux-(headers|image)-\d+\.\d+\.\d+-\d+"
IGNORE	"^\s*(\S+:\s*)?Local time is now:"
IGNORE	"^\s*(\S+:\s*)?LXC container detected, aborting due to LXC managed /dev.$"
IGNORE	"^\s*(\S+:\s*)?lxc$"
IGNORE	"^\s*(\S+:\s*)?mysql.\S+\s+OK$"
IGNORE	"^\s*(\S+:\s*)?Need to get [\d,.]+ [KMGT]B of archives.$"i
IGNORE	"^\s*(\S+:\s*)?Obsolete conffile \S+ has been modified by you, renaming to .dpkg-bak$"
IGNORE	"^\s*(\S+:\s*)?pam-auth-update: Local modifications to .*, not updating.\s*$"
IGNORE	"^\s*(\S+:\s*)?pam-auth-update: Run pam-auth-update --force to override.\s*$"
IGNORE	"^\s*(\S+:\s*)?Please restart all running instances of firefox, or you will experience problems.$"
IGNORE	"^\s*(\S+:\s*)?Preconfiguring packages ...$"
IGNORE	"^\s*(\S+:\s*)?Preparing to unpack "
IGNORE	"^\s*(\S+:\s*)?Processing /usr/share/vim/addons/doc$"
IGNORE	"^\s*(\S+:\s*)?Processing \d+ changed \S+ file\.\.\.$"
IGNORE	"^\s*(\S+:\s*)?Processing \d+ changed doc-base file"
IGNORE	"^\s*(\S+:\s*)?Processing \d+ changed doc-base files..."
IGNORE	"^\s*(\S+:\s*)?Processing triggers for "
IGNORE	"^\s*(\S+:\s*)?Reading package lists...$"
IGNORE	"^\s*(\S+:\s*)?Reading state information...$"
IGNORE	"^\s*(\S+:\s*)?Rebuilding \S+...$"
IGNORE	"^\s*(\S+:\s*)?Regenerating fonts cache... done.$"
IGNORE	"^\s*(\S+:\s*)?Registering documents with scrollkeeper..."
IGNORE	"^\s*(\S+:\s*)?Registering documents with scrollkeeper\.\.\.$"
IGNORE	"^\s*(\S+:\s*)?Removing "
IGNORE	"^\s*(\S+:\s*)?Removing 'diversion of \S+ to \S+ by fake-udev'$"
IGNORE	"^\s*(\S+:\s*)?Replacing "
IGNORE	"^\s*(\S+:\s*)?roundcube.\S+\s+OK$"
IGNORE	"^\s*(\S+:\s*)?Run 'dpkg-reconfigure tzdata' if you wish to change it.\s*$"
IGNORE	"^\s*(\S+:\s*)?run-parts: executing "
IGNORE	"^\s*(\S+:\s*)?Running queries to upgrade MySQL server.$"
IGNORE	"^\s*(\S+:\s*)?Setcap worked\! gst-ptp-helper is not suid\!$"
IGNORE	"^\s*(\S+:\s*)?Setting up "
IGNORE	"^\s*(\S+:\s*)?Skipping profile in /etc/apparmor.d/disable: \S+$"
IGNORE	"^\s*(\S+:\s*)?snap-confine$"
IGNORE	"^\s*(\S+:\s*)?Software catalog update was successful.$"
IGNORE	"^\s*(\S+:\s*)?Synchronizing state of "
IGNORE	"^\s*(\S+:\s*)?System not running in EFI mode, not installing to EFI system partition.$"
IGNORE	"^\s*(\S+:\s*)?The following packages were automatically installed and are no longer required:$"
IGNORE	"^\s*(\S+:\s*)?The following packages will be REMOVED:$"
IGNORE	"^\s*(\S+:\s*)?The following packages will be upgraded:$"
IGNORE	"^\s*(\S+:\s*)?The sys schema is already up to date \(version \S+\).$"
IGNORE	"^\s*(\S+:\s*)?The value of the capability argument is not permitted for a file. Or the file is not a regular \(non-symlink\) file$"
IGNORE	"^\s*(\S+:\s*)?Universal Time is now:"
IGNORE	"^\s*(\S+:\s*)?Unknown media type in type"
IGNORE	"^\s*(\S+:\s*)?update-alternatives: using \S+ to provide"
IGNORE	"^\s*(\S+:\s*)?update-binfmts: warning: \S+ already enabled in kernel.\s*$"
IGNORE	"^\s*(\S+:\s*)?update-initramfs: deferring update \(trigger activated\)\s*$"
IGNORE	"^\s*(\S+:\s*)?update-initramfs: Deleting"
IGNORE	"^\s*(\S+:\s*)?update-initramfs: Generating "
IGNORE	"^\s*(\S+:\s*)?update-rc.d: warning: start and stop actions are no longer supported; falling back to defaults\s*$"
IGNORE	"^\s*(\S+:\s*)?Updating software catalog...this may take a moment.$"
IGNORE	"^\s*(\S+:\s*)?Upgrade process completed successfully.$"
IGNORE	"^\s*(\S+:\s*)?ureadahead will be reprofiled on next reboot\s*$"
IGNORE	"^\s*(\S+:\s*)?Use 'apt-get autoremove' to remove them.$"
IGNORE	"^\s*(\S+:\s*)?W: Possible missing firmware /lib/firmware/ast_dp501_fw.bin for module ast\s*$"
IGNORE	"^\s*(\S+:\s*)?WARN: Duplicate profile '.+', using last found$"
IGNORE	"^\s*(\S+:\s*)?warning: commands will be executed using /bin/sh$"
IGNORE	"^\s*(\S+:\s*)?Warning: Stopping \S+, but it can still be activated by:"
IGNORE	"^\s*(\S+:\s*)?Your console font configuration will be updated the next time your system$"
LOGONLY "^\s*(\S+:\s*)?\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY "^\s*(\S+:\s*)?Command: "
SHOW	"^\s*(\S+:\s*)?\d+ upgraded, \d+ newly installed, \d+ to remove and 0 not upgraded.$"
SHOW	"^\s*(\S+:\s*)?Executing:"
SHOW	"^\s*(\S+:\s*)?Generating locales..$"
SHOW	"^\s*(\S+:\s*)?Installing new version of config file "
SHOW	"^\s*(\S+:\s*)?Shutdown scheduled for \d\d:\d\d:\d\d$"
SHOW	"^\s*(\S+:\s*)?Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW	"^\s*(\S+:\s*)?Test:"
SHOW	"^\s*(\S+:\s*)?Unpacking "
SHOW	"^\s*(\S+:\s*)?Verbose:"
