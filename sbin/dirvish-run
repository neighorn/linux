#!/usr/bin/perl

use LogOutput;
use ProcessOptions;
use Text::ParseWords;
# override CORE::glob in current package
use File::Find;
use Fcntl qw(:flock :mode);
use File::Temp qw(mktemp);
#use strict;
use warnings;
use POSIX qw(strftime);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            # Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    # Trim off the path, if present.
#@Args=@ARGV;                        # Preserve orig command for ref.
my $Errors=0;   	                    # No errors so far.
my $Syslog='user';                         # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my $LogFile="";				# Name of the log file.
my $ConfigFile="$BaseDir/${Prog}.cfg";     # Name of config file.
our $opt_B = '';		# -B: begin script (initialization).
our @opt_B;			# List of initialization scripts.
our $opt_D = '';		# Additional dirvish options.
our $opt_e;
our $opt_m;			# Mail.
our $opt_O;
our $opt_p;
our $opt_P;
our $opt_R;
our $opt_S;
our $opt_t;			# Test
our $opt_v;
our $opt_N = '';
our %Config;
my $MachineDirectory;		# Base directory for this dirvish item.
my %FileSystems;
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
$OptSpec='B=l D=l h m=l N=s e=l O=s p=l P=l s S=s R t v';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		($name,$settings)=split(/:?\s+/,$_,2);
		$name=uc($name);	# Name is not case sensitive.
		$settings=~s/\s+$//;	# Trim trailing spaces.
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
	
# Set up our logging and output filtering.
$RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($opt_N) {
	$Subject="$opt_N" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

LogOutput({
	SYSLOG_FACILITY => $Syslog,
	MAIL_FILE => $LogFile,
	ALWAYS_MAIL_LIST => $opt_m,
	ERROR_MAIL_LIST => $opt_e,
	ALWAYS_PAGE_LIST => $opt_p,
	ERROR_PAGE_LIST => $opt_P,
	MAIL_SUBJECT => $Subject,
});
die "No BANKS defined in configuration file(s)" 
	unless (defined($Config{BANKS}) 
		and exists($Config{BANKS})
		and $Config{BANKS});
my @Banks = shellwords(($Config{BANKS}));

foreach (@opt_B) {
	# Run any initialization scripts.
	print "Running: $_\n";
	RunDangerousCmd($_) &&
		die "$_ returned status $?: $!\n";
}

foreach $Target (@Parms) {
	# Make sure they gave us a valid vault.
	if ($Target =~ m"^/") {
		# They gave us a full path.  See if it's valid.
		($MachineDirectory=$Target) =~ s":"/";
		$MachineDirectory =~ s"^(.*)[^/]*$"$1";
		$Target =~ s"^.*([^/]*$)"$1";
		if (! -d $MachineDirectory) {
			warn "$MachineDirectory not found\n";
			$Errors++;
			next;
		};
	} else {
		# No full path.  Hunt for it.
		$MachineDirectory='';
		foreach (@Banks) {
			if (-d "$_/$Target/dirvish") {
				$MachineDirectory = "$_/$Target";
				last;
			}
		}
		if (! $MachineDirectory) {
			warn "Unable to locate $Target in dirvish banks.\n";
			$Errors++;
			next;
		}
	}

	# Insert separators between tasks.
	print "_"x60 . "\n";
	print strftime("Starting $Target at %H:%M:%S on %A, %Y-%m-%d...\n",localtime());

	if (!chdir $MachineDirectory) {
		warn "Unable to CD to $MachineDirectory: $!\n";
		$Errors++;
		next;
	}

	# Make sure there's not another copy of us running against this.
	my $LockFile = "$MachineDirectory/dirvish/$Prog.lock";
	my $LOCK;
	if (!open($LOCK,'>>',$LockFile)) {
		warn "Unable to create/open $LockFile: $!";
		$Errors++;
		next;
	}
	if (!flock($LOCK, LOCK_EX | LOCK_NB)) {
		warn "Unable to lock $LockFile: $!";
		$Errors++;
		next;
	}

	# Is this a rerun?
	if ($opt_R) {
		my $LS;
		if (open($LS,'ls -t |')) {
			# Find the newest directory that isn't dirvish.
			while (my $dir = <$LS>) {
				chomp $dir;
				next if ( $dir =~ /^dirvish$/);
				my $mode = (lstat($dir))[2];		# Get the mode. lstat detects symlinks.
				next unless (S_ISDIR($mode));		# Skip non-directories.
				next unless (-M "$dir" <= 1);		# Skip older backups.
				next unless (-d "$dir/tree" || -d "$dir/log" || -d "$dir/log.tmp");
				my $trash = mktemp("./trash.XXXX");
				RunDangerousCmd("mv $dir $trash") && warn "Unable to rename '$dir' in response to -R: $!";
				RunDangerousCmd("echo rm -rf ./$trash | at now");
				last;
			}
			close $LS;
		}
		else {
			warn "Unable to launch ls to delete prior backup: $!";
		}
	}

	# Do we need to initialize this disk?  Need at least 1 tree and a hist file.
	my $Status = system('/bin/ls ./*/tree > /dev/null 2>&1');
	$Status = system('/bin/ls ./dirvish/*.hist > /dev/null 2>&1') if ($Status eq 0);
	my $Init = ($Status eq 0?'':'--init "--expire=+3 months"');	# Add --init if no trees.

	# Run the back-up.
	my $AdditionalOptions = join(' ',@opt_D);
	my $TargetStartTime = time();
	$Status = RunDangerousCmd("dirvish --vault $Target $Init $AdditionalOptions");
	if ($Status == 0) {
		foreach (`ls -tr $MachineDirectory`) {
			chomp;
			next if (/^dirvish$/);
			my $Dir = "$MachineDirectory/$_";
			next unless ( -d "$Dir" and ! -l "$Dir");		# Skip symbolic links ("latest"), etc.
			next unless ( -f "$Dir/summary");			# Skip stray non-backup folders.
			next unless ((stat($Dir))[9] > $TargetStartTime);	# Skip older backups.
			Summarize("$Dir");
		}
	} else {
		print "dirvish failed with status $Status\n";
		$Errors++;
	}

	# Clean up the lock file.
	unlink($LockFile);
	
	# Remember this file system device for our space report.
	my $fs=`df -P $MachineDirectory | tail -1`;
	$fs =~ s/\s.*$//;	# Just need the device name.
	chomp $fs;
	$FileSystems{$fs}=1;
}

# Print the disk space report.
if (%FileSystems) {
	print "_"x60 . "\nDisk space report:\n";
	my $units = ($^O eq 'aix'?'g':'h');
	RunDangerousCmd("df -$units -P| grep -E '^(" . join('|',keys(%FileSystems)) . ") '");
	print "\n";
}

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

sub Summarize {
	my($Directory);			# Current directory we're processing.
	foreach $Directory (@_) {
		# Document any errors in the execution report.
		if (!open(SUMMARY,'<', "$Directory/summary")) {
			warn "Unable to open $Directory/summary: $!\n";
		}
		else {
			my $LastLine='';
			while (<SUMMARY>) {
				$LastLine = $_ if (!/^\s*$/);
			}
			$LastLine =~ s/\s*Status:\s*//;
			$LastLine =~ s/\s*$//;
			print "Unexpected summary status: $LastLine\n"
				unless ($LastLine =~ /^success$|file vanished on sender/);
		}
			
		system("tail -1 $Directory/summary");

		# Calculate totals.
		$TotalItems=0;
		$TotalSize=0;
		$NewItems=0;
		$NewSize=0;
		find(\&FoundItem,"$Directory/tree");
		my $WarnText='';
		if ($opt_S and $NewSize > $opt_S) {
			$WarnText = "New item size of " . FormatSize($NewSize) . " exceeds alert threshold of " . FormatSize($opt_S) . ".\n";
		}
		$TotalSize=FormatSize($TotalSize);
		$NewSize=FormatSize($NewSize);
		printf "$Target $Directory: " . 
			"Total Items: %d (%s), " .
			"New Items: %d (%s)\n",
			$TotalItems, $TotalSize,
			$NewItems, $NewSize;
		print $WarnText if ($WarnText);
	}
}


#
# FoundItem - process a found file
#
sub FoundItem {
	
	my($Links);			# Number of hardlinks.
	my($Size);			# Number of bytes.
	my($Name)=$File::Find::name;	# Name of tile.
	chomp;
	($Links,$Size)=(lstat($Name))[3,7];
	$TotalItems++;
	$TotalSize+=$Size if (defined($Size) && $Size != 0);
	if (defined($Links) && $Links == 1) {
		$NewItems++;
		$NewSize+=$Size;
	}
}


#
# FormatSize - standardize formatting size.
#
sub FormatSize {

	my $Size = shift;
	my $Unit = 'B';
	foreach (qw(K M G T)) {
		if ($Size >= 1024) {
			$Size = $Size/1024;
			$Unit = $_;
		}
		else {
			last;
		}
	}
	$Size = sprintf("%.1f%s",$Size,$Unit);
	$Size =~ s/\.0// if ($Size =~ /\d+\.0.$/);	# Normalize number.
	return $Size;
}


#
# commify - insert commas in numbers.
#
sub commify {
	local $_ = shift;
	1 while s/^(-?\d+)(\d{3})/$1,$2/;
	return $_;
}

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}



#
# opt_S - size threshold
#
sub opt_S {
	my $Value = shift;
	if ($Value =~ /^(\d+)K$/i) {
		$opt_S = $1*1024;
	}
	elsif ($Value =~ /^(\d+)M$/i) {
		$opt_S = $1*1024*1024;
	}
	elsif ($Value =~ /^(\d+)G$/i) {
		$opt_S = $1*1024*1024*1024;
	}
	elsif ($Value =~ /^(\d+)T$/i) {
		$opt_S = $1*1024*1024*1024*1024;
	}
	else {
		die <Invalid value "$opt_S" for -S.\n>;
	}
}


#
# opt_h: Usage
#
sub opt_h {

	open (PAGENATER,"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - Zip selected shared folders onto the snap server.

Usage:  $Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] vault
	$Prog -h

Flags:
	-B script:	Begin: Execute "script" before starting the job.
	-D parms:	Dirvish: Pass the following parameters and options
			directly to dirvish.  Spaces need to be escaped or
			quoted.
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-N text	:	Name: Set subject line to this.  Accepts variable subst.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
			the command line at this point.
	-S size	:	Size: Issue a warning if the size of the new items 
			exceeds "size".  "size" is measured in bytes, but may
			be followed by a unit of "k", "m", "g", or "t" 
			(case-insensitive).
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel

Parameters:
	vault	:	A vault name (assumed to bin in /usr/local/dirvish), or
			a fully-qualified path to the vault.  A branch may be 
			included.

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
	10      :       Some delete's failed.
ENDUSAGE
close PAGENATER;
exit 1;
}
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW	"^\s*[-_]+\s*$"
SHOW	"^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
# Ignore dirvish-expire messages
IGNORE	"^\s*Expiring\s"
IGNORE	"^\s*VAULT:BRANCH\s+IMAGE\s+CREATED\s+EXPIRED\s*$"
IGNORE	"^\s*cannot expire .* No unexpired good images$"
IGNORE	"^\s*\S+:\S+\s+.*\s+==\s+\d{4}-\d\d-\d\d \d\d:\d\d\s*$"
#
SHOW	"^\S+ \S+: Total Items: \d+ \(\d+(\.\d)?[BKGMT]\), New Items: \d+ \(\d+(\.\d)?[BKGMT]\)$"
SHOW	/^\s*[a-zA-Z:]+ \d+ items backed up; \d+ are new.$/
# The disk space report is normal unless capacity reaches 90% full.
SHOW	"^\s*Disk space report:$"
SHOW	"^\s*Filesystem\s+Size\s+Used\s+Avail\s+Use%\s+Mounted on\s*$"
#SHOW	"^\s*(/dev/|\S+:)\S+\s+\d+[TGMK]\s+\d+[TGMK]\s+\d+[TGMK]\s+(\d|[1-8])%"
SHOW	"^\s*(/dev/|\S+:)\S+\s+[0-9.]+[TGMK]?\s+[0-9.]+[TGMK]?\s+[0-9.]+[TGMK]?\s+(\d|[1-8]\d|9[0-5])%"
IGNORE	"^\s*\*\*\* Execution cycle \d \*\*\*\s*$"
IGNORE	"^\s*Copyright \(c\) \d\d\d\d Water Technologies Inc.\s*$"
IGNORE	"^\s*All access is prohibited unless expressly authorized.$"
# Unexplained error 24 is "file vanished".  Ok if remote files are deleted while we run.
IGNORE	"^\s*rsync error: unexplained error \(code 24\) at main.c\(1045\)\s*$"
IGNORE	"^\s*rsync warning: some files vanished before they could be transferred"
IGNORE	"^\s*rsync: open.* failed: No such file or directory"
IGNORE	"^\s*(file|directory) has vanished: "
IGNORE	"^\s*Status: warning \(24\) -- file vanished on sender$"
IGNORE	"^\s*Status: success$"
SHOW	"^\s*Running:"
SHOW	"^\s*Running offsite back-ups to disk #\d+"
IGNORE	"^\s*warning: commands will be executed using /bin/sh$"
IGNORE	"^\s*job \d+ at "
IGNORE  "^\s*Job \S+.a will be run at ... ... .. ........ ... ....\.$"
SHOW    /^Job ended normally with status 0 and signal 0 - run time:/
SHOW    /^Test:/
SHOW    /^Executing:/
SHOW	/^\s*debug:/
SHOW  /^\s*$/
# 
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
