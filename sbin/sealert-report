#!/usr/bin/perl
#
# Report on any SELinux alerts
#
use strict;
use warnings;
use LogOutput;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use Fcntl qw(:flock :mode :DEFAULT);
use File::Basename;
use FindBin qw($RealScript);

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_help,
		'always-mail|m=s'	=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'days|D=s'		=>	\&opt_days,
		'filter-file|F=s'	=>	\&opt_Value,
		'test|t'		=>	\&opt_Value,
		'remote-host|R=s'	=>	\&opt_Array,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
);
#
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.
# ---------------------------------------------------------
#
# Load the config file.
#
foreach (@ConfigFiles) {
        LoadConfigFile($_);
}
foreach (keys(%Config)) { s/,$//;};     # Trim off trailing commas.

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(verbose => 0);        # Initialize Options.
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications) and $Errors == 0);
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

chdir "/usr/local/sbin" || die "Unable to change directories to /usr/local/sbin: $!\n";

# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	SYSLOG_FACILITY => 'user',
});

# Are we running it here, or on another host?
if ($Options{'remote-host'}) {
	$Errors = RunRemote();
}
else {
	$Errors = RunLocally();
}

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


# ---------------------------------------------------------
#
# LoadConfigFile - load a configuration file
#
sub LoadConfigFile {
	my $ConfigFile = shift;
	if (-e $ConfigFile) {
		my $CONFIGFH;
                open($CONFIGFH,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
                # Build a hash of settings found in the config file.
                my @Lines;

                # Read config file and assemble continuation lines into single items.
                while (<$CONFIGFH>) {
                        next if (/^\s*#/);                      # Comment.
                        next if (/^\s*$/);                      # Blank line.
                        chomp;
                        if (/^\s+/ and @Lines > 0) {
                                # Continuation line.  Append to prior line.
                                $Lines[$#Lines] .= " $_";
                        }
                        else {
                                push @Lines, $_;
                        }
                }
                close $CONFIGFH;

                # Process assembled lines.
                foreach (@Lines) {
                        my ($name,$settings)=split(/:?\s+/,$_,2);
                        $name=uc($name);                        # Name is not case sensitive.
                        $settings='' unless ($settings);        # Avoid undef warnings.
                        $settings=~s/\s+$//;                    # Trim trailing spaces.
			if ($name eq 'INCLUDE') {
				LoadConfigFile($settings);
			}
			else {
				$settings=~s/\s+$//;	# Trim trailing spaces.
				$Config{$name}.=$settings . ',' ;
			}
                }
		foreach (keys(%Config)) {
			$Config{$_} =~ s/,$//;  # Remove trailing comma
		}
        }
}
# ---------------------------------------------------------
#
# RunRemote - Run this elsewhere and track the results.
#
sub RunRemote {

	my @HostList;
	my $Errors = 0;
	foreach my $RemoteItem (@{$Options{'remote-host'}}) {
		$RemoteItem =~ s/,+/ /g;
		foreach (split(/\s+/,$RemoteItem)) {
		        if (exists($Config{uc($_)})) {
		                # This is a name from the config file.  Push it's list.
		                my $ConfigItem = $Config{uc($_)};
				$ConfigItem =~ s/,+/ /g;
				my @SplitList = split(/\s+/,$Config{uc($_)});
		                push @HostList, @SplitList;
		        }
		        else {
		                push @HostList, $_;
		        }
	        }
	}
	die "No remote hosts specified on the command line or in the configuration file.\n" unless (@HostList);

	my $MaxLength = 0;
	foreach (@HostList) { $MaxLength=($MaxLength < length($_)?length($_):$MaxLength); }
	$MaxLength++;		# Allow for trailing colon.

	foreach my $Host (@HostList) {
		my $Cmd =   "ssh $Host $Prog "
			  . '-F SHOWALL '
			  . '--always-mail= '
			  . ($Options{verbose} > 1?'-v ':'')
			  . ($Options{test}?'-t ':'')
			  . '2\>\&1 '
			  ;
		my $FH;
		print "Verbose: Running $Cmd\n" if ($Options{verbose} or $Options{test});
		if (open($FH, "$Cmd |")) {
			while (<$FH>) {
				printf "%-*s %s", $MaxLength, "$Host:", $_;
			}
			close $FH;
			my ($ExitCode, $Signal) = ($? >> 8, $? & 127);
			print "$Host:  Remote job exited with return code $ExitCode and signal $Signal\n";
			$Errors++ if ($ExitCode);
		}
		else {
			warn "Unable to open ssh session to $Host: $!\n";
			$Errors++;
		}
	}

	return $Errors;
}


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {

	if (0+@Parms == 0) {
		# No file list specified on the command line.  Build our own.
		opendir(my $DIR, "/var/log/audit") || die "Can't read /var/log/audit: $!\n";
		my @Files = sort(readdir($DIR));
		foreach (reverse(@Files)) {
			my $Filename = "/var/log/audit/$_";
			next unless (-f $Filename);
			push @Parms,$Filename
				if (! $Options{days} or $Options{days} >= -M "$Filename");
		}
		closedir $DIR;
	}

	# Run sealert on each file found.
	my $FileCount = 0;
	foreach my $Filename (@Parms) {
		my $FH;
		print "Verbose: Processing $Filename\n" if ($Options{verbose});
		if (open($FH,"sealert -a '$Filename' |")) {
			$FileCount++;
			# Dump the contents of the report.  Could just run the 
			# command, but expect to want to do some analysis later.
			while (<$FH>) {
				print $_;
			}
		}
		else {
			warn "Unable to open $Filename: $!\n";
			$Errors++;
			next;
		}
		close $FH;
	}
	warn "No files found to process\n" unless ($FileCount);
	return $Errors;
}


# ---------------------------------------------------------
#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($Options{test}) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($Options{'verbose'});
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


# ---------------------------------------------------------
#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


# ---------------------------------------------------------
#
# opt_Array - generic multi-value optoin  processing
#
sub opt_Array {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the array.
		push @{$Options{$Name}},$Value;
	}
	else {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
	}
}



# ---------------------------------------------------------
#
# days -- only process audit logs that have been modified in the last x days
#
sub opt_days {
        my(undef,$Value) = @_;
	
        if ($Value =~ /^\s*\+?\d+(\.\d+)?\s*$/) {
		$Options{days} = $Value + 0;
	}
	else {
                warn qq<Invalid "--days" value specified: "$Value" -- must be numeric\n>;
		$Errors++;
		$Options{days} = undef;
        }
}



# ---------------------------------------------------------
#
# help: Usage
#
sub opt_help {

	system("pod2text '$RealScript' | less");

=pod

=head1 $Prog - run sealert -a and summarize results



=head3 Usage:  
	$Prog [options] [logfile ...]
        $Prog -h

=head3 Flags:
	--days|-D days:		Days: If a log file isn't specified on the 
				command line, process any /var/log/audit/*
				files that have been modified in the last
				"days" days.  Defaults to 0 (all log files).
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from /usr/local/etc/$Prog.cfg
                                into the command line at this point.
	--remote-host|-R host	Remote: Run this on one or more remote
				hosts.  "host" may be a host name, an
				IP address, a configuration file entry
				name, or a comma or space separated list of
				any mix of these.  This option may also be
				repeated to append to the list.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
				May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel

=head3 Parameters:
        logfile ...		Zero or more audit log files to process.  If 
				no log files are listed on the command line,
				$Prog will process all the files in 
				/var/log/audit, possibly as limited by the
				--days option.

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut
exit 1;
}
__END__
#
# ---------------------------------------------------------
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE	"^\s*(\S+:\s*)?$"
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
IGNORE	"^\s*\S+:\s+Command: "
SHOW	"^\s*(\s+:\s*)?Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE	"^\s*(\s+:\s*)?\S+:\s+Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
LOGONLY	"^\s*(\s+:\s*)?\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*(\s+:\s*)?\S+:\s+\S+ ended normally with status 0 and signal 0"
LOGONLY	"^\s*(\s+:\s*)?\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
IGNORE	"^\s*\S+:\s*Remote job exited with return code 0 and signal 0$"
#
# These are normal messages that we want to see.
#
SHOW	"^\s*found 0 alerts in "
SHOW	"^\s*(\S+:\s*)?(Test|Executing|Verbose|debug):"
