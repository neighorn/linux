#!/usr/bin/perl

use strict;
use warnings;
use JobTools::LogOutput;
use Getopt::Long 2.38 qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use File::Find;
use Fcntl qw(:flock :mode :DEFAULT);
use File::Temp qw(mktemp);
use POSIX qw(strftime);
use IO::Socket;
use Data::Dumper;
$Data::Dumper::Pad = "Verbose:\t\t";

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
#my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my $ConfigFile="$BaseDir/${Prog}.cfg";	# Name of config file.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=uc($name);	# Name is not case sensitive.
		$settings=~s/\s+$//;	# Trim trailing spaces.
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process command line options.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
	
exit 8 if ($Errors);

die qq<No input file specified.  Enter "$Prog -h" for usage.\n> unless (@Parms);
my $InputFile = shift @Parms;
die "Unable to read $InputFile.\n" unless (-r $InputFile);
my %Selected;	# Specific database selection unimplemented.
my $SelectAll;	# Quick flag to say select all.
if (@Parms) {
    foreach (@Parms) { $Selected{$_}=1;}
    $SelectAll = 0;
}
else {
    $SelectAll = 1;
}

my $INFH;
die "Unable to open $InputFile: $!\n" unless open($INFH,'<',$InputFile);
my %Databases;	    # We'll keep a list of seen databases here.
my @Prefix;	    # Prefix data to go on the front of each backup.
my $Current = '<prefix>';
my $OUTFH;

while (<$INFH>) {
    if (/^\s*--+\s*Current Database:\s*`([^`]+)`\s*$/i) {
	# We just changed databases.
	close $OUTFH if (defined($OUTFH));
	undef($OUTFH);
	$Current=$1;
	next unless ($SelectAll or exists($Selected{$Current}));	    # New database not selected.
	my $OutFile = "split-$1.sql";
	$OutFile =~ tr/a-zA-Z0-9._-/_/c;	    # Edit out funky characters.
	my $Mode = (exists($Databases{$Current})?'>>':'>');	# Append or truncate?
	die "Unable to open $OutFile: $!" unless (open($OUTFH,$Mode,$OutFile));
	print $OUTFH @Prefix if ($Mode eq '>');	    # Write the prefix data.
	print $OUTFH $_;			    # Write this line.
	$Databases{$Current} = 1;		    # Next time, open in append mode.
    }
    elsif ($Current eq '<prefix>') {
	# Still collecting the prefix data.
	push @Prefix,$_;
    }
    elsif ($SelectAll or exists($Selected{$Current})) {
	print $OUTFH $_;
    }
}

close $INFH;
close $OUTFH if (defined($OUTFH));

if ($Errors) {
	warn "$Prog failed.\n";
} else {
	print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# xxxxx
#
sub xxxxxx {

}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($Options{test}) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($Options{verbose});
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


#
# opt_Array - generic multi-value optoin  processing
#
sub opt_Array {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the array.
		push @{$Options{$Name}},$Value;
	}
	else {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
	}
}


#
# opt_O - Load an option set.
#
sub opt_O {
	my(undef,$Value) = @_;
	$Value = uc($Value);
	if (exists($Config{$Value})) {
		$Errors ++ unless GetOptionsFromString($Config{$Value},%OptionSpecifications);
	}
	else {
		warn qq<Warning: "$Value" not found in configuration file\n>;
	}
}


#
# opt_h: Usage
#
sub opt_h {

	print <<ENDUSAGE;

mysql-split - split a mysqldump backup into individual database backups.


Syntax:
	mysql-split [options] backup-file [database1...]
	mysql-split -h

Options:
	-h|-?|--help:			Help: display this panel


Parameters:
	backup-file:	Name of the input backup file to split
	[database1...]:	The name of one or more databases to extract.
			If no database name is specified, all databases are
			extracted.

Examples:

	$Prog latest-backup.sql
	$Prog latest-backup.sql mydatabase mydatabase2

Notes:
	The output files are placed in the current directory.  The output
	file name is "split-xxx.sql", where "xxx" is replaced with the
	name of the individual database.

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
	10      :       Some delete's failed.
ENDUSAGE
exit 1;
}
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW	"^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW    /^\S+ ended normally with status 0 and signal 0 - run time:/
SHOW    /^Test:/
SHOW    /^Executing:/
SHOW    /^Verbose:/
SHOW	/^\s*debug:/
SHOW  /^\s*$/
# 
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
