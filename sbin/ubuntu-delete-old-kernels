#!/usr/bin/perl

# Delete old kernels

use strict;
use warnings;
use LogOutput;
use Getopt::Long 2.38 qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);
use Linux::Distribution qw(distribution_name);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'filter-file|F=s'	=>	\&opt_Value,
		'test|t'		=>	sub {$Options{test} = (exists($Options{test})?$Options{test}+1:1)},
		'remote-host|R=s'	=>	sub { opt_Array(@_,'allow-delete'=>1,'expand-config'=>1);},
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
		'keep|k=i'	=>	\&opt_Value,
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
foreach (@ConfigFiles) {
	LoadConfigFile($_);
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);
$Options{keep} = 2 unless ($Options{keep});

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $Subject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
});

# Are we in remote-host mode, in which case we don't run locally.
if ($Options{'remote-host'}) {
	$Errors = RunRemote();
}
else {
	$Errors = RunLocally();
}

if ($Errors) {
	warn "$Prog failed.\n";
}
else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# LoadConfigFile - load a configuration file
#
sub LoadConfigFile {
	my $ConfigFile = shift;
	if (-e $ConfigFile) {
		my $CONFIGFH;
                open($CONFIGFH,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
                # Build a hash of settings found in the config file.
                my @Lines;

                # Read config file and assemble continuation lines into single items.
                while (<$CONFIGFH>) {
                        next if (/^\s*#/);                      # Comment.
                        next if (/^\s*$/);                      # Blank line.
                        chomp;
                        if (/^\s+/ and @Lines > 0) {
                                # Continuation line.  Append to prior line.
                                $Lines[$#Lines] .= " $_";
                        }
                        else {
                                push @Lines, $_;
                        }
                }
                close $CONFIGFH;

                # Process assembled lines.
                foreach (@Lines) {
                        my ($name,$settings)=split(/:?\s+/,$_,2);
                        $name=uc($name);                        # Name is not case sensitive.
                        $settings='' unless ($settings);        # Avoid undef warnings.
                        $settings=~s/\s+$//;                    # Trim trailing spaces.
			if ($name eq 'INCLUDE') {
				LoadConfigFile($settings);
			}
			else {
				$settings=~s/\s+$//;	# Trim trailing spaces.
				$Config{$name}.=$settings . ',' ;
			}
                }
		foreach (keys(%Config)) {
			$Config{$_} =~ s/,$//;  # Remove trailing comma
		}
        }
}



#
# RunRemote - Run this elsewhere and track the results.
#
sub RunRemote {

	my @ARGV=@_;
	my $Errors = 0;

	# Analyze the remote-host list, ignoring duplicates and handling !-deletions.
	my @HostList = @{$Options{'remote-host'}};
	die "No remote hosts specified on the command line or in the configuration file.\n" unless (@HostList);

	my $MaxLength = 0;
	foreach (@HostList) { $MaxLength=($MaxLength < length($_)?length($_):$MaxLength); }
	$MaxLength++;		# Allow for trailing colon.
	my $DeleteNext=0;
	foreach (@ARGV) {
		if ($DeleteNext) {
			$_ = '';
			$DeleteNext=0;
		}
		elsif (/^--remote-host=/) {
			$_ = '';		# Delete this for remote systems.
		}
		elsif (/^-R/) {
			$_ = '';
			$DeleteNext=1;
		}
	}
	@ARGV = grep { $_ ne '' } @ARGV;
	@ARGV = map {qq<"$_">} @ARGV;

	foreach my $Host (@HostList) {
		my $Cmd =   "ssh $Host $Prog "
			  . join(' ', @ARGV) . ' '
			  . '-F SHOWALL '
			  . '--always-mail= '
			  . '2\>\&1 '
			  ;
		my $FH;

		# Don't even go to remote hosts if test level 2 (-tt).
		if($Options{test} and $Options{test} >= 2) {
			print "Test: $Cmd\n";
			next;
		}

		print "Verbose: Running $Cmd\n" if ($Options{verbose} or $Options{test});
		if (open($FH, "$Cmd |")) {
			while (<$FH>) {
				printf "%-*s %s", $MaxLength, "$Host:", $_;
			}
			close $FH;
			my ($ExitCode, $Signal) = ($? >> 8, $? & 127);
			print "$Host:  Remote job exited with return code $ExitCode and signal $Signal\n";
			$Errors++ if ($ExitCode);
		}
		else {
			warn "Unable to open ssh session to $Host: $!\n";
			$Errors++;
		}
	}

	return $Errors;
}


#
# RunLocally
#
sub RunLocally {

	my $Errors = 0;
	my $DPKG;
	my $Prior=$Options{keep};
	my $CurVersion = `uname -r`;
	chomp $CurVersion;
	my $Current;
	my $System = Linux::Distribution->new;
	if ($System->distribution_name ne 'ubuntu') {	
		# We're not Ubuntu.  Just leave quietly.
		print "Skipping $Prog -- this system isn't running Ubuntu.\n" if ($Options{verbose});
		exit 0;
	}
	die "Unable to run uname -r: status=$?, error=$!" if ($?);
	
	if ($CurVersion =~ /^(\d+)\.(\d+)\.(\d+)-(\d+)?/) {
		my $suffix = ($4?$4:0);
		$Current=NumericVersion($1,$2,$3,$suffix);
	}
	else {
		die "Unable to interpret current version $CurVersion";
	}
	print "The current kernel is $CurVersion($Current)\n" if ($Options{verbose} >= 2);
	
	# Get a list of installed kernels
	open($DPKG,"dpkg -l | grep -E '(ii|rc) *linux-image-' | sed 's/^ *ii *//;s/^ *rc *//' |")
		or die "Unable to run dpkg: $!";
	my %Installed;
	while (my $ThisVersion = <$DPKG>) {
		chomp $ThisVersion;
		# linux-image-3.13.0-40-generic          3.13.0-40.69~precise1 ...
		print "Verbose: Found $ThisVersion\n" if ($Options{verbose} >=2);
		$ThisVersion =~ s/\s.*$//;
		# linux-image-3.13.0-40-generic
		if ($ThisVersion =~ /^linux-image-(\d+)\.(\d+)\.(\d+)-(\d+)(\D.*)?$/) {
			print "Verbose: Learning version: $ThisVersion\n" if ($Options{verbose} >= 2);
			$Installed{NumericVersion($1,$2,$3,$4)}=$ThisVersion;
		}
		else {
			print "Verbose: Ignoring unknown version: $ThisVersion\n" if ($Options{verbose} >= 2);
			next;
		}
	}
	
	my $DeleteList = '';
	foreach my $ThisVersion (sort {$b<=>$a} keys(%Installed)) {
		my $PackageName = $Installed{$ThisVersion};
		print "Verbose: Evaluating $PackageName($ThisVersion)\n" if ($Options{verbose} >= 3);
		if ($ThisVersion ge $Current) {
			# Newer than our running version.  Keep.
			print "  Skipping $PackageName($ThisVersion): same or newer than our current version\n"
				if ($Options{verbose} >= 2);
			next;
		}
		if ($Prior > 0) {
			# Within number of prior versions to keep.
			print "  Skipping $PackageName($ThisVersion): within --keep limit\n"
				if ($Options{verbose} >= 2);
			$Prior--;
			next;
		}
		print "  Will delete $PackageName($ThisVersion)\n" if ($Options{verbose} >= 2);
		$DeleteList .= " $PackageName";
	}
	
	if ($DeleteList) {
		print "Deleting old kernel packages...\n"
			if ($Options{verbose} >= 2);
		my $Status = RunDangerousCmd("apt-get purge -y $DeleteList");
		if ($Status) {
			print "apt-get returned status $Status\n";
			$Errors++;
		}
		RunDangerousCmd("apt-get autoremove -y");
	}
	else {
		print "No old kernel packages need to be removed.\n";
	}

	return $Errors;
}

#
# NumericVersion - Convert version to numeric form for easy handling.
#
sub NumericVersion {

	return ($_[0]*1000000+$_[1]*10000+$_[2]*100+$_[3]);
}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($Options{test}) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($Options{verbose});
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


# ---------------------------------------------------------
#
# opt_Array - generic multi-value option  processing
#
sub opt_Array {

	my($Name,$Value,%ArrayOpt) = @_;

	# Possible array processing options:
	#	preserve-lists:	0, don't split on embedded spaces or commas
	#			1 (default), split on embedded spaces or commas
	#	allow-delete:	0 (default), leading ! on value has no meaning
	#			1, leading ! on value means delete value from
	#				current list.
	#	force-delete:	0 (default), assume add unless ! and allow-delete=1
	#			1 delete this item regardless of leading !


	# Set a recursion limit if we don't already have one.  This helps
	# us detect list loops (listA points to listA, or A->B->A, etc.).
	$ArrayOpt{'recursion-limit'} = 64 unless ($ArrayOpt{'recursion-limit'});

	# Is the value empty, meaning to wipe any entries to this point.
	if (!$Value) {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
		return;
	}

	# Split out lists by default, unless embedded-lists are preserved.
	my @ValueList;
	if ($ArrayOpt{'preserve-lists'}) {
		# Preserve commas and embedded spaces.  Just leave value as is.
		@ValueList = ($Value);
	}
	else {
		$Value =~ s/[\s,]+$//;	# Trailing separators make no sense.
		$Value =~ s/^\s+//;	# Ignore leading whitespace.
		@ValueList = split(/[,\s]+/,$Value);
	}

	# Now process each list item individually.
	while ($Value = shift(@ValueList)) {
		
		# Are we adding or deleting this item.
		my $AddItem = 1;	# Assume we're adding.
		my $Prefix;
		if ($ArrayOpt{'force-delete'}) {
			# We've been told, flat-out, to delete this item.
			$AddItem = 0;
			$Value =~ s/^!+// if ($ArrayOpt{'allow-delete'});
		}
		elsif ($ArrayOpt{'allow-delete'} and $Value =~ /^!+(.*)$/) {
			# Delete is allowed, and ! is present.
			$AddItem = 0;
			$Value = $1;
		}
		
		# If config lists are permitted, see if this is a config list.
		if ($ArrayOpt{'expand-config'} and exists($Config{uc($Value)})) {
			# This is a reference to a config file list. Recurse
			# through this, in case the list contains more lists.
			die "List loop detected in --$Name=$Value"
				if ($ArrayOpt{'recursion-limit'} <= 0);
			opt_Array(
				$Name,
				$Config{uc($Value)},
				%ArrayOpt,'recursion-limit'=>($ArrayOpt{'recursion-limit'}-1),
				'force-delete'=> (1-$AddItem),
			);
			next;
		}

		# If we got here, we have a value to either add or delete.
		if ($AddItem) {
			push @{$Options{$Name}},$Value
				unless grep { $_ eq $Value } @{$Options{$Name}};
		}
		else {
			# Remove this item from the list if present.
			@{$Options{$Name}} = grep { $_ ne $Value } @{$Options{$Name}};
		}
	}
}





#
# opt_O - Load an option set.
#
sub opt_O {
	my(undef,$Value) = @_;
	$Value = uc($Value);
	if (exists($Config{$Value})) {
		$Errors ++ unless GetOptionsFromString($Config{$Value},%OptionSpecifications);
	}
	else {
		warn qq<Warning: "$Value" not found in configuration file\n>;
	}
}


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 $Prog - 

delete old Ubuntu kernels, because Ubuntu just keeps them forever

=head3 Usage:  
        $Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] 

        $Prog -h

=head3 Flags:
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
	--keep|-k num		Keep: Keep this many current and past
				kernels.  Newer kernels than the current
				running kernel are automatically kept.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFile
                                into the command line at this point.
	--remote-host|-R host	Remote: Run this on one or more remote
				hosts.  "host" may be a host name, an
				IP address, a configuration file entry
				name, or a comma or space separated list of
				any mix of these.  This option may also be
				repeated to append to the list.  Items in the
				list prefixed by ! are removed from the 
				current list.  This is used primarily to
				include a configuration, but then remove
				a particular host as in:
					-R SERVER -R \!beta
				meaning all servers in the SERVERs list 
				except "beta".
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
				May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel

=head3 Parameters:
        (none)

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#               Everything else is flagged as an error.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given type
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
IGNORE	"^\s*(\S+:\s+)?/usr/sbin/grub-probe: warning: Couldn't find physical volume `\(null\)'. Some modules may be missing from core image..$"
IGNORE	"^\s*(\S+:\s+)?0 upgraded, 0 newly installed, \d+ to remove and \d+ not upgraded.$"
IGNORE	"^\s*(\S+:\s+)?\(Reading database \.\.\."
IGNORE	"^\s*(\S+:\s+)?After this operation, .* disk space will be freed.$"
IGNORE	"^\s*(\S+:\s+)?After this operation, .* of additional disk space will be used.$"
IGNORE	"^\s*(\S+:\s+)?Building dependency tree...$"
IGNORE	"^\s*(\S+:\s+)?done\s*$"
IGNORE	"^\s*(\S+:\s+)?error: superfluous RAID member \(\d+ found\).$"
IGNORE	"^\s*(\S+:\s+)?Examining "
IGNORE	"^\s*(\S+:\s+)?Found .* on /dev/\S+\s*$"
IGNORE	"^\s*(\S+:\s+)?Found \S+ image: "
IGNORE	"^\s*(\S+:\s+)?Generating grub configuration ...$"
IGNORE	"^\s*(\S+:\s+)?Generating grub configuration file \.\.\."
IGNORE	"^\s*(\S+:\s+)?Generating grub.cfg ...\s*$"
IGNORE	"^\s*(\S+:\s+)?linux-generic-\S+ linux-image-"
IGNORE	"^\s*(\S+:\s+)?linux-headers-"
IGNORE	"^\s*(\S+:\s+)?linux-image-"
IGNORE	"^\s*(\S+:\s+)?P: Checking "
IGNORE	"^\s*(\S+:\s+)?P: Installing debian theme... done.$"
IGNORE	"^\s*(\S+:\s+)?P: Updating /boot/"
IGNORE	"^\s*(\S+:\s+)?P: Writing config for "
IGNORE	"^\s*(\S+:\s+)?Processing triggers"
IGNORE	"^\s*(\S+:\s+)?Reading package lists...$"
IGNORE	"^\s*(\S+:\s+)?Reading state information...$"
IGNORE	"^\s*(\S+:\s+)?Remote job exited with return code 0 and signal 0$"
IGNORE	"^\s*(\S+:\s+)?run-parts: executing "
IGNORE	"^\s*(\S+:\s+)?The following package was automatically installed and is no longer required:"
IGNORE	"^\s*(\S+:\s+)?The following packages were automatically installed and are no longer required:$"
IGNORE	"^\s*(\S+:\s+)?The following packages will be REMOVED:$"
IGNORE	"^\s*(\S+:\s+)?update-initramfs: Deleting "
IGNORE	"^\s*(\S+:\s+)?update-initramfs: Generating "
IGNORE	"^\s*(\S+:\s+)?Use 'apt(-get)? autoremove' to remove it.$"
IGNORE	"^\s*(\S+:\s+)?Use 'apt(-get)? autoremove' to remove them.$"
IGNORE	"^\s*\S+:\s+\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*\S+:\s+\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
IGNORE	"^\s*\S+:\s+Command: "
IGNORE	"^\s*\S+:\s+Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE  "^\s*(\S+:\s+)?$"
IGNORE  "^\s*\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY	"^\s*\S+ ended normally with status 0 and signal 0"
LOGONLY	"^\s*\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
SHOW	"^\s*(\S+:\s+)?debug:"
SHOW	"^\s*(\S+:\s+)?Deleting "
SHOW	"^\s*(\S+:\s+)?Executing:"
SHOW	"^\s*(\S+:\s+)?No old kernel packages need to be removed.$"
SHOW	"^\s*(\S+:\s+)?Purging configuration files for "
SHOW	"^\s*(\S+:\s+)?Removing "
SHOW	"^\s*(\S+:\s+)?Skipping "
SHOW	"^\s*(\S+:\s+)?Test:"
SHOW	"^\s*(\S+:\s+)?Verbose:"
SHOW	"^\s*(\S+:\s+)?Will delete "
SHOW	"^\s*?Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW	"^\s*\S+:\s+\S+ exited with return code 0$"
SHOW	"^\s*The current kernel is"
