#!/usr/bin/perl

use strict;
use warnings;
use LogOutput;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);
use Fcntl qw(:flock :mode :DEFAULT);
use Linux::Inotify2;

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'after|A=s'		=>	\&opt_Array,
		'always-mail|m=s'	=>	\&opt_Array,
		'before|B=s'		=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'filter-file|F=s'	=>	\&opt_Value,
		'reverse-first'		=>	\&opt_Value,
		'test|t'		=>	\&opt_Value,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
		'wait|w=i'		=>	\&opt_Value,
		'watch'			=>	\&opt_Value,
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
foreach (@ConfigFiles) {
	LoadConfigFile($_);
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.

# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $Subject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
});
die "Insufficient parameters.  A source path and at least one target path are required.\n"
	unless (@Parms >= 2);

# Set the default for reverse-first if they didn't specify it.  The default is true if
# we're watching, or false if this is a one-off copy.
$Options{'reverse-first'} = $Options{watch}
	unless (exists($Options{'reverse-first'}));

# ---------------------------------------------------------
#
# Check for conflicting jobs.
#
my $JOBLOCKFH;					# Lock file handle.
my $JobLockFile = "/var/lock/$Prog.lock";	# Lock file name.
if (!$Options{test} and !open($JOBLOCKFH,'>>',$JobLockFile)) {
	print "Unable to create/open $JobLockFile: $!\n";
	exit 11;
}
if (!$Options{test} and !flock($JOBLOCKFH, LOCK_EX | LOCK_NB)) {
	my @stat = stat($JobLockFile);
	my $mdate = strftime("%Y-%m-%d",localtime($stat[8]));
	$mdate = 'today' if ($mdate eq strftime("%Y-%m-%d",localtime(time())));
	print "Skipped this job due to a conflicting job in progress per "
		. qq<"$JobLockFile" dated $mdate at >
		. strftime(
			"%H:%M:%S",
			localtime((stat($JobLockFile))[8]))
		. "\n"
		;
	exit 11;
}

# ---------------------------------------------------------
#
# Update ourselves first from the other side if requested. Typically,
# if we're just starting up, the other side may have updates we need.
#

if ($Options{'reverse-first'}) {
	print "Verbose: Running reverse synchronization\n" if ($Options{verbose});
	RunSync($Parms[1],$Parms[0]);
}
	

# ---------------------------------------------------------
#
# Set up a watch if requested.
# 
if ($Options{watch}) {
	# We're going to loop, watching for changes and syncing them.
	my $inotify = new Linux::Inotify2
		or die("Unable to create inotify object: $!\n");
	
	my $HoldWait = $Options{wait};	# Skip wait on initial sync.
	$Options{wait} = 0;
	print "Verbose: Running forward synchronization\n" if ($Options{verbose});
	RunSync(@Parms);
	$Options{wait} = $HoldWait;	# Restore wait time for subsequent syncs.

	$inotify->watch($Parms[0], IN_CREATE|IN_DELETE|IN_MODIFY|IN_MOVE)
		or die("Unable to create watch on $Parms[0]: $!\n");

	while () {
		print "\nVerbose: waiting for events...\n" if ($Options{verbose});
		my @events = $inotify->read;		# Wait for events
		if ($Options{verbose}) {
			my $Timestamp = strftime("%Y-%m-%d %H:%M:%S: ", localtime());
			foreach (@events) {
				printf "Verbose: $Timestamp: " 
					. $_->fullname
					. "\n";
			}
		}

		RunSync(@Parms);			# Something happened.  Resync.
	}
	die "Infinite loop exited!";
} 
else {
	# Just a single run.
	my $Status = RunSync(@Parms);
}

	
# ---------------------------------------------------------
#
# Release the job lock.
#
if ($JOBLOCKFH) {
        close $JOBLOCKFH;
        unlink $JobLockFile;
}


if ($Errors) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# xxxxx
#
sub xxxxxx {

}


#
# RunSync - syncronize the source to the target(s).
#
sub RunSync {

	# ---------------------------------------------------------
	#
	# Wait for things to settle, if requested.
	#
	if (exists($Options{wait}) and $Options{wait}) {
		print "Verbose: Waiting $Options{wait} seconds before syncing...\n"
			if ($Options{verbose});
		sleep ($Options{wait})
	}

	# ---------------------------------------------------------
	#
	# Run any before processes.
	#
	RunPrePostCmds (@{$Options{before}}) if (exists($Options{before}));

	my $Source = shift(@_);
	my $Cmd = 'rsync -i -XAavz --delete-after '
		. ($Options{test}?' --dry-run ':'')
		. "$Source ";
		;

	# ---------------------------------------------------------
	#
	# Run the command.  Convert test to verbose unless verbose is already set, and ignore test,
	# because this is handled by the --dry-run option.
	#
	my $Errors = 0;
	foreach my $Target (@_) {
		print "Verbose: Syncing to $Target\n" if ($Options{verbose});
		my $Status = RunDangerousCmd(
			  $Cmd . $Target
			, verbose => ($Options{verbose}?$Options{verbose}:$Options{test})
			, test => 0
		);
		$Errors++ unless ($Status == 0);
	};

	# ---------------------------------------------------------
	#
	# Run any "after" processes.
	#
	RunPrePostCmds (@{$Options{after}}) if (exists($Options{after}));

	return($Errors);
}


#
# RunPrePostCmds - run any before/after commands
#
sub RunPrePostCmds {
	$ENV{SYSVOL_SOURCE} = $Parms[0];
	$ENV{SYSVOL_TARGETS} = join(' ',@Parms[1..$#Parms]);
	foreach (@_) {
		my $Cmd = $_; # join(' ', ($_, @Parms));
		print "Verbose: Running after command: $Cmd\n"
			if ($Options{verbose});
		my $RDCStat = RunDangerousCmd($Cmd);
		print "Verbose: after command ended with status $RDCStat\n"
			if ($Options{verbose});
	}
}


#
# LoadConfigFile - load a configuration file
#
sub LoadConfigFile {
	my $ConfigFile = shift;
	if (-e $ConfigFile) {
		my $CONFIGFH;
                open($CONFIGFH,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
                # Build a hash of settings found in the config file.
                my @Lines;

                # Read config file and assemble continuation lines into single items.
                while (<$CONFIGFH>) {
                        next if (/^\s*#/);                      # Comment.
                        next if (/^\s*$/);                      # Blank line.
                        chomp;
                        if (/^\s+/ and @Lines > 0) {
                                # Continuation line.  Append to prior line.
                                $Lines[$#Lines] .= " $_";
                        }
                        else {
                                push @Lines, $_;
                        }
                }
                close $CONFIGFH;

                # Process assembled lines.
                foreach (@Lines) {
                        my ($name,$settings)=split(/:?\s+/,$_,2);
                        $name=uc($name);                        # Name is not case sensitive.
                        $settings='' unless ($settings);        # Avoid undef warnings.
                        $settings=~s/\s+$//;                    # Trim trailing spaces.
			if ($name eq 'INCLUDE') {
				LoadConfigFile($settings);
			}
			else {
				$settings=~s/\s+$//;	# Trim trailing spaces.
				$Config{$name}.=$settings . ',' ;
			}
                }
		foreach (keys(%Config)) {
			$Config{$_} =~ s/,$//;  # Remove trailing comma
		}
        }
}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,%Settings) = @_;

	my($FH,$Line,$Test,$Verbose);
	$Test = (exists($Settings{test})?$Settings{test}:$main::Options{test});
	$Verbose = (exists($Settings{verbose})?$Settings{verbose}:$main::Options{verbose});
	if ($Test) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($Verbose);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


#
# opt_Array - generic multi-value optoin  processing
#
sub opt_Array {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the array.
		push @{$Options{$Name}},$Value;
	}
	else {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
	}
}


#
# opt_O - Load an option set.
#
sub opt_O {
	my(undef,$Value) = @_;
	$Value = uc($Value);
	if (exists($Config{$Value})) {
		$Errors ++ unless GetOptionsFromString($Config{$Value},%OptionSpecifications);
	}
	else {
		warn qq<Warning: "$Value" not found in configuration file\n>;
	}
}


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 samba-sync-sysvol - 

Sync the sysvol directory tree from one Samba domain controller to one or more
other domain controllers.

=head3 Usage:  
        samba-sync-sysvol [options] source target1...

        samba-sync-sysvol -h|--help

=head3 Flags:
        --error-mail|-M mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFiles[0]
                                into the command line at this point.
	--library|-L library	Library: include these additional Perl 
				libraries in @INC.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel
	--after|A command	After: Run "command" after the completion
				of each synchronization. May be repeated.
	--before|b command	Before: Run "command" before the completion
				of each synchronization. May be repeated.
	--wait|-w sec:		Wait: wait "sec" seconds before the initial
				copy.  This is primarily intended for when
				this script is triggered automatically 
				file some file access monitoring, to allow
				all changes to be completed.

=head3 Parameters:
        source:			Source sysvol directory tree.  This will
				be passed directly to rsync, so it can
				be a directory path or a host:path
				specification.
	target1...:		One or more targets.  These are also 
				passed, one by one, to rsync.

=head3 Example:

    samba-sync-sysvol alpha:/usr/local/samba/var/locks/sysvol/ /etc/samba/var/locks/sysvol/

        Copy the sysvol tree from machine "alpha" to us, in spite of the 
        fact that they are located in different directory paths.

    samba-sync-sysvol /etc/samba/var/locks/sysvol/ alpha:/etc/samba/var/locks/sysvol

        Copy our sysvol tree to remote machine "alpha".  In this example they happen
        to have the same directory path, though that's not required.

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that samba-sync-sysvol may reference.  The syntax of the file is:

	name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#               Everything else is flagged as an error.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given type
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
SHOW    "^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW    "^\s*\S+ ended normally with status 0 and signal 0 - run time:"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW    "^\s*Verbose:"
SHOW    "^\s*debug:"
IGNORE	"^\s*$"
SHOW	"^\s*cd\+\+\+\+\+\+\+\+\+ "
SHOW	"^\s*\[<>.]f\+\+\+\+\+\+\+\+\+ "
SHOW	"^\s*\[<>.][df]\.\.t\S+? "
IGNORE	"^\s*sent \d+ bytes\s+received \d+ bytes\s+\d+\.\d+ bytes/sec$"
IGNORE	"^\s*total size is \d+\s+speedup is \d+\.\d+"
IGNORE	"^\s*receiving file list ... done$"
SHOW	"^\s*created directory "
IGNORE	'^\s*rsync: rsync_xal_set: (lremovexattr|lsetxattr)\("".*"","security.selinux"\) failed: Permission denied \(13\)$'
IGNORE	'^\s*rsync: rsync_xal_set: (lremovexattr|lsetxattr)\("".*"","security.selinux"\) failed: Invalid argument \(22\)$'
IGNORE	"^\s*rsync error: some files/attrs were not transferred \(see previous errors\) \(code 23\) at main.c\(\d+\) "
IGNORE	"^\s*building file list ... done$"
