#!/usr/bin/perl

use strict;
use warnings;
use JobTools::LogOutput;
use JobTools::Utils qw(:Opt :Lock LoadConfigFiles);
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications;
%OptionSpecifications = (
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&OptArray,
		'error-mail|M=s'	=>	\&OptArray,
		'option-set|O=s'	=>	sub {OptOptionSet(name => $_[1], optspec => \%OptionSpecifications);},
		'always-page|p=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptValue,
		'limit=i'		=>	\&OptValue,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
foreach (@ConfigFiles) {
	LoadConfigFiles($_);
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $Subject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
});

my (%OriginAddresses,%URIs,%Statuses);

my $LineCount=0;
@ARGV=@Parms;
while (<>) {
	chomp;
	$LineCount++;
	
	# condense one or more whitespace character to one single space
	s/\s+/ /go;
	
	#  break each apache access_log record into nine variables
	my ($clientAddress,    $rfc1413,      $username, 
	$localTime,         $httpRequest,  $statusCode, 
	$bytesSentToClient, $referer,      $clientSoftware) =
	/^(\S+) (\S+) (\S+) \[(.+)\] \"(.+)\" (\S+) (\S+) \"(.*)\" \"(.*)\"/o;

	next if ($clientAddress eq '127.0.0.1');	# Ignore ourselves.

	# determine the value of $uri
	my ($getPost, $uri, $junk) = split(' ', $httpRequest, 3);
	$uri = '/' unless ($uri);

	if (exists($OriginAddresses{$clientAddress}))	{$OriginAddresses{$clientAddress}++;}	else {$OriginAddresses{$clientAddress}=1};
	if (exists($URIs{$uri}))			{$URIs{$uri}++;}			else {$URIs{$uri}=1};
	if (exists($Statuses{$statusCode}))		{$Statuses{$statusCode}++;}		else {$Statuses{$statusCode}=1};

}

print "$LineCount lines read\n";

PrintStats(\%OriginAddresses,"Most common origin addresses",$Options{limit});
PrintStats(\%URIs,"Top URIs",$Options{limit});
PrintStats(\%Statuses,"Most common return statuses",$Options{limit});
	
if ($Errors) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# PrintStats 
#
sub PrintStats {

	my($HashRef,$Title,$Limit) = @_;
	$Limit = 5 unless (defined($Limit));

	print "\n$Title\n\n";
	my $LineCount=0;
	foreach (sort { ${$HashRef}{$b} <=> ${$HashRef}{$a} || $b cmp $a } keys %{$HashRef} ) {
		printf "  %7d %-s\n", ${$HashRef}{$_}, $_;
	last if ($LineCount++ > $Limit and $Limit);
	}
}


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 $Prog - summarize apache log files

<<description>>

=head3 Usage:  
        $Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] 

        $Prog -h

=head3 Flags:
        --error-mail|-M mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFiles[0]
                                into the command line at this point.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel

=head3 Parameters:
        (none)

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that $Prog may reference.  The syntax of the file is:

	name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#               Everything else is flagged as an error.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given type
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
SHOW    "^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW    "^\s*\S+ ended normally with status 0 and signal 0 - run time:"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW    "^\s*Verbose:"
SHOW    "^\s*debug:"
SHOW    "^\s*$"
SHOW	"^\s*[1-9]\d* lines read$"
SHOW	"^\s*Most common origin addresses$"
SHOW	"^\s*Top URIs$"
SHOW	"^\s*Most common return statuses$"
SHOW	"^\s*\d+\s+\S"
