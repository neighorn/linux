#!/usr/bin/perl

use strict;
use warnings;
use JobTools::LogOutput;
use JobTools::Utils qw(:Opt :Lock LoadConfigFiles);
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use FindBin qw($Bin $Script);

$ENV{PATH}='/usr/local/sbin:/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin';

# Initialize variables.
our $Prog=$0;                           # Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
my $Errors=0;   	                # No errors so far.
my $Syslog='user';                      # Name of Syslog facility.  '' for none.
my $BaseDir="/usr/local/etc";		# Set our base directory.
my @ConfigFiles=("$BaseDir/${Prog}.cfg", "$BaseDir/$Prog.d/$Prog.cfg");	# Name of config files.
our %Config;				# Data from the config file.
our %Options;				# Options settings.
our @Parms;				# List of non-option arguments.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications;
%OptionSpecifications = (
		'<>'			=>	sub {push @Parms,shift;},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&OptArray,
		'error-mail|M=s'	=>	\&OptArray,
		'option-set|O=s'	=>	sub {OptOptionSet(name => $_[1], optspec => \%OptionSpecifications);},
		'always-page|p=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptArray,
		'keep|k'		=>	\&OptValue,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
		'hosts|host|H=s'	=>	\&OptArray,
		'refdir|reference-dir=s'=>	\&OptValue,
		'save|s'		=>	\&OptValue,
		'dropok|dropsok'	=>	\&OptValue,
);
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Load the config file.
foreach (@ConfigFiles) {
	LoadConfigFiles($_);
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
	if (!@ARGV && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Pre-process our command line, to get the options we need for LogOutput.
my @ARGVSave = @ARGV;		# Needed to reprocess command line later.
%Options=(verbose => 0);	# Initialize Options.
$Errors ++ unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;		# Restore @ARGV for LogOutput and second GetOptions.
	
# Set up our logging and output filtering.
my $RunDate=`date +%m/%d`;
chomp $RunDate;
my $Subject;
if ($Options{subject}) {
	$Subject="$Options{subject}" ;
} elsif (@Parms >= 1) {
	$Subject="%* %m/%d %C %N " . join(', ',@Parms) . " %E %*%*%*" ;
} else {
	$Subject="%* %m/%d %C %N %E %*%*%*" ;
};

# Make sure some key items exist;
foreach (qw(always-mail error-mail always-page error-page)) {
	@{$Options{$_}} = () unless (exists($Options{$_}));
}
$Options{verbose} = 0 unless (exists($Options{verbose}));
$Options{logfile} = '' unless (exists($Options{logfile}));
my $LogOutputVerbose = ($Options{verbose} > 4?$Options{verbose}-4:0);
$Options{refdir} = "$BaseDir/$Prog.d" unless ($Options{refdir});

LogOutput({
	SYSLOG_FACILITY		=> $Syslog,
	MAIL_FILE		=> $Options{logfile},
	MAIL_FILE_PERMS		=> 0644,
	ALWAYS_MAIL_LIST	=> \@{$Options{'always-mail'}},
	ERROR_MAIL_LIST		=> \@{$Options{'error-mail'}},
	ALWAYS_PAGE_LIST	=> \@{$Options{'always-page'}},
	ERROR_PAGE_LIST		=> \@{$Options{'error-page'}},
	MAIL_SUBJECT		=> $Subject,
	FILTER_FILE		=> $Options{'filter-file'},
	VERBOSE			=> $LogOutputVerbose,
});

die("$Options{refdir} does not exist\n") 
	unless (-d $Options{refdir});

# Interpret remote-host if present.
my @HostList;
foreach (@{$Options{"hosts"}},@Parms) {
	if (exists($Config{uc($_)})) {
		# This is a config name.  Interpret it.
		push @HostList, split(/\s+/,$Config{uc($_)});
	}
	else {
		# This must be a host name.
		push @HostList, $_;
	}
}
push @HostList,"localhost" unless (@HostList);
my $MaxLength = 0;
foreach (@HostList) {
	$MaxLength = ($MaxLength < length($_)?length($_):$MaxLength);
}
my $Header = (@HostList>1);
foreach my $Host (@HostList) {
	printf "%s %-*s %s\n", '-' x 20, $MaxLength, $Host, '-' x 20
		if $Header;
	my $RefFile;
	if (-f "$Options{refdir}/$Host.ref" or $Options{save}) {
		$RefFile = "$Options{refdir}/$Host.ref";
	}
	elsif (-f "$Options{refdir}/DEFAULT.ref") {
		$RefFile = "$Options{refdir}/DEFAULT.ref";
	}
	else {
		warn "Cannot read $Options{refdir}/$Host.ref - $Host skipped.\n";
		next;
	}
	my $TempFile = "$Options{refdir}/$Host.current";
	die "Invalid reference file name" unless ($RefFile =~ m"^[a-zA-Z0-9/._-]+$"); # Careful what we write.
	
	my $OutFile = $TempFile;
	my $Cmd=
		($Host ne 'localhost'?"ssh $Host ":'')
		. "iptables-save > $OutFile"
		. q< && sed -r -i '/^#/d;/^-A fail2ban-.*-j (REJECT|RETURN)/d;/^-A .* -j fail2ban-/d;/^:/s/\[[0-9]*:[0-9]*\]$// ' > . $OutFile 	# Strip comments, table counters, fail2ban
		;
	my $Status = RunDangerousCmd($Cmd,test=>0,verbose=>$Options{test});
	if ($Status) {
		warn "Unable to gather IPTables data from $Host\n";
	}
	else {
		# Comparing.  Check the output with diff.
		my $FH;
		my $Cmd = "diff -bB --unified=0 --label=Reference --label=Current -- $RefFile $TempFile";
		print "Executing: $Cmd\n" if ($Options{test} or $Options{verbose});	# Always run.
		open($FH,"$Cmd |") || die "Unable to for diff: $!\n";
		while (<$FH>) {
			if (/^(---|\+\+\+|\@\@)/) {
				# Header line.  Just print it.
				print $_;
			}
			elsif ($Options{save}) {
				# Save.  Prefix changes with text so we don't flag it as an error.
				print "Changed: $_";
			}
			elsif (/^\+\+A.*-j DROP$/ and $Options{dropsok}) {
				# They added a drop, but drops are OK.  No action required.
			}
			else {
				print $_;
			}
		}
		close $FH;
		if ($? == 0) {
			print "$Host matches\n";
		}
		elsif ($Options{save}) {
			while (1) {
				print "\nSave changes to $RefFile (Y/n)?\n";
				next unless (<STDIN> =~ /^\s*([YyNn])/);
				if (uc($1) eq 'Y') {
					RunDangerousCmd("mv $TempFile $RefFile");
				}
				last;
			}
		}
		RunDangerousCmd("rm -f $TempFile") if (-f "$TempFile" and ( ! $Options{keep}));
	}
	
}
		

if ($Errors) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit( ($Errors?10:0) );


#
# opt_h: Usage
#
sub opt_h {

        my $Pagenater=$ENV{PAGENATER};
        $Pagenater="more" unless ($Pagenater);
        system("pod2text $Bin/$Script | $Pagenater");
        exit(1);
}
=pod

=head1 $Prog - Compare the current IPTables rules to reference files.

<<description>>

=head3 Usage:  
        $Prog [options] [hosts]

        $Prog -h

=head3 Flags:
        --error-mail|-M mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in filter list.
				This may be used multiple times to permit
				filter files to be concatenated.  The
				__DATA__ keyword may be specified to 
				include the built-in filter list.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from $ConfigFiles[0]
                                into the command line at this point.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
        --help|-h:              Help: display this panel
	--host|--hosts=host	Host: remote host table to check.  This is
				a comma-separated list of hosts to check.  
				Specifying hosts here is equivalent to 
				specifying them as parameters.
	--refdir|--referencedir dir:	Reference directory.  This directory
				contains the reference files to compare the
				current iptables configuration to.  Each
				host is compared to a file "hostname.ref"
				file if present, or else to "DEFAULT.ref".
	--dropok|--dropsOK:	Drops OK: ignore the addition of drop rules
				when comparing rules.
	--keep			Keep: Keep the current IPTables configuration
				working file in the reference directory with
				a suffix of ".current".  This doesn't
				overwrite the reference file, but provides a
				current copy for manual comparison.
	--save|-s		Save: Save the current IPTables 
				configuration as the new reference file.

=head3 Parameters:
        host1 ...
A list of hosts to check.  May also be specified via the --host/--hostss
option.

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that $Prog may reference.  The syntax of the file is:

	name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut

__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#               Everything else is flagged as an error.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given type
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
SHOW    "^\s*Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW    "^\s*\S+ ended normally with status 0 and signal 0 - run time:"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW    "^\s*Verbose:"
SHOW    "^\s*debug:"
SHOW    "^\s*$"
SHOW    "^\s*-+ \S+\s+-+$"
SHOW	"^\s*--- Reference$"
SHOW	"^\s*\+\+\+ Current$"
SHOW	"^\s*Changed:"
SHOW	"^\s*\S+ matches$"
SHOW	"^\s*\S+ saved$"
SHOW	"^\s*Save changes to"
IGNORE	"^\s*\@\@ -\d+(,\d+)? \+\d+(,\d+)? \@\@$"
