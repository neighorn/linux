#!/usr/bin/perl
#
# Backup critical system components and gather recovery information.
#
use strict;
use warnings;
use LogOutput;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use Fcntl qw(:flock :mode :DEFAULT);
use File::Basename;

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
my $JobLockFile;		# Name of our lock file.
my $JOBLOCKFH;			# Lock file handle.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications=(
		'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'help|h|?!'		=>	\&opt_h,
		'always-mail|m=s'	=>	\&opt_Array,
		'error-mail|M=s'	=>	\&opt_Array,
		'option-set|O=s'	=>	\&opt_O,
		'always-page|p=s'	=>	\&opt_Array,
		'error-page|P=s'	=>	\&opt_Array,
		'cycles|C=i'		=>	\&opt_Value,
		'output-dir|D=s'	=>	\&opt_Value,
		'filter-file|F=s'	=>	\&opt_Value,
		'test|t'		=>	\&opt_Value,
		'remote-host|R=s'	=>	\&opt_Array,
		'exclude|x=s'		=>	\&opt_Array,
		'exclude-fs|X=s'	=>	\&opt_Array,
		'min-size|s=s'		=>	\&opt_Value,
		'max-size|S=s'		=>	\&opt_Value,
		'verbose|v'		=>	sub {$Options{verbose} = (exists($Options{verbose})?$Options{verbose}+1:1)},
);
#
my %TypeExclude = (	# Populate a default list of types to exclude.
	'binfmt_misc' 		=> 1,
	'cgroup' 		=> 1,
	'debugfs' 		=> 1,
	'devpts' 		=> 1,
	'devtmpfs' 		=> 1,
	'fusectl' 		=> 1,
	'fuse.gvfs-fuse-daemon'	=> 1,
	'nfs' 			=> 1,
	'nfsd' 			=> 1,
	'none' 			=> 1,
	'proc' 			=> 1,
	'rpc_pipefs' 		=> 1,
	'securityfs' 		=> 1,
	'subfs' 		=> 1,
	'sysfs' 		=> 1,
	'sysfs' 		=> 1,
	'tmpfs' 		=> 1,
	'usbfs' 		=> 1,
);
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.
# ---------------------------------------------------------
#
# Load the config file.
#
foreach (@ConfigFiles) {
        LoadConfigFile($_);
}
foreach (keys(%Config)) { s/,$//;};     # Trim off trailing commas.

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(verbose => 0);        # Initialize Options.
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

# ---------------------------------------------------------
#
# Identify the output directory.  Do this early for Cleanup().
#
our $OutputDir;			# Name of directory we're creating.
if ($Options{'output-dir'}) {
	$OutputDir = $Options{'output-dir'};
	$BaseDir = basename($OutputDir);
}
else {
	$OutputDir="$BaseDir/%m-%d";
}
$OutputDir =~ s/%C/$HostName/g;			# Interpret %C.
$OutputDir=strftime($OutputDir,localtime());	# Interpret other variables.

chdir "/usr/local/sbin" || die "Unable to change directories to /usr/local/sbin: $!\n";

# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	CLEAN_UP => \&Cleanup,
	SYSLOG_FACILITY => 'user',
});

# Verify the command line.
die('Excess parameters on the command line: "' . join(' ',@Parms) . "\" See \"$Prog -h\" for usage.")
	if (@Parms);
$Options{cycles}=5 unless (exists($Options{cycles}));
die("Invalid number \"$Options{cycles}\" for --cycles.  See \"$Prog -h\" for usage.")
	unless ($Options{cycles} =~ /^[1-9]\d*$/);

# Add any additional file type exclusions.
foreach (@{$Options{'exclude-fs'}}) {
	$TypeExclude{$_}=1;
}

if ($Options{'remote-host'}) {
	$Errors = RunRemote();
}
else {
	$Errors = RunLocally();
}

# ---------------------------------------------------------
#
# Release the job lock.
#
if ($JOBLOCKFH) {
        close $JOBLOCKFH;
        unlink $JobLockFile;
}


if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


# ---------------------------------------------------------
#
# LoadConfigFile - load a configuration file
#
sub LoadConfigFile {
	my $ConfigFile = shift;
	if (-e $ConfigFile) {
		my $CONFIGFH;
                open($CONFIGFH,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
                # Build a hash of settings found in the config file.
                my @Lines;

                # Read config file and assemble continuation lines into single items.
                while (<$CONFIGFH>) {
                        next if (/^\s*#/);                      # Comment.
                        next if (/^\s*$/);                      # Blank line.
                        chomp;
                        if (/^\s+/ and @Lines > 0) {
                                # Continuation line.  Append to prior line.
                                $Lines[$#Lines] .= " $_";
                        }
                        else {
                                push @Lines, $_;
                        }
                }
                close $CONFIGFH;

                # Process assembled lines.
                foreach (@Lines) {
                        my ($name,$settings)=split(/:?\s+/,$_,2);
                        $name=uc($name);                        # Name is not case sensitive.
                        $settings='' unless ($settings);        # Avoid undef warnings.
                        $settings=~s/\s+$//;                    # Trim trailing spaces.
			if ($name eq 'INCLUDE') {
				LoadConfigFile($settings);
			}
			else {
				$settings=~s/\s+$//;	# Trim trailing spaces.
				$Config{$name}.=$settings . ',' ;
			}
                }
		foreach (keys(%Config)) {
			$Config{$_} =~ s/,$//;  # Remove trailing comma
		}
        }
}
# ---------------------------------------------------------
#
# RunRemote - Run this elsewhere and track the results.
#
sub RunRemote {

	my @HostList;
	my $Errors = 0;
	foreach my $RemoteItem (@{$Options{'remote-host'}}) {
		$RemoteItem =~ s/,+/ /g;
		foreach (split(/\s+/,$RemoteItem)) {
		        if (exists($Config{uc($_)})) {
		                # This is a name from the config file.  Push it's list.
		                my $ConfigItem = $Config{uc($_)};
				$ConfigItem =~ s/,+/ /g;
				my @SplitList = split(/\s+/,$Config{uc($_)});
		                push @HostList, @SplitList;
		        }
		        else {
		                push @HostList, $_;
		        }
	        }
	}
	die "No remote hosts specified on the command line or in the configuration file.\n" unless (@HostList);

	my $MaxLength = 0;
	foreach (@HostList) { $MaxLength=($MaxLength < length($_)?length($_):$MaxLength); }
	$MaxLength++;		# Allow for trailing colon.

	foreach my $Host (@HostList) {
		my $Cmd =   "ssh $Host $Prog "
			  . '-F /usr/local/etc/filter-accept-all.filter '
			  . '--always-mail= '
			  . ($Options{verbose} > 1?'-v ':'')
			  . ($Options{test}?'-t ':'')
			  . '2\>\&1 '
			  ;
		my $FH;
		print "Verbose: Running $Cmd\n" if ($Options{verbose} or $Options{test});
		if (open($FH, "$Cmd |")) {
			while (<$FH>) {
				printf "%-*s %s", $MaxLength, "$Host:", $_;
			}
			close $FH;
			my ($ExitCode, $Signal) = ($? >> 8, $? & 127);
			print "$Host:  Remote job exited with return code $ExitCode and signal $Signal\n";
			$Errors++ if ($ExitCode);
		}
		else {
			warn "Unable to open ssh session to $Host: $!\n";
			$Errors++;
		}
	}

	return $Errors;
}


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {
	# ---------------------------------------------------------
	#
	# Delete any failed back-ups.
	#
	RunDangerousCmd("rm -rf $BaseDir/*.bad 2> /dev/null");
	
	# ---------------------------------------------------------
	#
	# Keep the most recent $Options{cycles} back-ups.
	#
	if (open(my $FHLS,"ls -t $BaseDir 2> /dev/null |")) {
	        my $Count=0;
		while (<$FHLS>) {
			chomp;
			next unless (-d "$BaseDir/$_");	# Skip non-directories.
			$Count++;
	                RunDangerousCmd("rm -rf $BaseDir/$_") if ($Count >= $Options{cycles});
		}
		close $FHLS;
	} else {
		warn "Unable to open ls command: $!\n";
	}
	
	# ---------------------------------------------------------
	#
	# Create the output directory if necessary.
	#
	RunDangerousCmd("mkdir -p --mode=750 $OutputDir") unless (-e $OutputDir);
	RunDangerousCmd("chgrp sys $OutputDir") &&
		die "Unable to set group for $OutputDir: $!\n";
	if (! $Options{test} ) {
		chdir $OutputDir || die "Unable to change directories to $OutputDir: $!\n";
	}
	
	# ---------------------------------------------------------
	#
	# Check for conflicting jobs.
	#
	$JobLockFile = "$OutputDir/$Prog.lock";
	if (!$Options{test} and !open($JOBLOCKFH,'>>',$JobLockFile)) {
	        print "Unable to create/open $JobLockFile: $!\n";
	        exit 11;
	}
	if (!$Options{test} and !flock($JOBLOCKFH, LOCK_EX | LOCK_NB)) {
	        my @stat = stat($JobLockFile);
	        my $mdate = strftime("%Y-%m-%d",localtime($stat[8]));
	        $mdate = 'today' if ($mdate eq strftime("%Y-%m-%d",localtime(time())));
	        print "Skipped this job due to a conflicting job in progress per "
	                . qq<"$JobLockFile" dated $mdate at >
	                . strftime(
	                        "%H:%M:%S",
	                        localtime((stat($JobLockFile))[8]))
	                . "\n"
	                ;
	        exit 11;
	}
	
	# ---------------------------------------------------------
	#
	# Use the mount command to determine what to back up.
	#
	if (open(my $FHMOUNT,'mount |')) {
		MOUNT: while (<$FHMOUNT>) {
			chomp;
	
			# Skip transient file systems based on type.
			/\stype\s+(\S+)\s/;
			next if ($TypeExclude{$1});
	
	
			# Skip anything under /mnt as being temporary.
			next if (m"^\S+ on /mnt/");
	
			# Skip our own output area.
			my $BackupRoot = $BaseDir;
			$BackupRoot =~ s"/[^/]*$"";		# Drop host name.
			next if (m"^\S+ on $BackupRoot");
			
			# Get the mount point, and compare to our exclude list.
			my $MountPt;
			($MountPt)=(split(/\s+/))[2];
			foreach my $ExcludedMount (@{$Options{exclude}}) {
				next MOUNT if ($MountPt =~ m"^$ExcludedMount(/.*)?$");
			}
	
			# Build the output file name.
			my $OutputFile;
			my $OutputName;
	                ($OutputName="$MountPt") =~ s"^.*/"";
	                $OutputName="root" if ($OutputName eq '');
	                $OutputFile="$OutputName.tgz";
	
			# Do it.
			my $ExcludeFile = "$BaseDir/$OutputName.exclude";
			if (-f $ExcludeFile) {
				$ExcludeFile = "-X $ExcludeFile";
			} else {
				$ExcludeFile = "";
			}
				
			print "  Backing up $MountPt\n";
	                RunDangerousCmd("tar -cz --one-file-system " .
				"-f $OutputDir/$OutputFile " .
				"-C $MountPt " .
	                        "$ExcludeFile ."
	                        );
		}
	} else {
		die "Unable to issue mount command: $!\n";
	}
	
	# ---------------------------------------------------------
	#
	# Capture recovery information here, also.
	#
	RunDangerousCmd("recovery-info -o $OutputDir/recovery");
	my $size = ($Options{test}
		? '999999 x'
		: `du -s "$OutputDir"`
	);
	$size =~ s/^\s*(\d+)\s/$1/;
	print commify($size)
		. " bytes "
		. ($size > 1024?'(' . CompressSize($size) . ') ':'')
		. "written to $OutputDir\n";
	warn "Warning: backup is less than the minimum expected size ("
		. commify($Options{'min-size'}) ." bytes)\n"
	    if ($Options{'min-size'} and $size < $Options{'min-size'});
	warn "Warning: backup is more than the maximum expected size ("
		. commify($Options{'max-size'}) . " bytes)\n"
	    if ($Options{'max-size'} and $size > $Options{'max-size'});
}



# ---------------------------------------------------------
#
# commify - insert commas in numbers.
#
sub commify {
	local $_ = shift;
	1 while s/^(-?\d+)(\d{3})/$1,$2/;
	return $_;
}


# ---------------------------------------------------------
#
# ExpandSize - convert various number formats to an integer.
#
sub ExpandSize {
        my $Value = shift;
        $Value =~ s/,//g;               # Ignore commas.
        if ($Value =~ /^(\d+)$/i) {
                return $1;
        }
        elsif ($Value =~ /^(\d+(\.\d+)?)K$/i) {
                return $1*1024;
        }
        elsif ($Value =~ /^(\d+(\.\d+)?)M$/i) {
                return $1*1024*1024;
        }
        elsif ($Value =~ /^(\d+(\.\d+)?)G$/i) {
                return $1*1024*1024*1024;
        }
        elsif ($Value =~ /^(\d+(\.\d+)?)T$/i) {
                return $1*1024*1024*1024*1024;
        }
        else {
                return undef;
        }
}



# ---------------------------------------------------------
#
# CompressSize - convert bytes to KMGT
#
sub CompressSize {
        my $Value = shift;
        $Value =~ s/,//g;               # Ignore commas.
	my $Unit = ' bytes';
	foreach (('K','M','G','T')) {
		if ($Value >= 1024) {
			$Unit = $_;
			$Value /= 1024;
		}
	}
	return sprintf('%.1f%s',$Value,$Unit);
}




# ---------------------------------------------------------
#
# Cleanup - runs at end of job.
#
sub Cleanup {
	my ($ExitCode,$LogFile,$ErrorsDetected) = @_;
	if ($ExitCode && $OutputDir) {
		warn "Job failed with exit code $ExitCode -- moving $OutputDir to $OutputDir.bad\n";
		RunDangerousCmd("mv $OutputDir $OutputDir.bad");
	}
	
	return $ExitCode
}

# ---------------------------------------------------------
#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($Options{test}) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($Options{'verbose'});
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


# ---------------------------------------------------------
#
# opt_Value - generic single-value option processing
#
sub opt_Value {
	my($Name,$Value) = @_;
	$Options{$Name} = $Value;
}


# ---------------------------------------------------------
#
# opt_Array - generic multi-value optoin  processing
#
sub opt_Array {

	my($Name,$Value,undef) = @_;
	if (defined($Value) and length($Value)) {
		# Add this value to the array.
		push @{$Options{$Name}},$Value;
	}
	else {
		# Received "--opt=".  Empty this array.
		@{$Options{$Name}}=();
	}
}



# ---------------------------------------------------------
#
# opt_min_size - minimum size threshold
#
sub opt_min_size {
        my(undef,$Value) = @_;
	$Options{'min-size'} = ExpandSize($Value);
        if (!defined($Options{'min-size'})) {
                warn qq<Invalid minimum size (--min-size/-s) value: "$Value"\n>;
		$Errors++;
		$Options{'min-size'} = 0;
        }
}



# ---------------------------------------------------------
#
# opt_max_size - max size threshold
#
sub opt_max_size {
        my(undef,$Value) = @_;
	$Options{'max-size'} = ExpandSize($Value);
        if (!defined($Options{'max-size'})) {
                warn qq<Invalid maximum size (-S) value: "$Value"\n>;
		$Errors++;
		$Options{'max-size'} = 0;
        }
}


# ---------------------------------------------------------
#
# opt_h: Usage
#
sub opt_h {

	my $ExcludeTypes = join(', ',sort(keys(%TypeExclude)));
	open (PAGENATER,"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - Back-up key file-systems

Usage:  $Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] [-D output-dir] [-x mountpoint] [-C cycle-count]
	$Prog -h

=head1 $Prog - 

delete old Ubuntu kernels, because Ubuntu just keeps them forever

=head3 Usage:  
        $Prog [flag1 ...]

        $Prog -h

=head3 Flags:
	--cycles|C cycles:	Cycles: Keep this many backups and
				delete older ones.  Default is 5.
	--output-dir|D dir:	Directory: Write the backup to this
				directory.  Default is:
				/usr/local/backup/sysbackup/%m-%d.
				May contain percent variables.  %C is
				replaced by the host name.  Others are
				as interpreted by strftime.
	--exclude|-x		eXclude: Exclude this mount point.  May be
				repeated.
	--exclude-fs|-X fs	Exclude this filesystem type.  This list is
				prepopulated with $ExcludeTypes.
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from /usr/local/etc/$Prog.cfg
                                into the command line at this point.
	--remote-host|-R host	Remote: Run this on one or more remote
				hosts.  "host" may be a host name, an
				IP address, a configuration file entry
				name, or a comma or space separated list of
				any mix of these.  This option may also be
				repeated to append to the list.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
				May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel

=head3 Parameters:
        (none)

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.

=cut
Flags:
	-C cycle-count:	Cycles: Keep "cycle-count" cycles.  Default is 5.  Older
			backups will be deleted.  See cautionary note below.
	-D output-dir:	Write to "output-dir".  Default is:
			/usr/local/backup/sysbackup/%m-%d.  The output directory
			may contain % variables.  %C is replaced with the short
			host name.  Remaining % variables are interpreted by
			strftime.
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-h      :       Help: display this panel
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			the configuration file.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.

Parameters:
	(none)

Notes:
As indicated above, cycle processing implies deleting older directories.  If
cycle processing is requested with -C, then any directory in the parent is a
candidate for deletion.  For example, with the default output directory of
/usr/local/backup/sysbackup/%m-%d, any directory contained within
/usr/local/backup/sysbackup is a candidate for deletion.  Therefore, the
parent directory should only be used for holding these backups.

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
ENDUSAGE
close PAGENATER;
exit 1;
}
__END__
#
# ---------------------------------------------------------
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE	"^\s*(\S+:\s*)?tar: .* socket ignored$"
IGNORE	"^\s*(\S+:\s*)?\s*ls: (cannot access )?/usr/local/backup/\S+/\[01\]\[0-9\]-\[0-3\]\[0-9\]: No such file or directory$"
IGNORE	"^\s*(\S+:\s*)?tar: Removing leading `/' from member names$"
IGNORE	"^\s*(\S+:\s*)?tar: .*: file changed as we read it$"i
IGNORE	"^\s*(\S+:\s*)?tar: .*: file removed before we read it$"i
IGNORE	"^\s*(\S+:\s*)?tar: .*: File shrank by \d+ bytes"
IGNORE	"^\s*(\S+:\s*)?tar: .*: Cannot stat: No such file or directory$"
IGNORE	"^\s*(\S+:\s*)?tar: Error exit delayed from previous errors$"
IGNORE	"^\s*(\S+:\s*)?512 bytes \(512 B\) copied, \d+.\d+ s(econds)?, \d+(\.\d+)? [kmgKMG]B$"
IGNORE	"^\s*(\S+:\s*)?512 bytes \(512 B\) copied, \d+(\.\d+)?(e-\d+)? s(econds)?, \d+(\.\d+)? [kmgKMG]B/s$"
IGNORE	"^\s*(\S+:\s*)?recovery-info started on "
IGNORE	"^\s*(\S+:\s*)?$"
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
IGNORE	"^\s*\S+:\s+Command: "
SHOW	"^\s*(\s+:\s*)?Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE	"^\s*(\s+:\s*)?\S+:\s+Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
LOGONLY	"^\s*(\s+:\s*)?\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*(\s+:\s*)?\S+:\s+\S+ ended normally with status 0 and signal 0"
LOGONLY	"^\s*(\s+:\s*)?\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
IGNORE	"^\s*\S+:\s*Remote job exited with return code 0 and signal 0$"
#
# These are normal messages that we want to see.
#
SHOW	"^\s*Backing up "
IGNORE	"^\s*\S+:\s*?Backing up "
SHOW	"^\s*(\S+:\s*)?\S+ ended normally with status 0 and signal 0$"
SHOW	"^\s*(\S+:\s*)?(Test|Executing|Verbose|debug):"
SHOW	"^\s*(\S+:\s*)?[\d,]+ bytes \([\d.]+[KMGT]\) written to "
