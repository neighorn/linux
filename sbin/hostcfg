#! /usr/bin/perl
#
# Copyright (c) 2010, Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# Configure a host at boot-up.
#
#   This script is used by cloned systems to adjust individual settings
#   such as the host name, services to start up at boot time, and
#   specific commands to execute at boot time.  With -c it can
#   also be used on a running system to check attributes for use in
#   conditionally running commands, perhaps in crontab.
#
use strict;
use warnings;
use lib '/usr/local/lib/perl5/site_perl';
use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($Bin $Script);
use Sys::Hostname;
use Parse::BooleanLogic;
use feature 'switch';

# Initialize variables.
our $Prog=$Script;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;				# No errors so far.
our $Syslog='';				# Name of Syslog facility.  '' for none.
our $BaseDir=$Bin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile="$BaseDir/../etc/${Prog}.cfg";     # Name of config file.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
#
our $opt_c;				# -c (check) option.
our $opt_C;				# -C (config) alternate config file.
our $opt_h;				# -h (help) option.
our $opt_H;				# -H (hostname) option.
our $opt_e;				# -e (error mail) option.
our @opt_L;				# -L (library) path to *.service files
our $opt_m;				# -m (mail) option.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_t = 0;				# -t (test) option.
our $opt_v = 0;				# -v (verbose) option.
#
my $WriteNetRules = (-f '/usr/lib/udev/write_net_rules'?'/usr/lib/udev/write_net_rules':'/lib/udev/write_net_rules');



$ENV{PATH}="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='c=s C=s e=l h H=s L=l m=l O=s p=l P=l t v';

# Make a first pass through the args to see if -C is specified.
$opt_C = $ConfigFile;			# Set the default.
for (my $i=0;$i<@ARGV;$i++) {
	$_ = $ARGV[$i];
	next unless (/^-C/);
	if (/^-C=?(.*$)/) {
		$opt_C=$1;	# -C=filename
	}
	else {			# -C filename
		$opt_C=$ARGV[$i+1];
	}
}

# Load the config file.
if (-e $opt_C) {
	open(CONFIG,$opt_C) || die("Unable to open $opt_C: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/ if ($name =~ /alljobs/i);
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.
@opt_L = (
	'/usr/local/lib/systemd',
	'/lib/systemd',
) unless (@opt_L);

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.
	
# Set up our logging and output filtering.
LogOutput({
	ALWAYS_MAIL_LIST => $opt_m,
	ERROR_MAIL_LIST	=> $opt_e,
	ALWAYS_PAGE_LIST => $opt_p,
	ERROR_PAGE_LIST => $opt_P,
	NORMAL_RETURN_CODES => [0,1],
	MAIL_FILE_PREFIX => '%T',
});

# Verify the command line.
die("Excessive parameters on the command line.  See \"$Prog -h\" for usage.")
	if (@Parms > 0);

my $FH;		# Config file filehandle.
my %MACs;	# Map MAC addresses to hostnames
my %Interfaces;	# Map MAC addresses to current interface names
my %Services;	# Map services to hostnames
my @BootCmds;	# List of commands to execute.
my %Attributes;	# List of attributes (used with -c to query whether we have an attrib);
my @Tests;	# List of validation tests.
open ($FH,'<',$opt_C) || die "Unable to open $opt_C";
my $line = 0;
while (<$FH>) {
	$line++;
	s/([\s,])+/$1/g;	# Normalize spacing.
	s/^\s*//;		# Strip leading space if any.
	next if (/^#|^\s*$/);	# Skip comment-only and blank lines.
	my ($type,$conditional,$data)=split('\s+',$_,3);
	$type=lc($type);
	$type=~s/:$//;					# Strip optional trailing colon.
	$data =~ s/#.*$// if ($type ne 'bootcmd');	# Strip comments.
	$data =~ s/^\s*//;				# Strip leading spaces.
	$data =~ s/\s*$//;				# Strip trailing spaces.
	given($type) {
		when ('service') {$Services{$data}={line=>$line, conditional=>$conditional}; };
		when ('mac') {
			my $interface;
			($data,$interface) = split('\s++',$data);	# Split out optional data.
			$MACs{$data}="$conditional $interface";
		};
		when ('bootcmd') { push @BootCmds,"$line $conditional $data"; };
		when ('test') { push @Tests,"$line $conditional $data"; };
		when (/^(attrib|attribute)$/) { $Attributes{lc($data)}={line=>$line, conditional=>$conditional}; };
		default {
			die qq<Unrecognized record type "$type" in $opt_C line $line\n>;
		}
	}
}
close $FH;

#
# Gather our network interface names and MACs.
#
open($FH,'ifconfig -a |') || die "Unable to get MAC addresses";
my $IFaceName;
my $MAC;
while (<$FH>) {
	next if (/^\S+:\S+/);	# Ignore device aliases.
	next unless (/^(\S+)\s.*HWaddr\s+(\S+)/);
	$Interfaces{$2}=$1;		# Remember the MAC Addr and interface name.
}
close $FH;


#
# Set our host name.  We use the following sources:
#	1) -H option.
#	2) Look up the MAC address in the list supplied in the config file.
#	3) Use the currently assigned host name.
#
if (! $opt_H and ! $opt_c) {
	# Try to determine our host name.
	foreach my $MACAddr (keys(%Interfaces)) {
		if (exists($MACs{$MACAddr})) {
			$opt_H = $MACs{$MACAddr};
			$opt_H =~ s/^\s+//;	# Strip leading spaces.
			$opt_H =~ s/\s+.*$//;	# Strip trailing spaces and data.
			RunDangerousCmd("hostname $opt_H");
			last;
		}
	}
}
$opt_H=hostname unless ($opt_H);
die "Unable to determine hostname" unless ($opt_H);

#
# Are we checking services/attributes?
#
if ($opt_c) {
	die "Unknown attribute $opt_c" unless (exists($Attributes{$opt_c}) or exists($Services{$opt_c}));
	if (
		(
			exists($Attributes{$opt_c})
			and CheckCond($Attributes{$opt_c}{line},$opt_H,$Attributes{$opt_c}{conditional}) 
		)
		or 
		(	exists($Services{$opt_c})
			and CheckCond($Services{$opt_c}{line},$opt_H,$Services{$opt_c}{conditional}) 
		)
	)
	{
		print qq<$opt_H has attribute "$opt_c"\n> if ($opt_v);
		exit 0;		# We have a match.
	}
	else {
		print qq<$opt_H does not have attribute "$opt_c"\n> if ($opt_v);
		exit 1;		# No match.
	}
}

# Set /etc/HOSTNAME if present.
if (-f '/etc/HOSTNAME') {
	open ($FH,'<','/etc/HOSTNAME') || die "Unable to open /etc/HOSTNAME for reading: $!";
	my @lines=<$FH>;
	close $FH;
	open ($FH,'>','/etc/HOSTNAME') || die "Unable to open /etc/HOSTNAME for writing: $!"
		unless ($opt_t);
	foreach my $line (@lines) {
		chomp $line;
		given ($line) {
			when (/^\S+\./)	{
				if ($opt_H =~ /\./) {
					# We have a new, FQDN.  Use it all.
					$line = "$opt_H";
				}
				else {
					# Change first node in host.domain.domain.
					$line =~ s/^([^.])+/${opt_H}/;
				}
			}
			when (/^[^#.]+$/) {
				# Just the host name.  Replace it completely.
				$line = "$opt_H";
			}
			default	{;}					# Don't know what this is.  Leave as-is.
		}
		if ($opt_t) {
			print "Test: would have written to /etc/HOSTNAME: $line\n";
		}
		else {
			print $FH "$line\n";
		}
	}
	close $FH;
}


#
# If desired, set the interface names based on the host name.
#
my $DeleteFlag=1;	# Delete the old rules if we get an update.
foreach my $MACAddr (sort(keys(%Interfaces))) {
	if (exists($MACs{$MACAddr})) {
		my($hostname,$NewName) = split(/\s+/,$MACs{$MACAddr},2);
		next unless ($hostname eq $opt_H);
		$ENV{MATCHADDR} = lc($MACAddr);
		$ENV{MATCHIFTYPE} = '1';
		$ENV{INTERFACE} = $Interfaces{$MACAddr};
		$ENV{INTERFACE_NAME} = $NewName;
		$ENV{COMMENT} = "File rewritten by $Prog";
		if ($DeleteFlag) {
			$DeleteFlag = 0;	# Only do this for the first one.
			RunDangerousCmd("rm /etc/udev/rules.d/*-persistent-net.rules");
		}
		my $Status = RunDangerousCmd($WriteNetRules);
	}
}


#
# Set services on or off based on the host name.
#
foreach (sort(keys(%Services))) {
	if (CheckCond($Services{$_}{line},$opt_H,$Services{$_}{conditional})) {
		SetService($_,'on');
		#$ExitCode = ($Status != 0?8:$ExitCode);
	}
	else {
		SetService($_,'off');
		#$ExitCode = ($Status != 0?8:$ExitCode);
	}
}

#
# Run validation tests, if any.
#
foreach (@Tests) {
	my($Line,$Conditionals,$ExpResult) = split(/\s+/,$_,3);
	given (lc($ExpResult)) {
		when (/^(false|0)$/) { $ExpResult = 0;};
		when (/^(true|1)$/) { $ExpResult = 1;};
		default {
			warn qq<Unexpected expected result "$ExpResult" on line $Line -- treating as false\n.>;
			$ExpResult = 0;
		}
	}
	my $Result = CheckCond($line,$opt_H,$Conditionals);
	if ($Result != $ExpResult) {
		warn qq<Validation test on $Line failed: Expected=$ExpResult, Actual=$Result>;
		$Errors++;
	}
}
die "$Errors error(s) detected during validation testing.  Aborting" if ($Errors);

#
# Prepare for and run boot commands.
#

#   Define the EDITFILE shell function.
my $EditFile=<<'ENDEDIT';
	function EDITFILE {
		SedCmd=$1
		shift
		for file in $@
	 	do
			cp -p $file $file.tmp &&
			sed "$SedCmd" < $file.tmp > $file &&
			rm $file.tmp
		done
	}
ENDEDIT

#    Run the boot commands.
foreach (@BootCmds) {
	my($line,$hostlist,$command) = split(/\s+/,$_,3);
	if (CheckCond($line,$opt_H,$hostlist)) {
		my $VerboseLevel = 1;
		$command =~ s/%HOST/$opt_H/g;	# %HOST to host name.
		if ($command =~ /EDITFILE/) {
			print "Executing: $command\n" if ($opt_v > 0 and $opt_v < 2);
			print "Test: $command\n" if ($opt_t > 0 and $opt_t < 2);
			$command = "$EditFile $command";
			$VerboseLevel = 2;
		}
		my $Status = RunDangerousCmd($command,$VerboseLevel);
		$ExitCode = ($Status != 0?8:$ExitCode);
	}
}

if ($ExitCode) {
	warn "$Prog failed.\n";
}
else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


#
# CheckCond - see if this host matches this list, directly or indirectly.
#
sub CheckCond {

	#
	# Set up our logic parser
	#
	our $Parser;
	$Parser = Parse::BooleanLogic->new (operators => ['&','|'])
		unless (defined($Parser));


	my($CheckLine,$CheckHost,$CheckConditional) = @_;

	#
	# Parse the conditional line.
	#
	my $parse_tree = $Parser->as_array(
		$CheckConditional,
		error_cb => sub {warn "Invalid conditional list on line $CheckLine -- ignored\n";}
	);
	return 0 if (!defined($parse_tree));		# Syntax error.

	#
	# Evaluate the conditionals.
	#
	print "Checking: Line: $CheckLine, Host: $CheckHost, Conditional: $CheckConditional\n"
		if ($opt_t > 1 or $opt_v > 1);
	my $Result = $Parser->solve($parse_tree,\&EvaluateConditional,$CheckLine,$CheckHost,$CheckConditional);
	print "\tResult: " . ($Result?"true":"false") . "\n" if ($opt_t > 1 or $opt_v > 1);
	return $Result;
}

#
# Evaluate an operand for truth or falseness.
#    This is mostly just a wrapper, to support easier diagnostics when using -tt or -vv.
#
sub EvaluateConditional {
	my($Hash,$CheckLine, $CheckHost, $CheckConditional) = @_;
	my $Conditional = $Hash->{operand};
	my $Result = EvaluateConditionalSub($CheckLine, $CheckHost, $Conditional);
	print "	Checking: Test: $Conditional, Result: " . ($Result?"true":"false") . "\n"
		if ($opt_t > 2 or $opt_v > 2);
	return $Result;
}


#
# Evalueate and operand for truth or falseness.
#    This is where the evaluation is done.
#
sub EvaluateConditionalSub {

	my($CheckLine, $CheckHost, $Conditional) = @_;

	# Handle simple cases.
	return 1 if ($Conditional eq '*');	# * is always true.
	return 0 if ($Conditional eq '-');	# - is always false.

	# Assume we're checking the host name unless otherwise specified.
	$Conditional="host=$Conditional" unless ($Conditional =~ /=/);

	if ($Conditional !~ /^\s*(\S+?)\s*(!=|==|=)\s*(\S+)\s*$/) {
		warn qq<Invalid conditional "$Conditional" in $opt_C line $CheckLine -- ignored.\n>;
		next;
	}

	my($Type,$Operand,$ValueList) = ($1, $2, $3);
	$Type = uc($Type);			# Normalize case.
	$Operand='==' if ($Operand eq '=');	# Normalize = to ==
	$Operand='!=' if ($Operand eq '<>');	# Normalize <> to !=
	given ($Type) {
		when ('HOST') {
			return 1 if ($Operand eq '==' and ",$ValueList," =~ /,$CheckHost,/);
			return 1 if ($Operand eq '!=' and ",$ValueList," !~ /,$CheckHost,/);
		}
		when (/^ATTRIB(UTE)?$/) {
			foreach my $Value (split(',',$ValueList)) {
				if (!exists($Attributes{$Value})) {
					print "debug: can't find $Value in " . join(', ', keys(%Attributes)) . "<\n";
					# No such attribute.
					warn qq<Unknown attribute "$Value" in $opt_C line $CheckLine -- ignored\n>;
					next;
				}
				return 1 if ($Operand eq '==' and ",$Attributes{$Value}{conditional}," =~ /,$CheckHost,/);
				return 1 if ($Operand eq '!=' and ",$Attributes{$Value}{conditional}," !~ /,$CheckHost,/);
			}
			return 0;	# Does not match.
		}
		when ('SERVICE') {
			foreach my $Value (split(',',$ValueList)) {
				if (!exists($Services{$Value})) {
					# No such attribute.
					warn qq<Unknown service "$Value" in $opt_C line $CheckLine -- ignored\n>;
					next;
				}
				return 1 if ($Operand eq '==' and ",$Services{$Value}{conditional}," =~ /,$CheckHost,/);
				return 1 if ($Operand eq '!=' and ",$Services{$Value}{conditional}," !~ /,$CheckHost,/);
			}
			return 0;	# Does not match.
		}
		default {
			warn qq<Unknown comparison type "$Type" in $opt_C line $CheckLine -- ignored.\n>;
			return 0;
		}
	}
	return 0;		# Should never get here.
}



#
# SetService - set a service on or off
#
sub SetService {
	my($Service,$State) = @_;
	$State=lc($State);
	print "Setting service $Service $State\n" if ($opt_v or $opt_t);
	my $SystemdFile = '';
	foreach (@opt_L) {
		print "\tChecking for $_/$Service.service\n" if ($opt_v > 1 or $opt_t > 1);
		if (-f "$_/$Service.service") {
			$SystemdFile = "$_/$Service.service";
			print "\tFound $SystemdFile\n" if ($opt_v > 1 or $opt_t > 1);
			last;
		}
	}
	my $InitFile = "/etc/init.d/$Service";
	if ($SystemdFile && -f $SystemdFile) {
		RunDangerousCmd("systemctl --system " . ($State eq 'on'?'enable':'disable') . " $SystemdFile");
	}
	elsif (-f $InitFile) {
		RunDangerousCmd("chkconfig -s $Service $State");
	}
	else {
		warn("Unable to set service $Service $State: unable to locate $SystemdFile or $InitFile");
	}
}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$VerboseLevel) = @_;
	my ($FH,$Line);
	$VerboseLevel = 1 unless (defined($VerboseLevel));
	if ($opt_t >= $VerboseLevel) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($opt_v >= $VerboseLevel);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="more" unless ($Pagenater);
	system("pod2text $Script | $Pagenater");
	exit(1);
}

=pod
=head1 $Prog - Set which services should be up or down based on the host name.

=head3 Usage:  
	$Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] 
	      [-C config] [-c condition] [-L path]

	$Prog -h

=head3 Flags:
	-c condition	Check: check "condition".  Exit with 0 if true or 1 
			if false.  See Conditions below for condition syntax.  Often
			used in crontab to only run jobs on certain hosts based
			on their current roles.
	-C config:	Config: use "config" instead of the default config file
			(/usr/local/etc/hostcfg.cfg).
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-L path:	Library: path to the library of *.service files.  This
			parameter may be repeated to list multiple paths. The
			default paths are: /usr/local/lib/systemd, /lib/systemd.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.  May be
			repeated (-tt, -ttt) to increase verbosity.
	-v	:	Verbose: echo commands before running them.  May be
			repeated (-vv, -vvv) to increase verbosity.
			or detailed condition results (-vvv).
	-h      :       Help: display this panel

=head3 Parameters:
	(none)

=head3 Conditions (-c, config file)
    Conditionals may be:
	 *             		always true
	 -             		always false
        list      		same as HOST==list
        HOST==list		true if host name is in list
	HOST!=list		true if host name is not in list
        ATTRIB[UTE]==list	true if host has one of the attributes in the list
        ATTRIB[UTE]!=list	true if host does not have any of the
				attributes in the list
        SERVICE==list		true if host provides one of the services in the
				list
        SERVICE!=list		true if host does not provide any of the services
				in the list

    Notes about conditionals:
	1)   "list" may be a single name or a comma-separated list
        2)   = is an alias for ==
        3)   <> is an alias for !=
	4)   When using -c, the condition string may need to be quoted to avoid
             unexpected shell processing of special characters.
	5)   Conditionals may be combined with & and | and the order of evaluation
	     controlled using parentheses as in:

		host=SVR1,SVR2&(attrib=firewall|service=apache2)

        which says "the host is SVR1 or SVR2 and the host has either the firewall
	attribute or starts the apache2 service


=head3 Return codes:
	0       :       Normal termination.  For -c: condition is true.
	1       :       Help panel displayed.  For -c: condition is false.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE  /^\s*$/
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    "^\s*Job ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
SHOW	"^\s*Setting service"
SHOW	"^\s*insserv:"
SHOW	"^\s*/sbin/insserv"
SHOW	"^\s*\S+ (has|does not have) attribute"
SHOW	"^\s*function EDITFILE {"
SHOW	"^\s*SedCmd="
SHOW	"^\s*shift"
SHOW	"^\s*for "
SHOW	"^\s*do"
SHOW	"^\s*cp "
SHOW	"^\s*sed "
SHOW	"^\s*ln -s"
SHOW	"^\s*rm "
SHOW	"^\s*done"
SHOW	"^\s*}"
SHOW	"^\s*EDITFILE "
SHOW	"^\s*Checking: "
SHOW	"^\s*Result: "
IGNORE	"^\s*Job ended normally"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
