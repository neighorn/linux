#!/usr/bin/perl
#
# recovery-info -- record system information that can be useful for recovery
#
use strict;
use warnings;
use Getopt::Long qw(GetOptionsFromArray :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use File::Basename;
use JobTools::LogOutput;
use JobTools::Utils qw(:Opt :Lock LoadConfigFiles RunRemote RunDangerousCmd);

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
my %OptionSpecifications;
%OptionSpecifications=(
	'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
	'always-mail|m=s'	=>	\&OptArray,
	'always-page|p=s'	=>	\&OptArray,
	'debug|d'		=>	sub {$DB::AutoTrace=1;},
	'days=n'		=>	\&OptValue,
	'error-mail|M=s'	=>	\&OptArray,
	'error-page|P=s'	=>	\&OptArray,
	'filter-file|F=s'	=>	\&OptArray,
	'help|h|?!'		=>	\&opt_h,
	'option-set|O=s'	=>	sub {OptOptionSet(name => $_[1],optspec => \%OptionSpecifications);},
	'outputdir|o=s'		=>	\&OptValue,
	'remote|R=s'		=>	sub {OptArray(@_,'allow-delete'=>1,'expand-config'=>1);},
	'test|t'		=>	\&OptFlag,
	'verbose|v'		=>	\&OptFlag,
);
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.

# ---------------------------------------------------------
#
# Load the config file.
#
LoadConfigFiles(files => \@ConfigFiles);

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file host defaults and general defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(verbose => 0);        # Initialize Options.
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	SYSLOG_FACILITY => 'user',
	VERBOSE => ($Options{verbose} >= 5? $Options{verbose}-4:0),
	FILTER_FILE => $Options{'filter-file'},
});

# ---------------------------------------------------------
#
# Verify the command line and run the job.
#
die('Excess parameters on the command line: "' . join(' ',@Parms) . "\" See \"$Prog -h\" for usage.")
	if (@Parms);

if (exists($Options{remote}) and @{$Options{remote}} > 0) {
        unshift @ARGV,$Prog;
        push @ARGV,split(/\s+/,'-F SHOWALL --always-mail= --remote= -O :remote=%HOST%');
        $Errors = RunRemote(argv => \@ARGV);
}
else {
	$Errors = RunLocally($Config{uc("host=$HostName")});
}

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {
	# ---------------------------------------------------------
	#
	# Load any host-specific options
	#
	my $HostOptions = shift;
	if ($HostOptions) {
		my @Array = quotewords(" ",0,$HostOptions);
		die "Invalid options specified\n" unless (GetOptionsFromArray(\@Array,\%Options,%OptionSpecifications));
	}

	# ---------------------------------------------------------
	#
	# Get the job lock.
	#
	my $Lock = UtilGetLock();
	exit 11 unless ($Lock);
	
	# If we're using the default output directory, perform clean up of prior
	# default directories and assign the default output directory name.
	$Options{days} = 21 unless ($Options{days} and ($Options{days} =~ /^\d+$/));
	if (!$Options{outputdir}) {
		my $Prefix="/recovery-";
		RunDangerousCmd("find $Prefix* -prune -type d -mtime +$Options{days} -exec echo Removing {} \\; -exec rm -rf {} \\;") if (glob("$Prefix*"));
		$Options{outputdir} = "$Prefix%Y%m%d";
	}
	$Options{outputdir} =~ s/%C/$HostName/g;
	$Options{outputdir}=strftime($Options{outputdir},localtime());
	if (! -d $Options{outputdir}) {
		RunDangerousCmd("mkdir $Options{outputdir}") &&
			die "Unable to create $Options{outputdir}: $!";
	}
	
	# Capture data for each disk present.
	my $FirstDisk;		# Need a valid disk name later for parted.
	my $FDISK;		# FDisk handle.
	open($FDISK, "fdisk -l 2> /dev/null | grep '^Disk /dev/' | grep -vE '/dev/(dm-|mapper|md|ram)' |") ||
		die("Unable to start fdisk process: $!\n");
	while (<$FDISK>) {
		chomp;
		s/^Disk\s*//;
		s/:\s.*$//;
		my $InputName = $_;
		$FirstDisk=$InputName unless ($FirstDisk);
		my $OutputName;
		($OutputName=$_) =~ s"^/dev/"$Options{outputdir}/";
		$OutputName .= ".sector0";
		RunDangerousCmd("mv $OutputName $OutputName.1")
			if (-f $OutputName);
		RunDangerousCmd("dd if=$InputName of=$OutputName bs=512 count=1");
		$OutputName =~ s/.sector0$/.parted/;
		RunIfPresent("parted $InputName p > $OutputName < /dev/null");
		$OutputName =~ s"\.parted$"";	# Two steps make sure we don't ...
		$OutputName .= ".info";		# ... fail and overwrite sector0 file.
		RunIfPresent("smartctl -i $InputName > $OutputName");
		my @partitions = glob("$InputName*");
		foreach my $partition (@partitions) {
			($OutputName = "${partition}.mdadm") =~ s"^/dev/"$Options{outputdir}/";
			RunIfPresent("mdadm --examine $partition > $OutputName");
		}
	}
	close $FDISK;
	
	# Document partition maps.  Note that fdisk and sfdisk work for all disks
	# if no specific disk is named.
	RunDangerousCmd("fdisk -l > $Options{outputdir}/fdisk.out");
	RunIfPresent("sfdisk -l -d > $Options{outputdir}/sfdisk.out");
	RunIfPresent("(lsscsi -H; lsscsi -d) > $Options{outputdir}/lsscsi.out");
	
	# Document the current mounts and sizes.
	RunDangerousCmd("df -hl > $Options{outputdir}/df.out");
	RunDangerousCmd("mount > $Options{outputdir}/mount.out");
	
	# Capture installed packages.
	RunIfPresent("rpm -q -a | sort > $Options{outputdir}/rpm.out");
	RunIfPresent("yum list installed > $Options{outputdir}/yum.out");
	RunIfPresent("dpkg -l | sort > $Options{outputdir}/dpkg.out");
	RunIfPresent(qq[dpkg-query --show | awk '{printf "%-50s %s\\n", \$1, \$2};' | sort > $Options{outputdir}/dpkg-query.out]);
	
	# Capture the normal security tables.
	RunIfPresent("iptables -nvL > $Options{outputdir}/iptables.out");
	
	# Capture swap space information.
	RunIfPresent("swapon -s > $Options{outputdir}/swapon.out");
	
	# Capture lots of system facts, if we can.
	RunIfPresent("facter > $Options{outputdir}/facter.out");
	
	# Capture lots of system facts, if we can.
	RunIfPresent("getconf -a > $Options{outputdir}/getconf.out");
	
	# Capture LVM configuration information.
	my $Status = system('which vgdsiplay > /dev/null 2>&1');
	if (($Status == 0) && (`vgdisplay 2>&1` !~ /(No such file or directory|No entry)/)) {
		RunIfPresent("lvm vgcfgbackup -f $Options{outputdir}/vg-%s.out");
		RunIfPresent("pvdisplay -m > $Options{outputdir}/pvdisplay.out");
		RunIfPresent("vgdisplay > $Options{outputdir}/vgdisplay.out");
		RunIfPresent("lvdisplay > $Options{outputdir}/lvdisplay.out");
	}
	
	# Capture network configuration.
	RunDangerousCmd("ifconfig -a > $Options{outputdir}/ifconfig.out");
	RunDangerousCmd("netstat -nr > $Options{outputdir}/netstat-nr.out");
	RunDangerousCmd("netstat -pln > $Options{outputdir}/netstat-pln.out");
	
	# Capture MD and DRBD configuration.
	RunDangerousCmd("cp /proc/mdstat $Options{outputdir}/mdstat.out") if (-e "/proc/mdstat");
	RunDangerousCmd("cp /proc/drbd $Options{outputdir}/drbd.out") if (-e "/proc/drbd");
	
	# Capture hardware information.
	RunIfPresent("dmidecode > $Options{outputdir}/dmidecode.out");
	RunIfPresent("lshw > $Options{outputdir}/lshw.out");
	
	# Document Adaptec configuration
	if (-x '/usr/StorMan/arcconf') {
		my $Count = 0;
		until ($?) {
			$Count++;
			RunDangerousCmd("echo '-------- Controller $Count --------' >> $Options{outputdir}/arcconf.out");
			RunDangerousCmd("/usr/StorMan/arcconf getconfig $Count >> $Options{outputdir}/arcconf.out");
		}
	}

	# ---------------------------------------------------------
	#
	# Release the job lock.
	#
	UtilReleaseLock($Lock);

	return 0;

}



sub RunIfPresent {

	my $Cmd = (split(/\s+/,$_[0]))[0];
	$Cmd =~ s/^\(//g;
	my $Status = system("which $Cmd > /dev/null 2>&1");
	print "Verbose: which $Cmd returned $Status\n"
		if ($Options{verbose} >= 3);
	RunDangerousCmd(join(' ',@_)) if ($Status == 0);
}
	
=pod

=head1 %Prog - Document system configuration to aid in future recoveries.

=head3 Usage:  
        %Prog [flag1 ...]

        %Prog -h

=head3 Options:
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
	--days=n		Days: if --outputdir is not specified,
				the default directory will be used, and
				any prior versions older than n days
				will be deleted.
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --option-set|-O config: Insert the "config" configuration options
                                from /usr/local/etc/%Prog.cfg
                                into the command line at this point.
	--outputdir|-o dir:	Output directory: the name of the directory
				to which the output files should be written.
				%C is replaced with the host (computer) name
				and any remaining %x variables are processed
				by strftime.  The directory will be created
				if it doesn't exist.

				If not specified, the default output
				directory is /recovery-%Y%m%d.  In this case
				an automatic clean-up routine will also delete
				prior /recovery-* folders older than X days,
				where X is the value from the --days option.
	--remote|-R host	Remote: Run this on one or more remote
				hosts.  "host" may be a host name, an
				IP address, a configuration file entry
				name, or a comma or space separated list of
				any mix of these.  This option may also be
				repeated to append to the list.  Host names
				preceeded by ! are removed from the list.
				This is primarily to allow a configuration
				file list to be included, but some of the
				hosts in the list to subsequently be excluded.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
				May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel

=head3 Parameters:
        (none)

=head3 Configuration files

Configuration data may be loaded from the configuration files.  These files
form key-value pairs that $Prog may reference.  The syntax of the file is:

        name: value

"name" must begin in column 1, and is case-insensitive.  Lines beginning
with white-space are treated as continuations of the previous line.  Blank
lines or lines beginning with # are ignored.

Several "names" are reserved, as follows:

=over

=item *
Alljobs: any value listed here is prepended to the command line before
command line processing begins.  This permits default options to be
set.

=item *
Defaultjob: any value listed here is used as the command line if no
command line options are specified.

=item *
Include: any value here is treated as another configuration file, which
is loaded immediately.

=back

=head3 Return codes:
        0       :       Normal termination
        1       :       Help panel displayed.
        2       :       Invalid or unrecognized command line options.
        3       :       Invalid or unrecognized command line option value.
        4       :       Incorrect command line parameters.
        5       :       Unexpected message found in output.


=head3 Notes:

=cut

__END__
#
# ---------------------------------------------------------
# See LogOutput.pm for an explanation of output filtering.
IGNORE	"^\s*(\S+:\s*)?$"
IGNORE	"^\s*(\S+:\s*)?\S+:\s+Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
IGNORE	"^\s*\S+:\s*\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*\S+:\s*\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
IGNORE	"^\s*\S+:\s*\S+:\s+\S+ ended normally with status 0 and signal 0"
IGNORE	"^\s*\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s+Command: "
LOGONLY "^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY "^\s*Command: "
SHOW	"^\s*(\S+:\s*)?(Test|Executing|Verbose|debug):"
SHOW	"^\s*(\S+:\s*)?Starting \S+ at \d+:\d+:\d+ on \S+, \d\d\d\d-\d\d-\d\d...\s*$"
SHOW	"^\s*\S+ ended normally with status 0 and signal 0$"
SHOW	"^\s*\S+ ended on \S+, \d\d\d\d-\d\d-\d\d at \d\d:\d\d:\d\d"
SHOW	"^\s*\S+:\s*Remote job ended at ..:..:.., return code =   0, signal =   0, run time = "
IGNORE	/^\s*$/
IGNORE	"^\s*Disk /dev/md\d+ doesn't contain a valid partition table$"
IGNORE	"^\s*1\+0 records (in|out)\s*$"
IGNORE	"^\s*Removing /"
IGNORE	"^\s*find: .*: No such file or directory$"
IGNORE	/^\s*Volume group "\S+" successfully backed up.$/
IGNORE	"^\s*No volume groups found$"
IGNORE	/^\s*File descriptor \d+ left open$/
IGNORE	"^\s*mdadm: \S+ has been started with \d+ drives.$"
#
# Ignore some yum lock errors - believe this just delays execution until the lock is released.
IGNORE	"^\s*Another app is currently holding the yum lock; waiting for it to exit...$"
IGNORE	"^\s*The other application is: "
IGNORE	"^\s*Memory :  \d+ M RSS \( \d+ MB VSZ\)$"
IGNORE	"^\s*Started: ... ... .. ..:..:.. .... - \S+ ago$"
IGNORE	"^\s*State  : Running, pid: \d+$"
SHOW	"^\S+ started on \S+ on \d\d/\d\d/\d\d\d\d at \d\d:\d\d:\d\d$"
IGNORE	"^\s*512 bytes (\(512 B\)\s*)?copied,"
SHOW	/^Not found:/
