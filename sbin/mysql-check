#!/usr/bin/perl
#
# Run local or remote MySQL integrity checks.
#
use strict;
use warnings;
use LogOutput;
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use File::Basename;
use FindBin qw($Bin $Script);
use LogOutput;
use JobTools::Utils qw(:Opt :Lock LoadConfigFiles RunRemote RunDangerousCmd);

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
my $JobLockFile;		# Name of our lock file.
my $JOBLOCKFH;			# Lock file handle.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.
JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
my %OptionSpecifications;
%OptionSpecifications=(
		'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
		'always-mail|m=s'	=>	\&OptArray,
		'always-page|p=s'	=>	\&OptArray,
		'cancel'		=>	\&OptValue,
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'error-mail|M=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptArray,
		'help|h|?!'		=>	\&opt_h,
                'host=s'                =>      \&OptValue,
		'remote|R=s'		=>	sub { OptArray(@_,'allow-delete'=>1,'expand-config'=>1);},
		'subject=s'		=>	\&OptValue,
		'username|user|U=s'	=>	\&OptValue,
                'option-set|O=s'        =>      sub { OptOptionSet(name => $_[1], optspec => \%OptionSpecifications); },
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
		'remote-max=n'		=>	\&OptValue,
);
#
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.
# ---------------------------------------------------------
#
# Load the config file.
#
LoadConfigFiles(files => \@ConfigFiles);

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file host defaults and general defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(verbose => 0);        # Initialize Options.
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

$Options{subject}='%* %m/%d %C %N %E %*%*%*' unless (exists($Options{subject}) and $Options{subject});
$Options{username}=$ENV{LOGNAME} || $ENV{USER} || getpwuid($<)
	unless ($Options{username}); # Default to our own user name.
$Options{host} = '' unless (exists($Options{host}) and $Options{host});

# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	SYSLOG_FACILITY => 'user',
	VERBOSE => ($Options{verbose} >= 5? $Options{verbose}-4:0),
	FILTER_FILE => $Options{'filter-file'},
	MAIL_SUBJECT => $Options{subject},
});

# ---------------------------------------------------------
#
# Run the job.
#
if (exists($Options{'remote'}) and @{$Options{'remote'}} > 0) {
        unshift @ARGV,$Prog;
        push @ARGV,split(/\s+/,'-F SHOWALL --always-mail= --remote= -O :remote=%HOST%');
        $Errors = RunRemote(argv => \@ARGV);
}
else {
	$Errors = RunLocally(@Parms);
}


if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {

	my @Parms = @_;
	# ---------------------------------------------------------
	#
	# Load any host-specific options
	#
	my $HostOptions = $Config{uc("host=$HostName")};
	if ($HostOptions) {
		die "Invalid options specified\n" unless (GetOptionsFromString($HostOptions,%OptionSpecifications));
	}

	# ---------------------------------------------------------
	#
	# Get the job lock.
	#
	my $Lock = UtilGetLock();
	exit 11 unless ($Lock);
	
	my $ExitCode = RunDangerousCmd(
		  '/usr/bin/mysqlcheck '
		. '--all-databases '
		. ($Options{username}?"-u $Options{username} ":'')
		. ($Options{host}?"--host $Options{host} ":'')
	);

	# ---------------------------------------------------------
	#
	# Release the job lock.
	#
	UtilReleaseLock($Lock);
	
	return 0;
}


# ---------------------------------------------------------
#
# opt_h: Usage
#
sub opt_h {

	use FindBin qw($RealScript);

	system(qq<pod2text $Bin/$Script | more>);
exit 1;
}

=pod

=head1 mysql-check: check MySQL table integrity on local or remote machines

=head3 Usage:  
	mysql-check [options] 

	mysql-check -h

=head3 Flags:
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Process the "config" configuration options
                                from /usr/local/etc/%Prog.cfg
                                into the command line at this point. "config" 
				may be prefixed with a colon (":") to 
				indicate it is optional.  Otherwise the
				configuration set is considered mandatory,
				and a warning is issued if it is not found
				in the configuration files.
	--username|-U username: User: log in using "username".
        --host host:		Host:  Run mysqlcheck on the local machine
				with the --host parameter to connect to 
                                a MySQL server elsewhere on the network.
				This option requires that MySQL be installed
                                on the local machine to provide the mysqlcheck
                                binary.  See also --remote, which supports
                                checking multiple hosts, and does not require
                                a local MySQL installation as it uses the 
                                remote systems' software to initiate the
                                check.
        --remote|-R host:       Remote: Run this on one or more remote
                                hosts.  "host" may be a host name, an
                                IP address, a configuration file entry
                                name, or a comma or space separated list of
                                any mix of these.  This option may also be
                                repeated to append to the list.  This option
				causes the script to ssh to the specified
				host and run the check locally from that
                                machine.  See also --host.
        --filter|-F filter:	Filter: use the specified filter file.  The
				default is to use __DATA__, the internal
				filter file.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
                                May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel
	--subject text:s	Subject: set the subject e-mail to 'text'.  Percent
				variables are processed per LogOutput.pm.
	--remote-max=n		Remote maximum: set the maximum number of
				remote jobs to run in parallel when using --remote
				with multiple remote hosts.

=head3 Parameters:              (none)

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.

IGNORE  /^\s*\s*(\S+:\s*)?$/ 
IGNORE  "^\s*(\S+:\s+)?.*\s+OK$" 

# These are normal messages that we want to see in the e-mail log only. 
# 
LOGONLY "^\S+ started on \S+ on \S+, \d+-\d+-\d+" 
LOGONLY /^Command: / 
IGNORE "^\s*(\S+:\s+)?\S+ started on \S+ on \S+, \d+-\d+-\d+" 
IGNORE /^\s*(\S+:\s+)?Command: / 
# 
# These are normal messages that we want to see. 
# 
SHOW    "^\s*(\S+:\s+)?\S+ ended normally with status 0 and signal 0$" 
IGNORE	"^\s*\S+:\s+\S+ ended on \S+, \d+-\d+-\d+ at \d\d:\d\d:\d\d - run time:"
SHOW    "^\s*(\S+:\s+)?Test:" 
SHOW    "^\s*(\S+:\s+)?Executing:" 
SHOW    "^\s*(\S+:\s+)?Verbose" 
SHOW    "^\s*(\S+:\s+)?debug:" 
# The log files always throw an error about locks.  mysqlcheck should be smarter. 
# Always show the log names, so that if another error comes up we know which 
# table it applies to. 
IGNORE  "^\s*(\S+:\s+)?Error\s*: You can't use locks with log tables.$" 
IGNORE  "^\s*\S+:\s*Remote job ended at ..:..:.., return code =   0, signal =   0, run time = "
SHOW    "^\s*(\S+:\s+)?mysql.(slow|general)_log\s*$" 
#
