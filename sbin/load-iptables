#! /usr/bin/perl
#
# Load IPTables - because I could never get iptables-restore to work.
#

use strict;
use warnings;
use Sys::Hostname;
use POSIX qw(strftime);

require "getopts.pl";

our $opt_q;
our $opt_v = 0;

Getopts("qv");

my $Errors=0;

my $hostname = hostname;
my $FH;
if (-f "/usr/local/etc/iptables.$hostname") {
        open($FH,"/usr/local/etc/iptables.$hostname") ||
                die("Unable to open /usr/local/etc/iptables.$hostname : $!");
        print "Loading iptables.$hostname\n" unless ($opt_q);
}
elsif (-f "/usr/local/etc/iptables.dat") {
        open($FH,"/usr/local/etc/iptables.dat") ||
                die("Unable to open /usr/local/etc/iptables.dat : $!");
        print "Loading iptables.dat\n" unless ($opt_q);
}
else {
        warn "Unable to find iptables.$hostname or iptables.dat";
	$Errors++;
}

my $Line=0;
system("ifrename") if (-e "/etc/iftab");
system("ifrename") if (-e "/etc/mactab");

if (!$Errors) {
	while (<$FH>) {
		$Line++;		# Increment the line counter
		if (/^ *#/) {
			# Comment.  Display if in verbose mode, then skip.
			printf "%-8s Comment line @  %3d: %s",
				strftime("%H:%M:%S",localtime()),$Line,$_
					if ($opt_v);
			next;
		}
		next if (/^ *$/);	# Skip blank lines
		s/[^\\]#.*$//;		# Strip trailing comments.
		s/\\#/#/g;		# Convert escaped # to regular #.
		print strftime("%H:%M:%S Processing line $Line: $_",localtime()) if ($opt_v);
		if (/^\s*verify\s/i) {
			# Verify interfaces are assigned right.
			my(undef,$interface,@desired_mac)=split(/\s+/,$_);
			my $actual_mac =`ifconfig $interface|grep -i HWaddr`;
			$actual_mac =~ s/.*HWaddr\s+(\S+)\s*$/\U$1/i;
			chomp $actual_mac;
			my $Found = 0;
			if ($actual_mac =~ /^\s*$/) {
				# OK if this interface isn't present, as it doesn't present a
				# security exposure.  Used for iptables.dat that is shared
				# between systems that have different numbers of interfaces.
				$Found = 1;
			}
			else {
				foreach (@desired_mac) {
					s/^\s*(\S+)\s*/\U$1/;
					if ($_ eq $actual_mac) {
						$Found = 1;
						last;
					}
				}
			}
			if (!$Found) {
				print "$interface has a MAC of $actual_mac instead of "
					. join(', ',@desired_mac)
					. "\n";
				$Errors++;
			}
		} elsif (/^\s*ifhost\s+(\S+)\s+(.*)$/i) {
			# Only run this on particular hosts.
			if ($hostname eq $1 and system($2)) {
				print STDERR "\tError detected on line $Line\n";
				$Errors++;
			}
		} elsif (system($_)) {
			print STDERR "\tError detected on line $Line\n";
			$Errors++;
		}
	}
	close $FH;
}

if ($Errors) {
	# Errors detected.
	warn "\n\t$Errors errors detected.  Going into lockdown mode.\n";

	#
	# Go into lockdown mode.
	#
	my @LockDownCmds = (
		"iptables -P INPUT DROP",
		"iptables -P OUTPUT DROP",
		"iptables -P FORWARD DROP",
		"iptables -F",
		"--SECURE--",
		"iptables -A INPUT       -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT",
		"iptables -A INPUT       -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT",
		"iptables -A INPUT       -p icmp -m state --state ESTABLISHED,RELATED -j ACCEPT",
		"iptables -A INPUT -i lo -j ACCEPT",
		"iptables -A INPUT -s 50.43.121.70 -p icmp -j ACCEPT",
		"iptables -A INPUT -s 50.43.121.69 -p icmp -j ACCEPT",
		"iptables -A INPUT -s 50.43.121.70 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -s 50.43.121.69 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -s 172.27.2.1 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -s 172.27.2.1 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -s 172.27.2.209 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -s 172.27.2.210 -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -j DROP",
		"iptables -A OUTPUT -o lo -j ACCEPT",
		"iptables -A OUTPUT -d 50.43.121.70 -j ACCEPT",
		"iptables -A OUTPUT -d 50.43.121.69 -j ACCEPT",
		"iptables -A OUTPUT -d 172.27.2.209 -j ACCEPT",
		"iptables -A OUTPUT -d 172.27.2.210 -j ACCEPT",
		"iptables -A OUTPUT -j DROP",
	);
	my $Secure = 0;
	foreach (@LockDownCmds) {
		if (/^--SECURE--$/) {
			# Found our marker.  We're basically secure now.
			$Secure=1;
			print "System is secure.\n";
			next;
		} else {
			# Found a command run it and see how it went.
			print "Running $_\n";
			my $Status = system($_);
			if ($Status) {
				# Command failed.  If secure just warn.
				warn "Command '$_' failed with status $Status: $!\n";
				if ($Secure) {
					# Secure.  Just warn.
				} else {
					# Critical cmd failed.  Go to superlockdown.
					warn "Going into super lockdown mode.\n";
					foreach my $Count (0..99) {
						system("ifconfig eth$Count down 2> /dev/null");
						system("ifconfig tun$Count down 2> /dev/null");
						system("ifconfig br$Count down 2> /dev/null");
					}
					system("/etc/init.d/network stop");
					system("ifconfig -a");
					last;
				}
			}
		}
	}
		
	exit(8);
} else {
	# No errors detected.
	if (! $opt_q) {print "\n\tNo errors detected.\n"};
	exit(0);
}
exit $Errors;
