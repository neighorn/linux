#! /usr/bin/perl
#
# Load IPTables - because I could never get iptables-restore to work.
#	Attempts to load rules from:
#		1) /usr/local/etc/iptables.$hostname
#	   else 2) /usr/local/etc/iptables.dat
#          else 3) Hard-coded emergency rules (port 22 and 2022 only)
#          else 4) Shut down all interfaces
#

use strict;
use warnings;
use Sys::Hostname;
use POSIX qw(strftime);
use Sys::Syslog;

my $opt_q = 0;
my $opt_v = 0;
my $hostname = hostname;
my @InputFiles = (
	"/usr/local/etc/iptables.$hostname",
	'/usr/local/etc/iptables.dat',
);
my $CurDate=strftime("%Y/%m/%d",localtime());

# Crude command-line parsing.  Don't want to depend on too many 
# modules, and don't need much.
foreach my $arg (@ARGV) {
	if ($arg =~ /^-(.*)$/) {
		$arg = $1;	# It's an option.  Strip dash.
	}
	else {
		warn qq(Unexpected parameter "$arg" -- ignored.\n);
		next;
	}
	while ($arg =~ /^(.)(.*)$/) {
		$arg = "$2";	#Put rest back for more processing.
		if ($1 eq 'q') {
			$opt_q++;
		}
		elsif ($1 eq 'v') {
			$opt_v++;
		}
		else {
			warn qq(Unknown option "$1" -- ignored\n);
		}
	}
}

my $Errors=0;
openlog("load-iptables","nofatal,pid","user");

my $FH;
foreach my $name (@InputFiles) {
	if (-f $name) {
        	if (open($FH,'<',$name)) {
			syslog("info","Loading $name");
        		print "Loading $name\n" unless ($opt_q);
			last;
		}
			my $error = $!;
                	Error("Unable to open $name : $error");
		}
}
if (!defined($FH)) {
	Error('No configuration file found.  No tables loaded.');
	$Errors++;
}

my $Line=0;
system("ifrename") if (-e "/etc/iftab");
system("ifrename") if (-e "/etc/mactab");

if (!$Errors) {
	while (<$FH>) {
		$Line++;		# Increment the line counter
		if (/^ *#/) {
			# Comment.  Display if in verbose mode, then skip.
			printf "%-8s Comment line @  %3d: %s",
				strftime("%H:%M:%S",localtime()),$Line,$_
					if ($opt_v);
			next;
		}
		next if (/^ *$/);	# Skip blank lines
		s/[^\\]#.*$//;		# Strip trailing comments.
		s/\\#/#/g;		# Convert escaped # to regular #.
		print strftime("%H:%M:%S Processing line $Line: $_",localtime()) if ($opt_v);
		if (/^\s*verify\s/i) {
			# Verify interfaces are assigned right.
			my(undef,$interface,@desired_mac)=split(/\s+/,$_);
			my $actual_mac =`ifconfig $interface|grep -i HWaddr`;
			$actual_mac =~ s/.*HWaddr\s+(\S+)\s*$/\U$1/i;
			chomp $actual_mac;
			my $Found = 0;
			if ($actual_mac =~ /^\s*$/) {
				# OK if this interface isn't present, as it doesn't present a
				# security exposure.  Used for iptables.dat that is shared
				# between systems that have different numbers of interfaces.
				$Found = 1;
			}
			else {
				foreach (@desired_mac) {
					s/^\s*(\S+)\s*/\U$1/;
					if ($_ eq $actual_mac) {
						$Found = 1;
						last;
					}
				}
			}
			if (!$Found) {
				print "$interface has a MAC of $actual_mac instead of "
					. join(', ',@desired_mac)
					. "\n";
				$Errors++;
			}
		} elsif (/^\s*ifhost\s+(\S+)\s+(.*)$/i) {
			# Only run this on particular hosts.
			if ($hostname eq $1 and system($2)) {
				Error("\tError detected on line $Line");
				$Errors++;
			}
		} elsif (m"^\s*ifbefore\s+(\d+)/(\d+)/(\d+)\s+(.*)$"i) {
			# Only run this before a particular date.
			my $ExpireDate=sprintf("%04d/%02d/%02d",$3,$1,$2);
			if ($CurDate lt $ExpireDate and system($4)) {
				Error("\tError detected on line $Line");
				$Errors++;
			}
		} elsif (system($_)) {
			Error("\tError detected on line $Line");
			$Errors++;
		}
	}
	close $FH;
}

if ($Errors) {
	# Errors detected.
	Error("$Errors errors detected.  Going into lockdown mode.");

	#
	# Go into lockdown mode.
	#
	my @LockDownCmds = (
		"iptables -P INPUT DROP",
		"iptables -P OUTPUT ACCEPT",
		"iptables -P FORWARD DROP",
		"iptables -F",
		"--SECURE--",
		"iptables -A INPUT       -p udp -m state --state ESTABLISHED,RELATED -j ACCEPT",
		"iptables -A INPUT       -p tcp -m state --state ESTABLISHED,RELATED -j ACCEPT",
		"iptables -A INPUT -i lo -j ACCEPT",
		"iptables -A INPUT -p tcp --dport 22 -j ACCEPT",
		"iptables -A INPUT -p tcp --dport 2022 -j ACCEPT",
		"iptables -A INPUT -j DROP",
		"iptables -A FORWARD -j DROP",
	);
	my $Secure = 0;
	foreach (@LockDownCmds) {
		if (/^--SECURE--$/) {
			# Found our marker.  We're basically secure now.
			$Secure=1;
			print "System is secure.\n";
			next;
		} else {
			# Found a command run it and see how it went.
			print "Running $_\n";
			my $Status = system($_);
			if ($Status) {
				# Command failed.  If secure just warn.
				Error("Command '$_' failed with status $Status: $!");
				if ($Secure) {
					# Secure.  Just warn.
				} else {
					# Critical cmd failed.  Go to superlockdown.
					Error("Going into super lockdown mode.");
					foreach my $Count (0..99) {
						system("ifconfig eth$Count down 2> /dev/null");
						system("ifconfig tun$Count down 2> /dev/null");
						system("ifconfig br$Count down 2> /dev/null");
					}
					system("/etc/init.d/network stop");
					system("ifconfig -a");
					last;
				}
			}
		}
	}
		
	exit(8);
} else {
	# No errors detected.
	if (! $opt_q) {print "\n\tNo errors detected.\n"};
	syslog("info","Load complete.  No errors detected.");
	exit(0);
}
exit $Errors;


sub Error {
	my $string = shift;
	print STDERR "$string\n";
	$string =~ s/%/%%/;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	syslog('err',$string);
}
