#! /bin/bash
#
# bigfiles - find the big files in a file system or directory tree.
#
# Usage: enter "bigfiles -h" or see Usage function immediately below.
#
# $Log$
#
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"



#
# Function Usage - display usage message.
#
function Usage
{

more -e >&2 <<ENDUSAGE
Usage: $Prog [-d] [-m days] [-M minsize] [directory1...]

Flags:
	-m days		:	Modification days: restrict the report to files
				modified in the last "days" days.  "days" is
				specified as in the -mtime option of the find
				command (-days is within the last "days" days,
				+days is "days" days or more, no sign indicates
				exactly "days" days).
	-M		:	Minimum: minimum size to report.  Default is
				50000 minimum bytes.
	-h		:	Help: display the usage panel
	-d		:	Diagnostics: display a diagnostic trace

Parameters:
	directory1...	:	One or more file systems or directories.
Notes:
	Since this script is typically used in response to file-system full
	conditions, $Prog will not summarize across file system boundries.

ENDUSAGE
}


#
# Mainline code
#
# Set reference information (my name for messages, usage variable).
 
prog=${0##*/}
usage="\n\tUsage: $prog [-d] \n"

# Set defaults
trace=false
list="."
minimum="50000"
ModTime=""

# Process options
while getopts :hdm:M# opt
do case $opt in
	m)	ModTime="-mtime $OPTARG";;
	M)	minimum="$OPTARG";;
	h)	clear
		Usage
		exit 1
		;;
        d)      set -xv			# Turn on a Trace for the main Program.
		echo "Tracing $Prog..."	# Identify ourselves.
                PS4='[$LINENO]: '	# Include line numbers in Trace.
                Trace=true;;		# Set flag so functions Trace, too.
	\?)	# Invalid option.
		print -u2 "\n$Prog: Unknown option \"-$OPTARG\".  " \
			"Enter \"$Prog -h\" for usage.\n"
		exit 2			# Exit with an error code.
		;;
	:)	# Option is missing parameter.
		print -u2 "\n$Prog: Option \"-$OPTARG\" requires an argument." \
			"  Enter \"$Prog -h\" for usage.\n"
		exit 3			# Exit with an error code.
		;;
        esac
done
shift $((OPTIND-1))

if [[ $# -gt 0 ]]
then
    list="$*"
fi

for subtree in $list 
do
    # Find all files in this tree
	# Extract the interesting fields (owner, size, change date, name)
	# Sort based on size (field 2)
	# Print the top 60.
    find $subtree -xdev -size "+${minimum}c" $ModTime -type f -ls | \
	sort -k 2,2nr | \
	while read trash1 trash2 trash3 trash4 owner trash6 size mon day year name
	do
		printf "%8.8s %12.0d %3.3s %2.2s %5.5s %s\n" $owner $size $mon $day $year "$name"
	done |
	head -60
done
