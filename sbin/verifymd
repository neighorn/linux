#! /usr/bin/perl
#
# Copyright (c) 2005,2009,2011 Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# VerifyMD - run MD verification on the specified meta-device(s).
#
use strict;
use warnings;
use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($Bin $Script);
use POSIX qw(strftime);

# Initialize variables.
our $Prog=$Script;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;				# No errors so far.
our $Syslog='user';			# Name of Syslog facility.  '' for none.
our $BaseDir=$Bin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile="$BaseDir";		# Deterimine the name of our config file.
$ConfigFile =~ s"/.[^/]*$"/etc/${Prog}.cfg";# 	Ditto.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
#
our $opt_h;				# -h (help) option.
our $opt_i;				# -i (ignore) option.
our $opt_e;				# -e (error mail) option.
our $opt_f;				# -f (force) option.
our $opt_m;				# -m (mail) option.
our $opt_n;				# -n (nth) only run on nth week.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_t;				# -t (test) option.
our $opt_v;				# -v (verbose) option.
our @opt_x;				# -x (exclude) option.
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='e=l f h i m=l n=s O=s p=l P=l t v x=l';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.

if ($opt_n) {
	die "Invalid value for -n ($opt_n): must be 1-5\n" unless ($opt_n =~ /^[1-5]$/);
	my $weeknum = int(((localtime())[3] + 6) / 7);
	if ($weeknum != $opt_n) {
		print "Skipping run.  Week number is $weeknum, not $opt_n\n";
		exit 0;
	}
}
	
# Set up our logging and output filtering.
LogOutput('',$Syslog,$LogFile,$opt_m,$opt_e,$opt_p,$opt_P);

# Verify the command line.
if (@Parms == 0) {
	# No parms.  Auto-generate a list.
	@Parms = split(/\s+/,`ls /dev/md?*`);
}
die("No devices found.  See \"$Prog -h\" for usage.")
	unless (@Parms > 0);

# Turn @opt_x into a hash.
my %Exclude;
foreach (@opt_x) {
	$Exclude{$_}=1;
}

foreach my $device (@Parms) {
	if ($Exclude{$device}) {
		print "$device excluded.\n";
		next;
	}
	$device =~ s"^/dev/"";
	my $SyncFile = "/sys/block/$device/md/sync_action";
	if (! -e $SyncFile ) {
		if ($opt_i) {
			print "Ignoring /dev/$device -- device does not exist.\n";
		}
		else {
			warn "/dev/$device does not exist\n";
		}
		next;
	}
	my $Status = GetStatus($SyncFile);
	if ($Status eq 'idle' or $Status eq 'check') {
		if ($Status eq 'idle') {
			system('grep -Eq "\[=*>" /proc/mdstat');
			if ($? == 0 and ! $opt_f) {
				system('cat /proc/mdstat');
				die "Aborting $Prog - another RAID is rebuilding\n";
			}
			print strftime(
				"Beginning check of /dev/$device at %T on %Y-%m-%d"
				. ($opt_t?' (test)':'')
				. "\n",
				localtime());
			;
			if (!$opt_t) {
				my $FH;
				if (open($FH,'>',$SyncFile)) {
					print $FH "check\n";
					close $FH;
				}
				else {
					warn "Unable to write to $SyncFile: $!\n";
					next;
				}
				close $FH;
			}
		}
		else {
			print "/dev/$device is already being verified.  Waiting for completion...\n";
		}
		while (($Status=GetStatus($SyncFile)) eq 'check') {
			sleep 60;
		}
		if ($Status eq 'idle') {
			print strftime(
				"Completed check of /dev/$device at %T on %Y-%m-%d\n",
				localtime());
			;
		}
		else {
			warn "Unexpected status '$Status' found in $SyncFile\n";
		}
	}
	else {
		warn "Unexpected status '$Status' found in $SyncFile - device skipped\n";
	}
}
			
if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);


#
# GetStatus - retrieve the status of a device
#
sub GetStatus {
	my $SyncFile = shift;
	my $FH;
	if (open($FH,'<',$SyncFile)) {
		my $Status = <$FH>;
		chomp $Status;
		close $FH;
		return $Status;
	} 
	else {
		warn "Unable to open $SyncFile: $!\n";
		return "unknown";
	}
}
	

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="more" unless ($Pagenater);
	system("pod2text $Bin/$Script | $Pagenater");
	exit(1);
}

=pod

=head1 $Prog - run MD device verification

=head3 Usage:  
	$Prog [-e mailid] [-i] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] device-file...

	$Prog -h

=head3 Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-f		Force: Run verify even if another RAID is resyncing
			or rebuilding.
	-h      :       Help: display this panel
	-i:		Ignore: Don't treat missing devices as errors.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-n weeknum:	weekNum: Only run on the "weeknum" (1-5) week of the 
			month.  Used to work around limitations of some crons.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-x dev	:	eXclude: exclude this md device from verifications.
			Used when excluding devices from a wildcard-
			generated list of devices.

=head3 Parameters:
	device-file:	one or more devices to process.

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE  /^\s*$/
IGNORE	"^\s*/dev/md\S+ excluded.$"
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    "^\s*Job ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
SHOW	"^\s*Beginning check of /dev/"
SHOW	"^\s*Ignoring /dev/"
SHOW	"^\s*Completed check of /dev/"
SHOW	"^\s*/dev/\S+ is already being verified.  Waiting for completion...$"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
