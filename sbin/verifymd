#!/usr/bin/perl
#
# Verify RAID consistency
#
use strict;
use warnings;
use LogOutput;
use JobTools::Utils qw(OptArray OptFlag OptValue OptOptionSet LoadConfigFiles RunRemote RunDangerousCmd);
use Getopt::Long qw(GetOptionsFromString :config gnu_compat permute bundling);
use Text::ParseWords;
use POSIX qw(strftime);
use Fcntl qw(:flock :mode :DEFAULT);
use File::Basename;
use File::Temp qw(tempdir);

# Initialize variables.
my $Prog=$0;			# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";		# Trim off the path, if present.
$ENV{PATH} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';
my @Args=@ARGV;			# Preserve orig command for ref.
my $ErrorFlag=0;		# No errors so far.
my @ConfigFiles=("/usr/local/etc/${Prog}.cfg");     # Name of config files.
my $JobLockFile;		# Name of our lock file.
my $JOBLOCKFH;			# Lock file handle.
our $Errors=0;
our %Config;
our @Parms;
our %Options;			# Options settings.

JobTools::Utils::init(config => \%Config, options => \%Options);

# Define our command-line options.  I use sub for everything, because
# GetOptions doesn't work right on a second call to it (which we need
# to do) with the conventional approach.
$DB::AutoTrace=$DB::AutoTrace;		# Suppress spurious warning.
our %OptionSpecifications;
%OptionSpecifications=(
		'<>'			=>	sub {my $Arg = shift; push @Parms,$Arg if (length($Arg));},
		'always-mail|m=s'	=>	\&OptArray,
		'always-page|p=s'	=>	\&OptArray,
		'cancel'		=>	\&OptFlag,
		'debug|d'		=>	sub {$DB::AutoTrace=1;},
		'error-mail|M=s'	=>	\&OptArray,
		'error-page|P=s'	=>	\&OptArray,
		'exclude|x=s'		=>	\&OptArray,
		'filter-file|F=s'	=>	\&OptArray,
		'help|h|?!'		=>	\&opt_h,
		'ignore-missing|i'	=>	\&OptFlag,
		'remote|R=s'		=>	sub { OptArray(@_,'allow-delete'=>1,'expand-config'=>1);},
		'subject=s'		=>	\&OptValue,
		'test|t'		=>	\&OptFlag,
		'verbose|v'		=>	\&OptFlag,
                'force|f'		=>	\&OptFlag,
                'week|n=i'		=>	\&OptValue,
                'exclude|x=s'		=>	\&OptArray,
                'remote-max=i'		=>	\&OptValue,
		'option-set|O=s'	=>	sub { OptOptionSet(name => $_[1], optspec => \%OptionSpecifications);},
);
#
our $ExitCode;

my $HostName = `hostname`;
chomp $HostName;
$HostName =~ s/\..*$//;		# Strip domain.
our $BaseDir="/usr/local/backup/$Prog";	# Set our base directory.
# ---------------------------------------------------------
#
# Load the config file.
#
foreach (@ConfigFiles) {
        LoadConfigFiles($_);
}
foreach (keys(%Config)) { s/,$//;};     # Trim off trailing commas.

# ---------------------------------------------------------
#
# Process the config file defaults if present.
#
# Use the default job if it's defined and we didn't get anything on 
# the command line.
push @ARGV,(shellwords($Config{DEFAULTJOB}))
        if (join(' ',@ARGV) =~ /^\s*(\b-[tv]+)*\s*$/ && defined($Config{DEFAULTJOB}));

# Process the config file host defaults and general defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
        if (defined($Config{'ALLJOBS'}));

# ---------------------------------------------------------
#
# Process the command line options.
#
my @ARGVSave = @ARGV;           # In case we need to reprocess the command line later.
%Options=(verbose => 0);        # Initialize Options.
die "Invalid options specified\n" unless (GetOptions(%OptionSpecifications));
@ARGV = @ARGVSave;              # Restore @ARGV for LogOutput and second GetOptions.

$Options{subject}='%* %m/%d %C %N %E %*%*%*' unless (exists($Options{subject}) and $Options{subject});

# ---------------------------------------------------------
#
# Check the week number.  Do this before we turn on logging, so we don't generate a bunch of 
# "not-this-week" e-mails.
if (exists($Options{week}) and ($Options{week} =~ /^[1-5]$/)) {
	my $weeknum = int(((localtime())[3] + 6) / 7);
	if ($weeknum != $Options{week}) {
		print "Skipping run.  Week number is $weeknum, not $Options{week}\n";
		exit 0;
	}
}


# ---------------------------------------------------------
#
# Set up our logging and output filtering.
#
LogOutput({
	ALWAYS_MAIL_LIST => $Options{'always-mail'},
	ERROR_MAIL_LIST => $Options{'error-mail'},
	ALWAYS_PAGE_LIST => $Options{'always-page'},
	ERROR_PAGE_LIST => $Options{'error-page'},
	SYSLOG_FACILITY => 'user',
	VERBOSE => ($Options{verbose} >= 5? $Options{verbose}-4:0),
	FILTER_FILE => $Options{'filter-file'},
	MAIL_SUBJECT => $Options{subject},
});

# Verify the command line.
if (exists($Options{week})) {
	die "Invalid value for -n ($Options{week}): must be 1-5\n" unless ($Options{week} =~ /^[1-5]$/);
}

if (exists($Options{'remote'}) and @{$Options{'remote'}} > 0) {
	$Errors = RunRemote(argv => [$Prog,@ARGV]);
}
else {
	$Errors = RunLocally(@Parms);
}

# ---------------------------------------------------------
#
# Release the job lock.
#
if ($JOBLOCKFH) {
        close $JOBLOCKFH;
        unlink $JobLockFile;
}


$ExitCode=$Errors?10:0;
if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}
exit($ExitCode);


# ---------------------------------------------------------
#
# RunLocally - run a sysbackup on this machine.
#
sub RunLocally {

	my @Parms = @_;
	# ---------------------------------------------------------
	#
	# Load any host-specific options
	#
	my $HostOptions = $Config{uc("host=$HostName")};
	if ($HostOptions) {
		die "Invalid options specified\n" unless (GetOptionsFromString($HostOptions,%OptionSpecifications));
	}

	# Verify the command line.
	if (@Parms == 0) {
		# No parms.  Auto-generate a list.
		my $FH;
		if (open($FH,'ls /dev/md?* |')) {
			foreach (<$FH>) {
				chomp;
				push @Parms,$_ if (m"/dev/md\d+");
			}
			close $FH;
		}
		else {
			die "Unable to auto-generate /dev/md list: $!";
		}
	}
	die("No devices found.  See \"$Prog -h\" for usage.")
		unless (@Parms > 0);
	

	# Check for cancel request
	if ($Options{cancel}) {
		my $Count = 0;
		foreach my $device (@Parms) {
			my $ShortDevice;
			($ShortDevice = $device) =~ s"/dev/"";
			my $FH;
			my $StatusFile = "/sys/block/$ShortDevice/md/sync_action";
			if (open($FH,'<',$StatusFile)) {
				my $Status = <$FH>;
				chomp $Status;
				close $FH;
				print "Verbose: $device is in $Status status\n" if ($Options{verbose});
				if ($Status eq 'check') {
					if (my $RDCStat = RunDangerousCmd("echo idle > $StatusFile") == 0) {
						print "\t$device returned to idle state\n";
						$Count++;
					}
					else {
						warn "\tUnable to set $device to idle state (return status $RDCStat)\n";
						$Errors++;
					}
				}
				elsif ($Status eq 'idle') {
					# No action required.
				}
				else {
					warn "\t$device is in $Status state - no action taken\n";
					$Errors++;
				}
			}
			else {
				warn "Unable to open $StatusFile: $!\n";
				$Errors++;
			}
		}
		print "$Count device" . ($Count == 1?'':'s') . " switched to idle state\n";
		return $Errors;
	}
					
	# Turn @Options{exclude} into a hash.
	my %Exclude;
	foreach (@{$Options{exclude}}) {
		$Exclude{$_}=1;
	}
	
	foreach my $device (@Parms) {
		if ($Exclude{$device}) {
			print "$device excluded.\n";
			next;
		}
		$device =~ s"^/dev/"";
		my $SyncFile = "/sys/block/$device/md/sync_action";
		if (! -e $SyncFile ) {
			if ($Options{'ignore-missing'}) {
				print "Ignoring /dev/$device -- device does not exist.\n";
			}
			else {
				warn "/dev/$device does not exist\n";
				$Errors++;
			}
			next;
		}
		my $Status = GetStatus($SyncFile);
		if ($Status eq 'idle' or $Status eq 'check') {
			if ($Status eq 'idle') {
				system('grep -Eq "\[=*>" /proc/mdstat');
				if ($? == 0 and ! $Options{force}) {
					warn "Aborting $Prog - another RAID is rebuilding\n";
					$Errors++;
					system('cat /proc/mdstat');
					die "\n";
				}
				print strftime(
					"Beginning check of /dev/$device at %T on %Y-%m-%d"
					. ($Options{test}?' (test)':'')
					. "\n",
					localtime());
				;
				if (!$Options{test}) {
					my $FH;
					if (open($FH,'>',$SyncFile)) {
						print $FH "check\n";
						close $FH;
					}
					else {
						warn "Unable to write to $SyncFile: $!\n";
						$Errors++;
						next;
					}
					close $FH;
				}
			}
			else {
				print "/dev/$device is already being verified.  Waiting for completion...\n";
			}
			while (($Status=GetStatus($SyncFile)) eq 'check') {
				sleep 60;
			}
			if ($Status eq 'idle') {
				print strftime(
					"Completed check of /dev/$device at %T on %Y-%m-%d"
					. ($Options{test}?' (test)':'')
					. "\n",
					localtime());
				;
			}
			else {
				warn "Unexpected status '$Status' found in $SyncFile\n";
				$Errors++;
			}
		}
		else {
			warn "Unexpected status '$Status' found in $SyncFile - device skipped\n";
			$Errors++;
		}
	}
}


# ---------------------------------------------------------
#
# GetStatus - retrieve the status of a device
#
sub GetStatus {
	my $SyncFile = shift;
	my $FH;
	if (open($FH,'<',$SyncFile)) {
		my $Status = <$FH>;
		chomp $Status;
		close $FH;
		return $Status;
	} 
	else {
		warn "Unable to open $SyncFile: $!\n";
		$Errors++;
		return "unknown";
	}
}



# ---------------------------------------------------------
#
# opt_h: Usage
#
sub opt_h {

	use FindBin qw($Bin $Script);

	system(qq<pod2text $Bin/$Script | more>);
exit 1;
}

=pod

=head1 verifymd - run MD device verification

=head3 Usage:  
	verifymd [options] [device...]

	verifymd -h

=head3 Flags:
        --exclude|-x            eXclude: Exclude this device.  May be
                                repeated.
        --error-mail|-e mailid: Error: Send an execution report to this
                                e-mail address if errors are detected.
        --filter|-F filter:     Filter: Use alternate error detection
                                filter file "filter".  The default is
                                to use the built-in error filter.
        --always-mail|-m addr:  Mailid: Send an execution report to
                                this e-mail address.
        --always-page|-p addr:  Page: Send a very brief message
                                (suitable for a pager) to this e-mail
                                address when this job completes.
        --error-page|-P addr:   Page error: Send a very brief message to
                                this e-mail address if errors are
                                detected in this job.
        --option-set|-O config: Insert the "config" configuration options
                                from /usr/local/etc/%Prog.cfg
                                into the command line at this point.
	--remote-max=n:		Max remote jobs: When used in conjunction
				with --remote/-R, this will limit the
				number of remote hosts running jobs at the
				same time to n.  Default is 64.  Set to 1
				to run the jobs serially.
        --remote|-R host        Remote: Run this on one or more remote
                                hosts.  "host" may be a host name, an
                                IP address, a configuration file entry
                                name, or a comma or space separated list of
                                any mix of these.  This option may also be
                                repeated to append to the list.
        --test|-t:              Test: echo commands instead of running them.
        --verbose|-v:           Verbose: echo commands before running them.
                                May be used multiple times to increase verbosity.
        --help|-h:              Help: display this panel
	--force|-f		Force: Run verify even if another RAID is resyncing
				or rebuilding.
	--cancel:		Cancel: Cancel an existing check
	--ignore-missing|-i:	Ignore: Don't treat missing devices as errors.
	--week|-n weeknum:	weekNum: Only run on the "weeknum" (1-5) week of the 
				month.  Used to work around limitations of some crons.
	--subject text:s	Subject: set the subject e-mail to 'text'.  Percent
				variables are processed per LogOutput.pm.

=head3 Parameters:
	device-file:	one or more devices to process.  If no list is provided,
			all md devices will be checked.

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
# Output filters.  See LogOutput.pm for a description of filters.
#
IGNORE	"^\s*(\S+:\s*)?$"
IGNORE	"^\s*(\S+:\s+)?/dev/md\S+ excluded.$"
IGNORE	"^\s*(\S+:\s+)?\d+ blocks .*\[U+\]$"
IGNORE	"^\s*(\S+:\s+)?bitmap:"
IGNORE	"^\s*(\S+:\s+)?Personalities : \["
IGNORE	"^\s*(\S+:\s+)?unused devices: "
IGNORE	"^\s*\S+:\s*\S+ ended normally with status 0 and signal 0$"
IGNORE	"^\s*\S+:\s+\S+ ended on \S+, \d+-\d+-\d+ at \d+:\d+:\d+ - run time:"
IGNORE	"^\s*\S+:\s+\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
IGNORE	"^\s*\S+:\s+Beginning check of /dev/"
IGNORE	"^\s*\S+:\s+Command: "
IGNORE	"^\s*\S+:\s+Completed check of /dev/"
LOGONLY	"^\s*\S+ started on \S+ on \S+, \d+-\d+-\d+ at \d+:\d+:\d+"
LOGONLY	"^\s*Command: "
SHOW	"^\s*(\S+:\s+)?/dev/\S+ is already being verified.  Waiting for completion...$"
SHOW	"^\s*(\S+:\s+)?\d+ devices? switched to idle state$"
SHOW	"^\s*(\S+:\s+)?\S+ returned to idle state$"
SHOW	"^\s*(\S+:\s+)?debug:"
SHOW	"^\s*(\S+:\s+)?Executing:"
SHOW	"^\s*(\S+:\s+)?Ignoring /dev/"
SHOW	"^\s*(\S+:\s+)?md\d+\s+: active "
SHOW	"^\s*(\S+:\s+)?Skipping run.  Week number is \d, not \d$"
SHOW	"^\s*(\S+:\s+)?Test:"
SHOW	"^\s*(\S+:\s+)?Verbose:"
SHOW	"^\s*\S+ ended normally with status 0 and signal 0$"
SHOW	"^\s*\S+:\s*Remote job ended at ..:..:.., return code =   0, signal =   0, run time = "
SHOW	"^\s*Beginning check of /dev/"
SHOW	"^\s*Completed check of /dev/"
