#!/usr/bin/perl
#
# scan-log - scan syslog log.
#
use strict;
use warnings;
use lib '/usr/local/lib/perl5/site_perl'; # Required to run via logrotate.
use LogOutput;
use ProcessOptions;
use Text::ParseWords;

use FindBin;

# Initialize variables.
our $Prog=$FindBin::RealScript;		# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;		# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";			# Trim off the path, if present.
my $ExitCode=0;			# No errors so far.
my $Syslog='';                  	# No logging - we just create more traffic we flag.
our $BaseDir=$FindBin::Bin;		# Set our base directory.
my $LogFile='';				# Name of the log file.
my @ConfigFiles=(
	"/usr/localhosts/etc/$Prog/${Prog}.cfg",
	"/usr/local/etc/$Prog/${Prog}.cfg",
	"/usr/local/etc/${Prog}.cfg",
);     # Name of config files.
our %Config;				# Config parms.
our @Parms;				# Command line parms.
our $opt_f;				# Filter file.
our $opt_h;				# Help.
our $opt_m;				# Mail.
our $opt_e;				# Error-only mail.
our $opt_p;				# Page.
our $opt_P;				# Error-only page.
our $opt_S = "%* %m/%d %C %N %F %E %*%*%*";
our $opt_t;				# Test.
our $opt_v;				# Verbose.

my $FilterDir="/usr/local/etc/${Prog}";	# Name of filter directory.
my $Hostname = `hostname`;
chomp $Hostname;
$Hostname =~ s/(.*?)(\..*$)$/$1/;

#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='f=s h m=l e=l O=s p=l P=l S=s t v';

# Load the config file.
foreach my $ConfigFile (@ConfigFiles) {
	if (-e $ConfigFile) {
		open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
		# Build a hash of settings found in the config file.
		while (<CONFIG>) {
			next if (/^\s*#/);      # Comment.
			next if (/^\s*$/);      # Blank line.
			chomp;
			my ($name,$settings)=split(/:?\s+/,$_,2);
			$name=~tr/[a-z]/[A-Z]/;
			$Config{$name}.=$settings . ',' ;
		}
		close CONFIG;
		foreach (keys(%Config)) {
			$Config{$_} =~ s/,$//;	# Remove trailing comma
		}
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
	
# Verify the command line.
die(qq<Incorrect number of parameters.  See "$Prog -h" for usage.\n">)
	unless (@Parms >= 1);

# Set up our logging and output filtering.
my $BaseFileName;
($BaseFileName=$Parms[0]) =~ s"^(.*/)?([^-]+)(-.+)?$"$2";
if (!$opt_f) {
	# No filter file name specified.  Can we find a directory for this log file?
	if (-d "$FilterDir/$BaseFileName") {
		# Yes, load all *.filter files in the directory.
		$opt_f = "$FilterDir/$BaseFileName/*.filter";
	}
	else {
		# No.  Load a specific file name and hope it exists.
		$opt_f="$FilterDir/$BaseFileName.filter";
	}
}
$opt_S =~ s/%F/$BaseFileName/g;

LogOutput({
	ALWAYS_MAIL_LIST => $opt_m,
	ALWAYS_PAGE_LIST => $opt_p,
	ERROR_MAIL_LIST => $opt_e,
	ERROR_PAGE_LIST => $opt_P,
	FILTER_FILE => $opt_f,
	PROGRAM_NAME => $Prog,
	MAIL_SUBJECT => $opt_S,
	VERBOSE => $opt_v,
});

# Verify the command line.
die "No files specified to scan.\n" unless (@Parms > 0);

# Expand file list, in case there are wild cards.
my @Files;
foreach (@Parms) {
	push @Files, glob $_;
}

foreach my $File (@Files) {
	if (! -e $File) {
		warn "$File does not exist -- skipped\n";
		next;
	}
	elsif (! -r $File) {
		warn "$File is not readable -- skipped\n";
		next;
	}
	elsif (! -f $File) {
		warn "$File is not a regular file -- skipped\n";
		next;
	}
	my $Unpack;
	if ($File =~ /.xz$/)		{ $Unpack = 'xzcat'; }
	elsif ($File =~ /.bz2$/)	{ $Unpack = 'bunzip2 -c'; }
	elsif ($File =~ /.gz$/)		{ $Unpack = 'zcat'; }
	else				{ $Unpack = 'cat'; }
	my $Status =
		RunDangerousCmd("$Unpack $File | grep -v '^... .. ..:..:.. .* scanlog: ' | sed 's/ *\$//'"); 
		$ExitCode = $Status if ($Status > $ExitCode);
}

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

exit($ExitCode);

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	open (PAGENATER,"| more") || die("Unable to start pagenater: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - scan a log file for unusual messages
199c202

Usage:  $Prog [options] files
	$Prog -h

Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-f filter:	Filter: name of filter file.  Defaults to $Prog.filter.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			@ConfigFiles.
			the command line at this point.
	-S subject:	Subject: set the subject line for any e-mails.  %F
			will be replaced by the name of the file being 
			scanned.  All other % substitutions are implemented
			by LogOutput.pm.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel

Parameters:
	files	:	one or more files to zip.

Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.
	10      :       Some delete's failed.
ENDUSAGE
close PAGENATER;
exit 1;
}
