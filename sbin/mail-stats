#! /usr/bin/perl
#
# Copyright (c) 2005,2009, Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# =====Description====
#
use strict;
use warnings;
use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($RealBin $RealScript);
use feature 'switch';

# Initialize variables.
our $Prog=$RealScript;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;				# No errors so far.
our $Syslog='';				# Name of Syslog facility.  '' for none.
our $BaseDir=$RealBin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile="$BaseDir/../etc/${Prog}.cfg";     # Name of config file.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
#
our $opt_h;				# -h (help) option.
our $opt_e;				# -e (error mail) option.
our $opt_m;				# -m (mail) option.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_t;				# -t (test) option.
our $opt_v;				# -v (verbose) option.
#

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='e=l h m=l O=s p=l P=l t v';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.
	
# Set up our logging and output filtering.
LogOutput('',$Syslog,$LogFile,$opt_m,$opt_e,$opt_p,$opt_P);

# Verify the command line.
die("No files specified on the command line.  See \"$Prog -h\" for usage.")
	unless (@Parms > 0);

my $External_Connect=0;
my $RBL_Total=0;
my %RBL;
my $Postgrey_Attempt=0;
my $Postgrey_Allowed=0;
my $Postfix_Blocked=0;
my $Viruses_Blocked=0;
my $Amavis_Blocked=0;
my $Amavis_SPAMMY=0;
my $Delivered_Local=0;
my $Delivered_Remote=0;
my @ConnectExcludeList=(
	'127.0.0.', 
	'10.', 
	'192.168.', 
	'172.1[6-9].',
	'172.2\d.',
	'172.3[0-2].',
	'71.245.97.115'
);

my $ConnectExclude='^' . join('|^',@ConnectExcludeList);
$ConnectExclude =~ s/\./\\./g;

while (<>) {
	given ($_) {
		#  postfix/smtpd[21061]: connect from static-71-245-97-115.ptldor.fios.verizon.net[71.245.97.115]
		#when (/postfix\/smtpd\[\d+\]: connect from \S+?\[(?!(127\.0\.0\.\d+|192\.168\.\d+\.\d+|172\.1[6-9]\.\d+\.\d+|172\.2\d\.\d+\.\d+|172\.3[0-2]\.\d+\.\d+))\]/) {
		when (/postfix\/smtpd\[\d+\]: connect from \S+\[(\d+\.\d+\.\d+\.\d+)\]/) {
			$External_Connect++ unless ($1 =~ /$ConnectExclude/o); # Count if it's not internal.
		}
		when (/smtpd.*NOQUEUE: reject:.*Client host.*blocked using (\S+?;)/) {
			$RBL_Total++;
			$RBL{$1} = (defined($RBL{$1}?$RBL{$1}++:1));
		}
		when (/smtpd.*NOQUEUE: reject:.*Recipient address rejected: Greylisted/) {
			$Postgrey_Attempt++;
		}
		when (/smtpd.*NOQUEUE: reject:/) {
			$Postfix_Blocked++;
		}
		when (/postgrey: action=pass, reason/) {
			$Postgrey_Allowed++;
		}
		when (/amavis\[\d+\]: .* Blocked INFECTED/) {
			$Viruses_Blocked++;
		}
		when (/amavis\[\d+\]: .* Blocked /) {
			$Amavis_Blocked++;
		}
		when (/amavis\[\d+\]: .* Passed SPAMMY,/) {
			$Amavis_SPAMMY++;
		}
		when (/postfix\/local\[\d+\]: .* relay=local, .* status=sent/) {
			$Delivered_Local++;
		}
		when (/postfix\/smtp\[\d+\]: .*relay=(?!(127\.0\.0\.\d+|192\.168\.\d+\.\d+|172\.1[6-9]\.\d+\.\d+|172\.2\d\.\d+\.\d+|172\.3[0-2]\.\d+\.\d+)).* status=sent/) {
			$Delivered_Remote++;
		}
	}
}

printf "Report:\n" .
	"\tExternal Connect:\t\t\t%10d\n" .
	"\tBlocked by blacklist:\t\t\t%10d\n" .
	"\tBlocked by greylist:\t\t\t%10d\n" .
	"\tViruses blocked:\t\t\t%10d\n" .
	"\tBlocked by Postfix:\t\t\t%10d\n" .
	"\tBlocked by Amavis:\t\t\t%10d\n" .
	"\t(Passed by Amavis but doubtful:\t%10d)\n" .
	"\tDelivered:\t\t\t\t%10d\n" .
	"\n" .
	"\tOutbound e-mail:\t\t\t%10d\n"
	, $External_Connect, $RBL_Total, $Postgrey_Attempt - $Postgrey_Allowed
	, $Viruses_Blocked, $Postfix_Blocked,$Amavis_Blocked, $Amavis_SPAMMY
	, $Delivered_Local, $Delivered_Remote;


if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="more" unless ($Pagenater);
	system("pod2text $RealScript | $Pagenater");
	exit(1);
}

=pod
=head1 $Prog - >>description<<

=head3 Usage:  
	$Prog [-e mailid] [-m mailid] [-p mailid] [-P mailid] [-O config] [-t|-v] files

	$Prog -h

=head3 Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel

=head3 Parameters:
	files	:	one or more files to process.

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
SHOW	/^\s*$/
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \d+/\d+/\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    "^\s*Job ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
SHOW	"^\s*Report:"
SHOW	"^\s*External Connect:\s+[0-9,]+$"
SHOW	"^\s*Blocked by blacklist:\s+[0-9,]+$"
SHOW	"^\s*Blocked by greylist:\s+[0-9,]+$"
SHOW	"^\s*Blocked by Amavis:\s+[0-9,]+$"
SHOW	"^\s*Viruses blocked:\s+[0-9,]+$"
SHOW	"^\s*Blocked by Postfix:\s+[0-9,]+$"
SHOW	"^\s*\(Passed by Amavis but doubtful:\s+[0-9,]+\)$"
SHOW	"^\s*Delivered:\s+[0-9,]+$"
SHOW	"^\s*Outbound e-mail:\s+[0-9,]+$"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
