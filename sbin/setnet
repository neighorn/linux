#! /usr/bin/perl
#
# Copyright (c) 2005,2010, Martin Consulting Services, Inc.
# Licensed under the Lesser Gnu Public License (LGPL).
# 
# ABSOLUTELY NO WARRENTIES EXPRESSED OR IMPLIED.  ANY USE OF THIS
# CODE IS STRICTLY AT YOUR OWN RISK.
#

#
# Set a network adapter according to one of several configurations.
#
use strict;
no strict 'refs';
use warnings;
use lib '/usr/local/lib/perl5/site_perl';
#use LogOutput;
use ProcessOptions;
use Text::ParseWords;
use FindBin qw($Bin $Script);
use File::Find;
use feature 'switch';

# Initialize variables.
our $Prog=$Script;              	# Get our name, for messages.
$Prog=~s/\.pl$|\.bat$//;            	# Trim off the suffix, if present.
$Prog=~s".*[/\\]"";     	    	# Trim off the path, if present.
our $Errors=0;                       # No errors so far.
our $Syslog='';                         # Name of Syslog facility.  '' for none.
our $BaseDir=$Bin;			# Set our base directory.
our $LogFile="";			# Name of the log file.
our $ConfigFile;			# Name of configuration file.
($ConfigFile=$BaseDir) =~ s"/[^/]*?$"/etc/${Prog}.cfg";     # Name of config file.
our @Parms;				# Array of remaining cmdline parms.
our %Config;				# Our configuration options.
my $ExitCode;				# Code we'll exit with.
our $FoundRoute=0;			# Did we find a default route?
#
our $opt_h;				# -h (help) option.
our $opt_e;				# -e (error mail) option.
our $opt_m;				# -m (mail) option.
our $opt_p;				# -p (pager mail) option.
our $opt_P;				# -P (pager error mail) option.
our $opt_t;				# -t (test) option.
our $opt_v;				# -v (verbose) option.
#
our $StartTime = time();		# Program start time.
$ENV{PATH}="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";

# Make sure we're root.
if ($> != 0) {
	exec ("sudo",$Prog,@ARGV) || die "Unable to exec to sudo: $!";
} 

# Note: general purpose script - don't change current directory.
#chdir $BaseDir || die "Unable to change directories to $BaseDir: $!\n";

# Set the ProcessOptions spec here.  This is just like Getopt::Mixed except:
#       1) We define a new type l (lowercase L), which is a list (i.e. if
#          specified multiple times, values are concatenated & blank separated.o
#          Normal =s and =i would replace values instead of concatenate.
#       2) We don't support long option names, except as aliases.
# These are the standard production options.  Add more options here as needed.
my $OptSpec='h l O=s t v';

# Load the config file.
if (-e $ConfigFile) {
	open(CONFIG,$ConfigFile) || die("Unable to open $ConfigFile: $!\n");
	# Build a hash of settings found in the config file.
	while (<CONFIG>) {
		next if (/^\s*#/);      # Comment.
		next if (/^\s*$/);      # Blank line.
		chomp;
		my ($name,$settings)=split(/:?\s+/,$_,2);
		$name=~tr/[a-z]/[A-Z]/;
		$Config{$name}.=$settings . ',' ;
	}
	close CONFIG;
	foreach (keys(%Config)) {
		$Config{$_} =~ s/,$//;	# Remove trailing comma
	}
}
foreach (keys(%Config)) { s/,$//;};	# Trim off trailing commas.

# Process the config file defaults if present.
unshift @ARGV, quotewords(" ",0,$Config{'ALLJOBS'})
	if (defined($Config{'ALLJOBS'}));

# Process the command line options, if any.
if (@ARGV) {
	# Process the command line arguments.
	ProcessOptions($OptSpec);
} else {
	# No command line options.  Run the default job.
	ProcessOptions($OptSpec,$Config{'DEFAULTJOB'})
		if (defined($Config{'DEFAULTJOB'}));
}
if ($Errors) {exit $ExitCode;}      # Exit if errors were detected.
	
# Set up our logging and output filtering.
#LogOutput('',$Syslog,$LogFile,$opt_m,$opt_e,$opt_p,$opt_P);

# Verify the command line.
die("Missing network name.  See \"$Prog -h\" for usage.")
	if (@Parms < 1);
die("Excess command line parameters starting with $Parms[1].  See \"$Prog -h\" for usage.")
	if (@Parms > 1);

my $Network=uc($Parms[0]);
if ($Network =~ /^none$/i) {
	my $FH;
	open($FH,'/proc/net/dev');
	$opt_v=1;
	foreach (<$FH>) {
		next unless (/^\s*([a-zA-Z0-9]+):/);
		next if (/^\s*lo\d*:/);
		RunDangerousCmd("ifconfig $1 down");
	}
	RunDangerousCmd("rfkill block wifi");
	exit 0;
}

die qq<"$Network" not found in $ConfigFile\n> unless ($Config{$Network});

my $Interface="wlan0";
my $iwconfigParms='';
my $ifconfigParms='';
my $rfkillParms='';
my $RunDHClient='no';
my $gw='';
my @PostCommands;

foreach (parse_line('\s+',0,$Config{$Network})) {
	next unless ($_);
	my ($item,$parm)=split(/=/,$_,2);
	given ($item)  {
		when (/^ipaddr(ess)?$/) {
			$ifconfigParms.="$parm ";
		}
		when (/^(essid|mode|key)$/) {
			$iwconfigParms.=qq<$item "$parm" >;
		}
		when (/^dhclient$/) {
			$RunDHClient=lc($parm);
		}
		when (/^if$/) {
			$Interface=$parm;
		}
		when (/^(gw)$/) {
			eval "\$$item=\$parm;";
		}
		when (/^(rfkill)$/) {
			$rfkillParms.="$parm ";
		}
		when (/^(post)$/) {
			push @PostCommands, $parm;
		}
		default {
			warn "Unknown parameter: $_"
		}
	}
}

RunDangerousCmd("ifconfig $Interface down");
my $Status=0;
if ($Status == 0 && $rfkillParms) {
	$Status=RunDangerousCmd("rfkill $rfkillParms");
}
if ($Status == 0) {
	$Status=RunDangerousCmd("ifconfig $Interface up $ifconfigParms");
}
if ($Status == 0 && $iwconfigParms) {
	$Status=RunDangerousCmd("iwconfig $Interface $iwconfigParms");
}
if ($Status == 0 && $RunDHClient =~ /^y.*/) {
	$Status=RunDangerousCmd("dhclient " . ($opt_v?'-v ':'') . "$Interface");
	my $IPAddr=`ifconfig $Interface`;
	$IPAddr =~ s/^.*inet addr:\s*(\d+\.\d+\.\d+\.\d+)\s.*$/$1/s;
	print "DHCP assigned IP address $IPAddr\n" if ($IPAddr);
}
if ($Status == 0 && $gw) {
	RunDangerousCmd("route delete default > /dev/null 2>&1");
	$Status=RunDangerousCmd("route add default gw $gw");
}
# Patch around dhcp not setting a default route.
if ($RunDHClient =~ /^y/) {
	# See if we have a default route.
	system("grep -q '^${Interface}[ 	]*00000000[ 	]' /proc/net/route");
	if ($? != 0) {
		# No default route set.  See if we can find one.
		find(\&FoundFile, ("/var/run/netconfig/$Interface"));
		warn "Unable to determine default route" unless $FoundRoute;
	}
}
		
foreach (@PostCommands) {
	$Status = RunDangerousCmd($_) unless ($Status);
}

die "Unable to configure $Interface: $!\n" if ($Status);

if ($ExitCode) {
	warn "$Prog failed.\n";
} else {
	#print "$Prog ended normally.\n";
}

$ExitCode=$Errors?10:0;
exit($ExitCode);

#
# FoundFile - process a found file or directory.
#
sub FoundFile {

	my $name = $File::Find::name;
	# Skip non-files, old files
	return unless (
		! $FoundRoute
		&& -f $name
		&& (lstat($name))[9] > $StartTime
		);
	my $FH;
	if (open($FH,'<',$name)) {
		while (<$FH>) {
			chomp;
			#GATEWAYS='172.16.0.1'
			if (/^GATEWAYS='(\d+\.\d+\.\d+\.\d+)'$/) {
				RunDangerousCmd("route add default gw $1");
				$FoundRoute=1;
				last;
			}
		}
		close $FH;
	}
	else {
		warn "Unable to open $name: $!";
	}
}


#
# RunDangerousCmd - run a command, or suppress it if -t specified.
#
sub RunDangerousCmd {
	my ($Cmd,$FH,$Line);
	$Cmd=join(' ',@_);
	if ($opt_t) {
		print "Test: $Cmd\n";
		return 0;
	} else {
		print "Executing: $Cmd\n" if ($opt_v);
		if (open($FH,"$Cmd 2>&1 |")) {
			while ($Line=<$FH>) {
				$Line=~s/[
]//g;
				chomp $Line;
				print "$Line\n";
			};
			close $FH;
			return $?;
		} else {
			warn qq(Unable to start process for "$Cmd": $!\n");
			return 8<<8;
		}
	}
}


#
# opt_h: Usage
#
sub opt_h {

	my $Pagenater=$ENV{PAGENATER};
	$Pagenater="less" unless ($Pagenater);
	system("pod2text $Bin/$Script | $Pagenater");
	exit(1);
}

sub opt_l {
	print "Known configurations: " . join(', ',sort(keys(%Config))) . "\n";
	exit(1);
}

=pod
=head1 $Prog - set assorted network parameters

=head3 Usage:  
	$Prog [-l] [-O config] [-t|-v] config

	$Prog -h

=head3 Flags:
	-e mailid:      Error: Send an execution report to this e-mail address
			if errors are detected.
	-l:		List: list known network settings.
	-m mailid:      Mailid: Send an execution report to this e-mail address.
	-p mailid:      Page: Send a very brief message (suitable for a pager)
			to this e-mail address when this job completes.
	-P mailid:      Page error: Send a very brief message to this e-mail 
			address if errors are detected in this job.
	-O config:      Insert the "config" configuration options from
			$ConfigFile.
			the command line at this point.
	-t	:	Test: echo commands instead of running them.
	-v	:	Verbose: echo commands before running them.
	-h      :       Help: display this panel

=head3 Parameters:
	config	:	same as -O config.

=head3 Return codes:
	0       :       Normal termination
	1       :       Help panel displayed.
	2       :       Invalid or unrecognized command line options.
	3       :       Invalid or unrecognized command line option value.
	4       :       Incorrect command line parameters.
	5       :       Unexpected message found in output.

=cut
__END__
#
# Output filters.  The syntax is: type pattern
#
#  Type:        Ignore - Don't display this message, it's not interesting.
#               LogOnly - Write this message to the syslog and log file, but
#                       don't display it on STDOUT.
#               Show - Display this message, but it's not an error condition.
#               # - This is a comment, ignore it.
#
#  Pattern:     an ordinary perl pattern.  All patterns for a given score
#               are joined by logical OR conditions.
#
#  Notes:
#       1) The "Type" parameter may be specified in upper, lower, or mixed case.
#       2) All messages go to the syslog, regardless of this filter.
#
#
# The following are normal messages we don't need to see.
#
IGNORE  /^\s*$/
IGNORE	^"\s*Internet Systems Consortium DHCP Client 4.1-ESV-R1$"
IGNORE	^"\s*Copyright 2004-2011 Internet Systems Consortium.$"
IGNORE	^"\s*All rights reserved.$"
IGNORE	^"\s*For info, please visit https://www.isc.org/software/dhcp/$"
#
# These are normal messages that we want to see in the e-mail log only.
#
LOGONLY "^\S+ started on \S+ on \S+, \d+/\d+/\d+ at \d+:\d+:\d+"
LOGONLY /^Command: /
#
# These are normal messages that we want to see.
#
SHOW    "^\s*\S+ ended normally with status 0 and signal 0$"
SHOW    "^\s*Test:"
SHOW    "^\s*Executing:"
SHOW	"^\s*debug:"
#
# Anything that doesn't match one of these three sets of patterns is considered
# an error.
