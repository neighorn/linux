#!/bin/bash
# $Id$
# This file must be executable to work! chmod 755!
#
# This script is used with the auto-mounter to mount CIFS windows network 
# shares.  It relies on a couple of data files, located in
# /usr/local/etc/auto.cifs.d, as follows:
#
# 1) DEFAULT: default authentication credentials containing exactly two lines:
#          username=user
#          password=*****
#    Don't insert spaces around the equal signs.
#
# 2) hostname: one file for each remote system we're connecting to, with
# the actual file name matching the remote system host name, containing
# authentication in the same format as above.  This file, if present, overrides
# the credentials found in DEFAULT
#
# 3) mounttab: a list of mount options in the format of "hostname name=value name=value..."
# Any options listed here override the defaults.  Possible options and default values are:
#     dir_mode=0755
#     file_mode=0644
#     uid=nobody
#     gid=[default primary group for user "nobody", typically "nobody" ]
#
# Individually, all three of the above files are optional, however for any specific host
# we want to connect to, either the "hostname" or DEFAULT files must exist to provide
# authentication credentials.
#
# Examples of each of the three files, assuming our remote host is called "winserver":
# 
# DEFAULT:
# 
# user=jsmith
# password=secretpassword
# 
# winserver:
# 
# user=jsmith
# password=secretpassword
# 
# mounttab:
# winserver: file_mode=0770 dir_mode=0770
# 

key="$1"

# Find our credential file, for backward compatibility as it has moved around some.
credfile=""
[[ -f "/usr/local/etc/auto.cifs.d/$key" ]] && credfile="/usr/local/etc/auto.cifs.d/$key"
[[ -z "$credfile" && -f "/usr/local/etc/auto.cifs.d/DEFAULT" ]] && credfile="/usr/local/etc/auto.cifs.d/DEFAULT"
[[ -z "$credfile" ]] && credfile="/usr/local/etc/cifs.credentials/$key" # backwards compatibility
[[ -z "$credfile" ]] && credfile="/usr/local/etc/auto.master.d/cifs.credentials/$key" # backwards compatibility

# Set defaults
export file_mode=0644
export dir_mode=0755
export uid=nobody
export gid=$(getent passwd nobody | awk -F: '{print $4}')

# See if we have any overrides for this host.
if [[ -e "/usr/local/etc/auto.cifs.d/mounttab" ]]
then
    override=$(grep -i "^$key\s" /usr/local/etc/auto.cifs.d/mounttab)
    override=${override#*[$IFS]}	# Remove host name to get just the options.
    for name in $override
    do
        value=${name#*=}
        name=${name%%=*}
	case "$name" in
		"file_mode")	file_mode="$value" ;;
		"dir_mode")	dir_mode="$value" ;;
		"uid")		uid="$value" ;;
		"gid")		gid="$value" ;;
		*) echo "Invalid value '$name' in mounttab -- ignored" >&2
	esac
    done
fi

mountopts="-fstype=cifs,file_mode=$file_mode,dir_mode=$dir_mode,uid=$uid,gid=$gid" 

smbclientopts=""
echo "Attempting to mount $key" | /usr/bin/logger -t auto.cifs
for P in /usr/local/samba/bin /usr/local/bin /bin /sbin /usr/bin /usr/sbin
do
        if [ -x $P/smbclient ]
        then
                SMBCLIENT=$P/smbclient
                break
        fi
done
[ -x $SMBCLIENT ] || exit 1
if [ -e "$credfile" ]
then
        mountopts=$mountopts",credentials=$credfile"
        smbclientopts="-A "$credfile
else
        smbclientopts="-N"
fi
# Added -m SMB3 below to allow CNAME's for hosts.
cmd="$SMBCLIENT $smbclientopts -g -m SMB3 -L $key"
echo "$cmd" > /tmp/auto.cifs.log
$cmd 2>/dev/null |
   awk -v key="$key" -v opts="$mountopts" -F'|' -- '
        BEGIN   { ORS=""; first=1 }
	/Disk/  { if (first) { print opts; first=0 };
		  gsub(/ /, "\\ ", $2);
		  sub(/\$/, "\\$", $2);
		  print " \\\n\t /" $2, "://" key "/" $2 }
        END     { if (!first) print "\n"; else exit 1 }
        ' 2>&1 |
   tee -a /tmp/auto.cifs.log
exit 0
