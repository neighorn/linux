#!/usr/ods/bin/perl -T
#############################################################################
#                                                                           #
# lockuser - lock a user account, clean up their home directory, etc.       #
#                                                                           #
#############################################################################

# Set up the environment.
$ENV{'PATH'}='/usr/local/sbin:/usr/local/bin:/usr/ods/sbin:/usr/ods/bin:/usr/sbin:/usr/bin:/bin';

#local($a,$b,...);				# Declare local variables.

# Initialize variables.
$Prog=$0;					# Get our name, for messages.
$Prog=~s/^.*\///;				# Trim off the path, if present.
@Args=@ARGV;					# Preserve orig command for ref.
$ErrorFlag=0;					# No errors so far.
$Today=`date +%Y-%m-%d`;			# Date used for expirations.
chomp $Today;
$Relocated="/etc/postfix/relocated";		# Location of relocated file.

# Set the default values for options.
$opt_y=0;					# Assume -y not specified.
$opt_i="";					# Assume -i not specified.
$opt_t="";					# Assume -t not specified.

# Process the command line options, if any.
$ErrorFlag=&ProcessOptions;
if ($ErrorFlag) {exit $ErrorFlag;}	# Exit if errors were detected.

# Make sure the input file is a normal file (no pipes or redirects) and that
# we can read it as our current user.  This assures that when we open it as
# root we don't give something away that we shouldn't have.
if ($opt_i) {
	if (! -f $opt_i || ! -r $opt_i) {
		# Can't read this file.
		print STDERR "$Unable to read \"$opt_i\"\n";
		exit 12;
	}
}
		
# Make sure we have root authority for this.
if ($> != 0) {
        # We need to run this as root.
        $MyModule='/usr/ods/sbin/lockuser';
	(@Args)=&untaint(@Args);
        exec("sudo $MyModule @Args");
        exit $?;
}

# Process each user, either from the file or from the command line.
if ($opt_i) {
	# Reading in user-IDs from a file.
	sysopen (INPUT,$opt_i, O_RDONLY) || die("Unable to open $opt_i: $!\n");
	while (<$INPUT>) {
		# Parse the UserID off the front of the record.  Skip comments.
		next if (/^\s*\#/);	# Skip comments.
		($UserID)=split(/\s*(\S+)/);

		$RetCode=&LockUser($UserID);
		$ErrorFlag=$RetCode if ($ErrorFlag < $RetCode);
		print "\n";
	}
} else {
	# User-IDs are on the command line.
	for (@ARGV) {
		$RetCode=&LockUser($_);
		$ErrorFlag=$RetCode if ($ErrorFlag < $RetCode);
		print "\n";
	}
}

exit $ErrorFlag;



#
# LockUser - lock a user.
#
sub LockUser {

	local($UserID)=@_;			# Get calling parms.

	local($UserID2, $UID, $HomeDir, $MailFile);# Declare local variables.

	
	# Find this ID in /etc/passwd.
	($UserID2,$trash,$UID,$trash,$trash,$trash,$UserName,$HomeDir,$trash)=
		getpwnam($UserID);
	if ($UserID ne $UserID2) {
		print STDERR "\"$UserID\" is not a valid user-ID on this system.\n";
		return 10;
	}
	$UserID=untaint($UserID2);
	$UID=untaint($UID);
	$HomeDir=untaint($HomeDir);

	if ($UID < 100 && $< != 0) {
		print STDERR "$UserID is a critical system ID. " .
			"You do not have authority to delete it.\n";
		return 10;
	}

	# Lock the ID.
	if (`passwd -S $UserID` =~ /$UserID LK/) {
		print "$UserID is already locked.\n"
	} else {	
		if (&GetOK("OK to lock $UserID ($UserName)?")) {
			&RunDangerous("passwd -l $UserID",
				"Unable to lock $UserID");
		} else {
			print "$UserID was not locked.\n";
		}
	}

	# Delete any temporary files.
	&RunDangerous(
		"find /tmp /var/tmp -user $UID -exec" . 
			" echo rm -rf {} \\\;",
			"Unable to delete temporary files.");

	# Remove the home directory.
	if (-d $HomeDir) {
		if (&GetOK("OK to delete ${UserID}'s home directory?")) {
			&RunDangerous("rm -r $HomeDir",
				"Unable to delete $HomeDir");
		} else {
			print "Home directory was not removed.\n";
		}
	} else {
		print "${UserID}'s home directory has already been deleted.\n";
	}

	# Remove any e-mail.
	$MailBox="/var/spool/mail/$UserID";
	$PopBox="/var/spool/mail/.${UserID}.pop";
	if (-f $MailBox || -f $PopBox) {
		if (&GetOK("OK to delete ${UserID}'s e-mail?")) {
			for $MailFile ($MailBox,$PopBox)
			{
				&RunDangerous("rm -f $MailFile", 
					"Unable to remove $MailFile.")
						if (-f $MailFile);
			}
		} else {
			print "Mail files were not removed.\n";
		}
	} else {
		print "$UserID has no mail files.\n";
	}

	# Reject future mail for this user?
	if (-f $Relocated) {
		if (system("grep -q '^$UserID\[ 	\]' $Relocated") == 0) {
			print "${UserID}'s e-mail is already being rejected.\n";
		} else {
			if (&GetOK("Reject future e-mail?")) {
				&RunDangerous(
				"echo '$UserID	(no forwarding address)' >>" .
				"$Relocated &&" .
				"postmap $Relocated &&" .
				"postfix reload > /dev/null",
				"Unable to update postfix.") ||
				print "Future e-mail for $UserID will be rejected.\n";
			}
		}
	}
}



#
# GetOK - Get the user's approval for an action.
#
sub GetOK {

	return 1 if ($opt_y);		# Don't ask if they used -y.

	local($Prompt)=@_;
	local($Answer);

#	Loop until we get an answer we recognize.
	for (;;) {
		print "[Test]: " if ($opt_t);
		print "$Prompt [y/n/q]: ";
		$Answer=<STDIN>;
		last if ($Answer =~ /^\s*[YyNnOoQq]/);
		print "\nPlease answer y, n, or q (yes, no, or quit).\n\n";
	}
	exit 5 if ($Answer =~ /^\s*[Qq]/);	# Exit if they want to quit.
	return 1 if ($Answer =~ /^\s*[YyOo]/);	# True if yes or OK.
	return 0;				# False otherwise.
}



#
# RunDangerous - run a dangerous command, unless -t has been set.
#
sub RunDangerous {

	local($Command, $ErrorText)=@_;
	local($Prefix,$ErrorMsg,$Status);	
	if ($opt_t) {
		# Testing - don't really do it.
		print "[Test]: $Command\n";
	} else {
		# This is for real.
		$ErrorMsg=`$Command`;
		$Status=$?;
		if ($Status) {
			($Prefix,$trash)=split(" ",$Command,2);
			print STDERR "$ErrorMsg\n$ErrorText   " .
				"$Prefix returned status $Status\n";
			$ErrorFlag=11 if ($ErrorFlag < 11);
		}
	}
}




#
# Untaint
#

sub untaint {
        local(@parms) = @_;
        local($tmp);
        foreach (@parms) {
                s/^(.*)$/$1/;
                $_=$1;
        }
        if (@parms == 1) {
                # Return scalar
                return $parms[$[];
        } else {
                # Return list
                return (@parms);
        }
}




#
# ProcessOptions
#
sub ProcessOptions {

	local($option,$value);
	use Getopt::Mixed "nextOption";
	Getopt::Mixed::init("m=s e=s h i y t");
	while (($option, $value) = nextOption()) {
		if ($option eq "h")	{
			# -h specified.  Show them the usage and exit.
			&Usage;
			exit 1;
		}
		if ($option eq "i")	{
			# -i specified.  Use file as input instead of cmdline.
			if ($opt_i) {
				print STDERR "The \"-i\" option may not be used " .
					"more than once.\n";
				$ErrorFlag=2;
			} else {
				$opt_i=$value;
			}
			next;
		}
	
		if ($option eq "y")	{
			# -y specified.  Remember not to prompt for everything.
			$opt_y = 1;
			next;
		}
			
		if ($option eq "t")	{
			# -t specified.  Remember that we're only testing.
			$opt_t = 1;
			next;
		}
			
		print STDERR "Unrecognized option: \"$option\".  Enter " .
			"\"$Prog -h\" for usage information.\n";
		$ErrorFlag=2;
	}
	Getopt::Mixed::cleanup();
	return $ErrorFlag;
}


#
# Usage
#
sub Usage {

	open (PAGENATER,"| less -c -E") || die("Unable to start less: $!\n");
	print PAGENATER <<"ENDUSAGE";
$Prog - lock (suspend) login accounts.

Usage:	$Prog [-i file] [-t] [-y] [-h]
	$Prog [-h]

Flags:
	-i file	:	Input: read user-IDs to delete from "file".
	-t	:	Test: don't really delete anything.
	-y	:	Yes: don't prompt for approval before deleting things.
	-h	:	Help: display this panel

Examples:

Return codes:
	0	:	Normal termination
	1	:	Help panel displayed.
	2	:	Invalid or unrecognized command line options.
	3	:	Invalid or unrecognized command line option value.
	4	:	Incorrect command line parameters.
	10	:	UserID(s) skipped - warning message issued.
	11	:	Unable to lock UserID(s) completely - warning
			messages issued.
	12	:	Unable to read input file (-i)
ENDUSAGE
close PAGENATER;
}
